{"version":3,"file":"polyline.directive.js","sources":["polyline.directive.js"],"names":[],"mappingsoCAKO;AACP;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAA0B;AAC1B;AACA;AACA;AACA","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar leaflet_1 = require(\"leaflet\");\nvar layer_group_provider_1 = require(\"./layer-group.provider\");\nvar layer_provider_1 = require(\"./layer.provider\");\nvar lng2lat_1 = require(\"./lng2lat\");\n/**\n * Angular2 directive for Leaflet polylines.\n *\n * *You can use this directive in an Angular2 template after importing `YagaModule`.*\n *\n * How to use in a template:\n * ```html\n * <yaga-map>\n *     <yaga-polyline\n *         [(display)]=\"...\"\n *         [(stroke)]=\"...\"\n *         [(color)]=\"...\"\n *         [(weight)]=\"...\"\n *         [(opacity)]=\"...\"\n *         [(lineCap)]=\"...\"\n *         [(lineJoin)]=\"...\"\n *         [(dashArray)]=\"...\"\n *         [(dashOffset)]=\"...\"\n *         [(fill)]=\"...\"\n *         [(fillColor)]=\"...\"\n *         [(fillOpacity)]=\"...\"\n *         [(fillRule)]=\"...\"\n *         [(renderer)]=\"...\"\n *         [(className)]=\"...\"\n *         [(style)]=\"...\"\n *         [(latLngs)]=\"...\"\n *         [(geoJSON)]=\"...\"\n *\n *         (add)=\"...\"\n *         (remove)=\"...\"\n *         (popupopen)=\"...\"\n *         (popupclose)=\"...\"\n *         (tooltipopen)=\"...\"\n *         (tooltipclose)=\"...\"\n *         (click)=\"...\"\n *         (dblclick)=\"...\"\n *         (mousedown)=\"...\"\n *         (mouseover)=\"...\"\n *         (mouseout)=\"...\"\n *         (contextmenu)=\"...\"\n *\n *         [interactive]=\"...\"\n *         [smoothFactor]=\"...\"\n *         [noClip]=\"...\"\n *         [properties]=\"...\"\n *         >\n *     </yaga-polyline>\n * </yaga-map>\n * ```\n *\n * @link http://leafletjs.com/reference-1.2.0.html#polyline Original Leaflet documentation\n * @link https://leaflet-ng2.yagajs.org/latest/browser-test?grep=Rectangle%20Directive Unit-Test\n * @link https://leaflet-ng2.yagajs.org/latest/coverage/lcov-report/lib/polyline.directive.js.html Test coverage\n * @link https://leaflet-ng2.yagajs.org/latest/typedoc/classes/polylinedirective.html API documentation\n * @example https://leaflet-ng2.yagajs.org/latest/examples/polyline-directive\n */\nvar PolylineDirective = /** @class */ (function (_super) {\n    __extends(PolylineDirective, _super);\n    function PolylineDirective(layerGroupProvider, layerProvider) {\n        var _this = _super.call(this, []) || this;\n        _this.layerGroupProvider = layerGroupProvider;\n        /**\n         * Two-Way bound property for the display status of the geometry.\n         * Use it with `<yaga-polyline [(display)]=\"someValue\">`\n         * or `<yaga-polyline (displayChange)=\"processEvent($event)\">`\n         */\n        _this.displayChange = new core_1.EventEmitter();\n        /**\n         * Two-Way bound property for the stroke state of the geometry.\n         * Use it with `<yaga-polyline [(stroke)]=\"someValue\">`\n         * or `<yaga-polyline (strokeChange)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#polyline-stroke Original Leaflet documentation\n         */\n        _this.strokeChange = new core_1.EventEmitter();\n        /**\n         * Two-Way bound property for the line-color of the geometry.\n         * Use it with `<yaga-polyline [(color)]=\"someValue\">`\n         * or `<yaga-polyline (colorChange)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#polyline-color Original Leaflet documentation\n         */\n        _this.colorChange = new core_1.EventEmitter();\n        /**\n         * Two-Way bound property for the weight of the geometry.\n         * Use it with `<yaga-polyline [(weight)]=\"someValue\">`\n         * or `<yaga-polyline (weightChange)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#polyline-weight Original Leaflet documentation\n         */\n        _this.weightChange = new core_1.EventEmitter();\n        /**\n         * Two-Way bound property for the opacity of the geometry.\n         * Use it with `<yaga-polyline [(opacity)]=\"someValue\">`\n         * or `<yaga-polyline (opacityChange)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#polyline-opacity Original Leaflet documentation\n         */\n        _this.opacityChange = new core_1.EventEmitter();\n        /**\n         * Two-Way bound property for the lineCap of the geometry.\n         * Use it with `<yaga-polyline [(lineCap)]=\"someValue\">`\n         * or `<yaga-polyline (lineCapChange)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#polyline-linecap Original Leaflet documentation\n         */\n        _this.lineCapChange = new core_1.EventEmitter();\n        /**\n         * Two-Way bound property for the lineJoin of the geometry.\n         * Use it with `<yaga-polyline [(lineJoin)]=\"someValue\">`\n         * or `<yaga-polyline (lineJoinChange)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#polyline-linejoin Original Leaflet documentation\n         */\n        _this.lineJoinChange = new core_1.EventEmitter();\n        /**\n         * Two-Way bound property for the dashArray of the geometry.\n         * Use it with `<yaga-polyline [(dashArray)]=\"someValue\">`\n         * or `<yaga-polyline (dashArrayChange)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#polyline-dasharray Original Leaflet documentation\n         */\n        _this.dashArrayChange = new core_1.EventEmitter();\n        /**\n         * Two-Way bound property for the dashOffset of the geometry.\n         * Use it with `<yaga-polyline [(dashOffset)]=\"someValue\">`\n         * or `<yaga-polyline (dashOffsetChange)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#polyline-dashoffset Original Leaflet documentation\n         */\n        _this.dashOffsetChange = new core_1.EventEmitter();\n        /**\n         * Two-Way bound property for the fill state of the geometry.\n         * Use it with `<yaga-polyline [(fill)]=\"someValue\">`\n         * or `<yaga-polyline (fillChange)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#polyline-fill Original Leaflet documentation\n         */\n        _this.fillChange = new core_1.EventEmitter();\n        /**\n         * Two-Way bound property for the fill-color of the geometry.\n         * Use it with `<yaga-polyline [(fillColor)]=\"someValue\">`\n         * or `<yaga-polyline (fillColorChange)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#polyline-fillcolor Original Leaflet documentation\n         */\n        _this.fillColorChange = new core_1.EventEmitter();\n        /**\n         * Two-Way bound property for the fill-opacity of the geometry.\n         * Use it with `<yaga-polyline [(fillOpacity)]=\"someValue\">`\n         * or `<yaga-polyline (fillOpacityChange)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#polyline-fillopacity Original Leaflet documentation\n         */\n        _this.fillOpacityChange = new core_1.EventEmitter();\n        /**\n         * Two-Way bound property for the fill-rule of the geometry.\n         * Use it with `<yaga-polyline [(fillRule)]=\"someValue\">`\n         * or `<yaga-polyline (fillRuleChange)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#polyline-fillrule Original Leaflet documentation\n         */\n        _this.fillRuleChange = new core_1.EventEmitter();\n        // @Output() public rendererChange: EventEmitter<number> = new EventEmitter();\n        /**\n         * Two-Way bound property for the className of the geometry.\n         * Use it with `<yaga-polyline [(className)]=\"someValue\">`\n         * or `<yaga-polyline (classNameChange)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#polyline-classname Original Leaflet documentation\n         */\n        _this.classNameChange = new core_1.EventEmitter();\n        /**\n         * Two-Way bound property for the css-style of the geometry.\n         * Use it with `<yaga-polyline [(style)]=\"someValue\">`\n         * or `<yaga-polyline (styleChange)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#polyline-setstyle Original Leaflet documentation\n         */\n        _this.styleChange = new core_1.EventEmitter();\n        /**\n         * Two-Way bound property for the array of LatLngs of the geometry.\n         * Use it with `<yaga-polyline [(latLngs)]=\"someValue\">`\n         * or `<yaga-polyline (latLngsChange)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.3.0.html#polyline-setlatlngs Original Leaflet documentation\n         */\n        _this.latLngsChange = new core_1.EventEmitter();\n        /**\n         * Two-Way bound property for the corresponding GeoJSON.\n         * Use it with `<yaga-polyline [(geoJSON)]=\"someValue\">`\n         * or `<yaga-polyline (geoJSONChange)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.3.0.html#polyline-togeojson Original Leaflet documentation\n         */\n        /* tslint:disable:max-line-length */\n        _this.geoJSONChange = new core_1.EventEmitter();\n        /* tslint:enable */\n        /**\n         * From leaflet fired add event.\n         * Use it with `<yaga-polyline (add)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#polyline-add Original Leaflet documentation\n         */\n        _this.addEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired remove event.\n         * Use it with `<yaga-polyline (remove)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#polyline-remove Original Leaflet documentation\n         */\n        _this.removeEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired popupopen event.\n         * Use it with `<yaga-polyline (popupopen)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#polyline-popupopen Original Leaflet documentation\n         */\n        _this.popupopenEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired popupclose event.\n         * Use it with `<yaga-polyline (popupclose)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#polyline-popupclose Original Leaflet documentation\n         */\n        _this.popupcloseEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired tooltipopen event.\n         * Use it with `<yaga-polyline (tooltipopen)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#polyline-tooltipopen Original Leaflet documentation\n         */\n        _this.tooltipopenEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired tooltipclose event.\n         * Use it with `<yaga-polyline (tooltipclose)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#polyline-tooltipclose Original Leaflet documentation\n         */\n        _this.tooltipcloseEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired click event.\n         * Use it with `<yaga-polyline (click)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#polyline-click Original Leaflet documentation\n         */\n        _this.clickEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired dblclick event.\n         * Use it with `<yaga-polyline (dblclick)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#polyline-dblclick Original Leaflet documentation\n         */\n        _this.dblclickEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired mousedown event.\n         * Use it with `<yaga-polyline (mousedown)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#polyline-mousedown Original Leaflet documentation\n         */\n        _this.mousedownEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired mouseover event.\n         * Use it with `<yaga-polyline (mouseover)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#polyline-mouseover Original Leaflet documentation\n         */\n        _this.mouseoverEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired mouseout event.\n         * Use it with `<yaga-polyline (mouseout)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#polyline-mouseout Original Leaflet documentation\n         */\n        _this.mouseoutEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired contextmenu event.\n         * Use it with `<yaga-polyline (contextmenu)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#polyline-contextmenu Original Leaflet documentation\n         */\n        _this.contextmenuEvent = new core_1.EventEmitter();\n        layerProvider.ref = _this;\n        _this.feature = _this.feature || {\n            geometry: { type: \"LineString\", coordinates: [] },\n            properties: {},\n            type: \"Feature\",\n        };\n        _this.feature.properties = _this.feature.properties || {};\n        _this.on(\"remove\", function () {\n            _this.displayChange.emit(false);\n        });\n        _this.on(\"add\", function () {\n            _this.displayChange.emit(true);\n        });\n        _this.layerGroupProvider.ref.addLayer(_this);\n        // Events\n        _this.on(\"add\", function (event) {\n            _this.addEvent.emit(event);\n        });\n        _this.on(\"remove\", function (event) {\n            _this.removeEvent.emit(event);\n        });\n        _this.on(\"popupopen\", function (event) {\n            _this.popupopenEvent.emit(event);\n        });\n        _this.on(\"popupclose\", function (event) {\n            _this.popupcloseEvent.emit(event);\n        });\n        _this.on(\"tooltipopen\", function (event) {\n            _this.tooltipopenEvent.emit(event);\n        });\n        _this.on(\"tooltipclose\", function (event) {\n            _this.tooltipcloseEvent.emit(event);\n        });\n        _this.on(\"click\", function (event) {\n            _this.clickEvent.emit(event);\n        });\n        _this.on(\"dblclick\", function (event) {\n            _this.dblclickEvent.emit(event);\n        });\n        _this.on(\"mousedown\", function (event) {\n            _this.mousedownEvent.emit(event);\n        });\n        _this.on(\"mouseover\", function (event) {\n            _this.mouseoverEvent.emit(event);\n        });\n        _this.on(\"mouseout\", function (event) {\n            _this.mouseoutEvent.emit(event);\n        });\n        _this.on(\"contextmenu\", function (event) {\n            _this.contextmenuEvent.emit(event);\n        });\n        return _this;\n    }\n    /**\n     * Internal method to provide the removal of the layer in Leaflet, when removing it from the Angular template\n     */\n    PolylineDirective.prototype.ngOnDestroy = function () {\n        this.removeFrom(this.layerGroupProvider.ref);\n    };\n    /**\n     * Derived method fof the original LatLngs.\n     * @link http://leafletjs.com/reference-1.2.0.html#polyline-addlatlngs Original Leaflet documentation\n     */\n    PolylineDirective.prototype.setLatLngs = function (val) {\n        _super.prototype.setLatLngs.call(this, val);\n        this.latLngsChange.emit(this._latlngs);\n        this.geoJSONChange.emit(this.geoJSON);\n        return this;\n    };\n    /**\n     * Derived method of the original addLatLng.\n     * @link http://leafletjs.com/reference-1.2.0.html#polyline-addlatlngs Original Leaflet documentation\n     */\n    PolylineDirective.prototype.addLatLng = function (val) {\n        _super.prototype.addLatLng.call(this, val);\n        this.latLngsChange.emit(this._latlngs);\n        this.geoJSONChange.emit(this.geoJSON);\n        return this;\n    };\n    Object.defineProperty(PolylineDirective.prototype, \"latLngs\", {\n        get: function () {\n            return this._latlngs;\n        },\n        /**\n         * Two-Way bound property for the array of LatLngs for the geometry.\n         * Use it with `<yaga-polyline [(latLngs)]=\"someValue\">` or `<yaga-polyline [latLngs]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#polyline-setbounds Original Leaflet documentation\n         */\n        set: function (val) {\n            this.setLatLngs(val);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PolylineDirective.prototype, \"geoJSON\", {\n        get: function () {\n            return this.toGeoJSON();\n        },\n        /**\n         * Two-Way bound property for the corresponding GeoJSON.\n         * Use it with `<yaga-polyline [(geoJSON)]=\"someValue\">` or `<yaga-polyline [geoJSON]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#polyline-togeojson Original Leaflet documentation\n         */\n        set: function (val) {\n            this.feature.properties = val.properties;\n            var geomType = val.geometry.type; // Normally \"(Multi)LineString\"\n            /* istanbul ignore if */\n            if (geomType !== \"LineString\" && geomType !== \"MultiLineString\") {\n                throw new Error(\"Unsupported geometry type: \" + geomType);\n            }\n            this.setLatLngs(lng2lat_1.lng2lat(val.geometry.coordinates));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Derived method of the original setStyle.\n     * @link http://leafletjs.com/reference-1.2.0.html#polyline-setstyle Original Leaflet documentation\n     */\n    PolylineDirective.prototype.setStyle = function (style) {\n        _super.prototype.setStyle.call(this, style);\n        if (style.hasOwnProperty(\"stroke\")) {\n            this.strokeChange.emit(style.stroke);\n        }\n        if (style.hasOwnProperty(\"color\")) {\n            this.colorChange.emit(style.color);\n        }\n        if (style.hasOwnProperty(\"weight\")) {\n            this.weightChange.emit(style.weight);\n        }\n        if (style.hasOwnProperty(\"opacity\")) {\n            this.opacityChange.emit(style.opacity);\n        }\n        if (style.hasOwnProperty(\"lineCap\")) {\n            this.lineCapChange.emit(style.lineCap);\n        }\n        if (style.hasOwnProperty(\"lineJoin\")) {\n            this.lineJoinChange.emit(style.lineJoin);\n        }\n        if (style.hasOwnProperty(\"dashArray\")) {\n            this.dashArrayChange.emit(style.dashArray);\n        }\n        if (style.hasOwnProperty(\"dashOffset\")) {\n            this.dashOffsetChange.emit(style.dashOffset);\n        }\n        if (style.hasOwnProperty(\"fill\")) {\n            this.fillChange.emit(style.fill);\n        }\n        if (style.hasOwnProperty(\"fillColor\")) {\n            this.fillColorChange.emit(style.fillColor);\n        }\n        if (style.hasOwnProperty(\"fillOpacity\")) {\n            this.fillOpacityChange.emit(style.fillOpacity);\n        }\n        if (style.hasOwnProperty(\"fillRule\")) {\n            this.fillRuleChange.emit(style.fillRule);\n        }\n        if (style.hasOwnProperty(\"className\")) {\n            this.classNameChange.emit(style.className);\n        }\n        this.styleChange.emit(style);\n        return this;\n    };\n    Object.defineProperty(PolylineDirective.prototype, \"opacity\", {\n        get: function () {\n            return this.options.opacity;\n        },\n        /**\n         * Two-Way bound property for the opacity.\n         * Use it with `<yaga-polyline [(opacity)]=\"someValue\">` or `<yaga-polyline [opacity]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#polyline-opacity Original Leaflet documentation\n         */\n        set: function (val) {\n            this.setStyle({ opacity: val });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PolylineDirective.prototype, \"stroke\", {\n        get: function () {\n            return !!this.options.stroke;\n        },\n        /**\n         * Two-Way bound property for the stroke.\n         * Use it with `<yaga-polyline [(stroke)]=\"someValue\">` or `<yaga-polyline [stroke]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#polyline-stroke Original Leaflet documentation\n         */\n        set: function (val) {\n            this.setStyle({ stroke: val });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PolylineDirective.prototype, \"color\", {\n        get: function () {\n            return this.options.color;\n        },\n        /**\n         * Two-Way bound property for the color.\n         * Use it with `<yaga-polyline [(color)]=\"someValue\">` or `<yaga-polyline [color]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#polyline-color Original Leaflet documentation\n         */\n        set: function (val) {\n            this.setStyle({ color: val });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PolylineDirective.prototype, \"weight\", {\n        get: function () {\n            return this.options.weight;\n        },\n        /**\n         * Two-Way bound property for the weight.\n         * Use it with `<yaga-polyline [(weight)]=\"someValue\">` or `<yaga-polyline [weight]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#polyline-weight Original Leaflet documentation\n         */\n        set: function (val) {\n            this.setStyle({ weight: val });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PolylineDirective.prototype, \"lineCap\", {\n        get: function () {\n            return this.options.lineCap;\n        },\n        /**\n         * Two-Way bound property for the lineCap.\n         * Use it with `<yaga-polyline [(lineCap)]=\"someValue\">` or `<yaga-polyline [lineCap]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#polyline-linecap Original Leaflet documentation\n         */\n        set: function (val) {\n            this.setStyle({ lineCap: val });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PolylineDirective.prototype, \"lineJoin\", {\n        get: function () {\n            return this.options.lineJoin;\n        },\n        /**\n         * Two-Way bound property for the lineJoin.\n         * Use it with `<yaga-polyline [(lineJoin)]=\"someValue\">` or `<yaga-polyline [lineJoin]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#polyline-linejoin Original Leaflet documentation\n         */\n        set: function (val) {\n            this.setStyle({ lineJoin: val });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PolylineDirective.prototype, \"dashArray\", {\n        get: function () {\n            return this.options.dashArray;\n        },\n        /**\n         * Two-Way bound property for the dashArray.\n         * Use it with `<yaga-polyline [(dashArray)]=\"someValue\">` or `<yaga-polyline [dashArray]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#polyline-dasharray Original Leaflet documentation\n         */\n        set: function (val) {\n            this.setStyle({ dashArray: val });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PolylineDirective.prototype, \"dashOffset\", {\n        get: function () {\n            return this.options.dashOffset;\n        },\n        /**\n         * Two-Way bound property for the dashOffset.\n         * Use it with `<yaga-polyline [(dashOffset)]=\"someValue\">` or `<yaga-polyline [dashOffset]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#polyline-dashoffset Original Leaflet documentation\n         */\n        set: function (val) {\n            this.setStyle({ dashOffset: val });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PolylineDirective.prototype, \"fill\", {\n        get: function () {\n            return !!this.options.fill;\n        },\n        /**\n         * Two-Way bound property for the fill.\n         * Use it with `<yaga-polyline [(fill)]=\"someValue\">` or `<yaga-polyline [fill]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#polyline-fill Original Leaflet documentation\n         */\n        set: function (val) {\n            this.setStyle({ fill: val });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PolylineDirective.prototype, \"fillColor\", {\n        get: function () {\n            return this.options.fillColor;\n        },\n        /**\n         * Two-Way bound property for the fillColor.\n         * Use it with `<yaga-polyline [(fillColor)]=\"someValue\">` or `<yaga-polyline [fillColor]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#polyline-fillcolor Original Leaflet documentation\n         */\n        set: function (val) {\n            this.setStyle({ fillColor: val });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PolylineDirective.prototype, \"fillOpacity\", {\n        get: function () {\n            return this.options.fillOpacity;\n        },\n        /**\n         * Two-Way bound property for the fillOpacity.\n         * Use it with `<yaga-polyline [(fillOpacity)]=\"someValue\">` or `<yaga-polyline [fillOpacity]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#polyline-fillopacity Original Leaflet documentation\n         */\n        set: function (val) {\n            this.setStyle({ fillOpacity: val });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PolylineDirective.prototype, \"fillRule\", {\n        get: function () {\n            return this.options.fillRule;\n        },\n        /**\n         * Two-Way bound property for the fillRule.\n         * Use it with `<yaga-polyline [(fillRule)]=\"someValue\">` or `<yaga-polyline [fillRule]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#polyline-fillrule Original Leaflet documentation\n         */\n        set: function (val) {\n            this.setStyle({ fillRule: val });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PolylineDirective.prototype, \"className\", {\n        get: function () {\n            return this.options.className;\n        },\n        /**\n         * Two-Way bound property for the className.\n         * Use it with `<yaga-polyline [(className)]=\"someValue\">` or `<yaga-polyline [className]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#polyline-classname Original Leaflet documentation\n         */\n        set: function (val) {\n            this.setStyle({ className: val });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PolylineDirective.prototype, \"style\", {\n        get: function () {\n            return this.options;\n        },\n        /**\n         * Two-Way bound property for the opacity.\n         * Use it with `<yaga-polyline [(style)]=\"someValue\">` or `<yaga-polyline [style]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#polyline-style Original Leaflet documentation\n         */\n        set: function (val) {\n            this.setStyle(val);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PolylineDirective.prototype, \"display\", {\n        get: function () {\n            var container;\n            try {\n                container = this.getElement();\n            }\n            catch (err) {\n                /* istanbul ignore next */\n                return false;\n            }\n            return container.style.display !== \"none\" && !!container.parentElement;\n        },\n        /**\n         * Two-Way bound property for the display state.\n         * Use it with `<yaga-polyline [(display)]=\"someValue\">` or `<yaga-polyline [display]=\"someValue\">`\n         */\n        set: function (val) {\n            var isDisplayed = this.display;\n            if (isDisplayed === val) {\n                return;\n            }\n            var container;\n            try {\n                container = this.getElement();\n            }\n            catch (err) {\n                /* istanbul ignore next */\n                return;\n            }\n            this.displayChange.emit(val);\n            container.style.display = val ? \"\" : \"none\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PolylineDirective.prototype, \"interactive\", {\n        get: function () {\n            return !!this.options.interactive;\n        },\n        /**\n         * Input for the interactive state.\n         * Use it with `<yaga-polyline [interactive]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#polyline-interactive Original Leaflet documentation\n         */\n        set: function (val) {\n            var map = this._map;\n            this.options.interactive = val;\n            this.onRemove(map);\n            this.onAdd(map);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PolylineDirective.prototype, \"smoothFactor\", {\n        get: function () {\n            return this.options.smoothFactor;\n        },\n        /**\n         * Input for the smoothFactor.\n         * Use it with `<yaga-polyline [smoothFactor]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#polyline-smoothfactor Original Leaflet documentation\n         */\n        set: function (val) {\n            this.options.smoothFactor = val;\n            this.redraw();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PolylineDirective.prototype, \"noClip\", {\n        get: function () {\n            return !!this.options.noClip;\n        },\n        /**\n         * Input for the noClip state.\n         * Use it with `<yaga-polyline [noClip]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#polyline-noclip Original Leaflet documentation\n         */\n        set: function (val) {\n            this.options.noClip = val;\n            this.redraw();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PolylineDirective.prototype, \"properties\", {\n        get: function () {\n            return this.feature.properties;\n        },\n        /**\n         * Input for the GeoJSON properties.\n         * Use it with `<yaga-polyline [properties]=\"someValue\">`\n         */\n        set: function (val) {\n            this.feature.properties = val;\n            this.geoJSONChange.emit(this.geoJSON);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], PolylineDirective.prototype, \"displayChange\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], PolylineDirective.prototype, \"strokeChange\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], PolylineDirective.prototype, \"colorChange\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], PolylineDirective.prototype, \"weightChange\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], PolylineDirective.prototype, \"opacityChange\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], PolylineDirective.prototype, \"lineCapChange\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], PolylineDirective.prototype, \"lineJoinChange\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], PolylineDirective.prototype, \"dashArrayChange\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], PolylineDirective.prototype, \"dashOffsetChange\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], PolylineDirective.prototype, \"fillChange\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], PolylineDirective.prototype, \"fillColorChange\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], PolylineDirective.prototype, \"fillOpacityChange\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], PolylineDirective.prototype, \"fillRuleChange\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], PolylineDirective.prototype, \"classNameChange\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], PolylineDirective.prototype, \"styleChange\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], PolylineDirective.prototype, \"latLngsChange\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], PolylineDirective.prototype, \"geoJSONChange\", void 0);\n    __decorate([\n        core_1.Output(\"add\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], PolylineDirective.prototype, \"addEvent\", void 0);\n    __decorate([\n        core_1.Output(\"remove\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], PolylineDirective.prototype, \"removeEvent\", void 0);\n    __decorate([\n        core_1.Output(\"popupopen\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], PolylineDirective.prototype, \"popupopenEvent\", void 0);\n    __decorate([\n        core_1.Output(\"popupclose\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], PolylineDirective.prototype, \"popupcloseEvent\", void 0);\n    __decorate([\n        core_1.Output(\"tooltipopen\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], PolylineDirective.prototype, \"tooltipopenEvent\", void 0);\n    __decorate([\n        core_1.Output(\"tooltipclose\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], PolylineDirective.prototype, \"tooltipcloseEvent\", void 0);\n    __decorate([\n        core_1.Output(\"click\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], PolylineDirective.prototype, \"clickEvent\", void 0);\n    __decorate([\n        core_1.Output(\"dblclick\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], PolylineDirective.prototype, \"dblclickEvent\", void 0);\n    __decorate([\n        core_1.Output(\"mousedown\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], PolylineDirective.prototype, \"mousedownEvent\", void 0);\n    __decorate([\n        core_1.Output(\"mouseover\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], PolylineDirective.prototype, \"mouseoverEvent\", void 0);\n    __decorate([\n        core_1.Output(\"mouseout\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], PolylineDirective.prototype, \"mouseoutEvent\", void 0);\n    __decorate([\n        core_1.Output(\"contextmenu\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], PolylineDirective.prototype, \"contextmenuEvent\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Array),\n        __metadata(\"design:paramtypes\", [Array])\n    ], PolylineDirective.prototype, \"latLngs\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], PolylineDirective.prototype, \"geoJSON\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], PolylineDirective.prototype, \"opacity\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean),\n        __metadata(\"design:paramtypes\", [Boolean])\n    ], PolylineDirective.prototype, \"stroke\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], PolylineDirective.prototype, \"color\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], PolylineDirective.prototype, \"weight\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], PolylineDirective.prototype, \"lineCap\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], PolylineDirective.prototype, \"lineJoin\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], PolylineDirective.prototype, \"dashArray\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], PolylineDirective.prototype, \"dashOffset\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean),\n        __metadata(\"design:paramtypes\", [Boolean])\n    ], PolylineDirective.prototype, \"fill\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], PolylineDirective.prototype, \"fillColor\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], PolylineDirective.prototype, \"fillOpacity\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], PolylineDirective.prototype, \"fillRule\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], PolylineDirective.prototype, \"className\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], PolylineDirective.prototype, \"style\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean),\n        __metadata(\"design:paramtypes\", [Boolean])\n    ], PolylineDirective.prototype, \"display\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean),\n        __metadata(\"design:paramtypes\", [Boolean])\n    ], PolylineDirective.prototype, \"interactive\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], PolylineDirective.prototype, \"smoothFactor\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean),\n        __metadata(\"design:paramtypes\", [Boolean])\n    ], PolylineDirective.prototype, \"noClip\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], PolylineDirective.prototype, \"properties\", null);\n    PolylineDirective = __decorate([\n        core_1.Directive({\n            providers: [layer_provider_1.LayerProvider],\n            selector: \"yaga-polyline\",\n        }),\n        __metadata(\"design:paramtypes\", [layer_group_provider_1.LayerGroupProvider,\n            layer_provider_1.LayerProvider])\n    ], PolylineDirective);\n    return PolylineDirective;\n}(leaflet_1.Polyline));\nexports.PolylineDirective = PolylineDirective;\n"]}