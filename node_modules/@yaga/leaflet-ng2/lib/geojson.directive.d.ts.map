{"version":3,"file":"geojson.directive.d.ts","sources":["geojson.directive.d.ts"],"names":[],"mappingssourcesContent":["import { AfterContentInit, EventEmitter, OnDestroy } from \"@angular/core\";\nimport { Feature as GeoJSONFeature, FeatureCollection as GeoJSONFeatureCollection, GeometryObject, Point } from \"geojson\";\nimport { GeoJSON, LatLng, Layer, LeafletEvent, LeafletMouseEvent, PathOptions, PopupEvent, TooltipEvent } from \"leaflet\";\nimport { LayerGroupProvider } from \"./layer-group.provider\";\nimport { LayerProvider } from \"./layer.provider\";\n/**\n * Interface for the styler function of the GeoJSON directive.\n *\n * You can return an individual style (PathOption) for each feature. As basis you get the feature itself and the default\n * style.\n *\n * *Note: This functions is enhanced against the original style function with a default style*\n * @link http://leafletjs.com/reference-1.2.0.html#geojson-style Original Leaflet documentation\n */\nexport declare type IGeoJSONStylerFn<T> = (geoJSON: GeoJSONFeature<GeometryObject, T>, defaultStyle: PathOptions) => PathOptions;\n/**\n * Interface for the filter function of the GeoJSON directive.\n *\n * You can return a boolean value on each feature according if you want to add the feature or not.\n * @link http://leafletjs.com/reference-1.2.0.html#geojson-filter Original Leaflet documentation\n */\nexport declare type IGeoJSONFilterFn<T> = (feature: GeoJSONFeature<GeometryObject, T>) => boolean;\n/**\n * Interface for the point to layer function of the GeoJSON directive.\n *\n * You can return any type of Layer that should represent the feature of type point.\n * @link http://leafletjs.com/reference-1.2.0.html#geojson-pointtolayer Original Leaflet documentation\n */\nexport declare type IGeoJSONPointToLayerFn<T> = (geoJSON: GeoJSONFeature<Point, T>, latLng: LatLng) => Layer;\n/**\n * Interface for the protected middleware property of the GeoJSON directive.\n */\nexport interface IGeoJSONDirectiveMiddlewareDictionary<T> {\n    styler?: IGeoJSONStylerFn<T>;\n    filter?: IGeoJSONFilterFn<T>;\n    pointToLayer?: IGeoJSONPointToLayerFn<T>;\n    defaultStyle?: PathOptions;\n}\n/**\n * Angular2 directive for GeoJSON of Leaflet.\n *\n * *You can use this directive in an Angular2 template after importing `YagaModule`.*\n *\n * How to use in a template:\n * ```html\n * <yaga-map>\n *     <yaga-geojson\n *         [(data)]=\"...\"\n *         [(stroke)]=\"...\"\n *         [(color)]=\"...\"\n *         [(weight)]=\"...\"\n *         [(opacity)]=\"...\"\n *         [(lineCap)]=\"...\"\n *         [(lineJoin)]=\"...\"\n *         [(dashArray)]=\"...\"\n *         [(dashOffset)]=\"...\"\n *         [(fill)]=\"...\"\n *         [(fillColor)]=\"...\"\n *         [(fillOpacity)]=\"...\"\n *         [(fillRule)]=\"...\"\n *         [(className)]=\"...\"\n *         [(lat)]=\"...\"\n *         [(lng)]=\"...\"\n *         [(radius)]=\"...\"\n *\n *         (add)=\"...\"\n *         (remove)=\"...\"\n *         (popupopen)=\"...\"\n *         (popupclose)=\"...\"\n *         (tooltipopen)=\"...\"\n *         (tooltipclose)=\"...\"\n *         (click)=\"...\"\n *         (dblclick)=\"...\"\n *         (mousedown)=\"...\"\n *         (mouseover)=\"...\"\n *         (mouseout)=\"...\"\n *         (contextmenu)=\"...\"\n *         (onEachFeature)=\"...\"\n *\n *         [data]=\"...\"\n *         [filter]=\"...\"\n *         [pointToLayer]=\"...\"\n *         [styler]=\"...\"\n *         [defaultStyle]=\"...\"\n *         >\n *     </yaga-geojson>\n * </yaga-map>\n * ```\n *\n * @link http://leafletjs.com/reference-1.2.0.html#geojson Original Leaflet documentation\n * @link https://leaflet-ng2.yagajs.org/latest/browser-test?grep=GeoJSON%20Directive Unit-Test\n * @link https://leaflet-ng2.yagajs.org/latest/coverage/lcov-report/lib/geojson.directive.js.html\n * Test coverage\n * @link https://leaflet-ng2.yagajs.org/latest/typedoc/classes/geojson.directive.js.html API documentation\n * @example https://leaflet-ng2.yagajs.org/latest/examples/geojson-directive/\n */\nexport declare class GeoJSONDirective<T> extends GeoJSON implements OnDestroy, AfterContentInit {\n    protected parentLayerGroupProvider: LayerGroupProvider;\n    dataChange: EventEmitter<GeoJSONFeatureCollection<GeometryObject, T>>;\n    /**\n     * From leaflet fired add event.\n     * Use it with `<yaga-geojson (add)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#geojson-add Original Leaflet documentation\n     */\n    addEvent: EventEmitter<LeafletEvent>;\n    /**\n     * From leaflet fired remove event.\n     * Use it with `<yaga-geojson (remove)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#geojson-remove Original Leaflet documentation\n     */\n    removeEvent: EventEmitter<LeafletEvent>;\n    /**\n     * From leaflet fired popupopen event.\n     * Use it with `<yaga-geojson (popupopen)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#geojson-popupopen Original Leaflet documentation\n     */\n    popupopenEvent: EventEmitter<PopupEvent>;\n    /**\n     * From leaflet fired popupclose event.\n     * Use it with `<yaga-geojson (popupclose)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#geojson-popupclose Original Leaflet documentation\n     */\n    popupcloseEvent: EventEmitter<PopupEvent>;\n    /**\n     * From leaflet fired tooltipopen event.\n     * Use it with `<yaga-geojson (tooltipopen)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#geojson-tooltipopen Original Leaflet documentation\n     */\n    tooltipopenEvent: EventEmitter<TooltipEvent>;\n    /**\n     * From leaflet fired tooltipclose event.\n     * Use it with `<yaga-geojson (tooltipclose)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#geojson-tooltipclose Original Leaflet documentation\n     */\n    tooltipcloseEvent: EventEmitter<TooltipEvent>;\n    /**\n     * From leaflet fired click event.\n     * Use it with `<yaga-geojson (click)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#geojson-click Original Leaflet documentation\n     */\n    clickEvent: EventEmitter<LeafletMouseEvent>;\n    /**\n     * From leaflet fired dblclick event.\n     * Use it with `<yaga-geojson (dblclick)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#geojson-dblclick Original Leaflet documentation\n     */\n    dblclickEvent: EventEmitter<LeafletMouseEvent>;\n    /**\n     * From leaflet fired mousedown event.\n     * Use it with `<yaga-geojson (mousedown)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#geojson-mousedown Original Leaflet documentation\n     */\n    mousedownEvent: EventEmitter<LeafletMouseEvent>;\n    /**\n     * From leaflet fired mouseover event.\n     * Use it with `<yaga-geojson (mouseover)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#geojson-mouseover Original Leaflet documentation\n     */\n    mouseoverEvent: EventEmitter<LeafletMouseEvent>;\n    /**\n     * From leaflet fired mouseout event.\n     * Use it with `<yaga-geojson (mouseout)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#geojson-mouseout Original Leaflet documentation\n     */\n    mouseoutEvent: EventEmitter<LeafletMouseEvent>;\n    /**\n     * From leaflet fired contextmenu event.\n     * Use it with `<yaga-geojson (contextmenu)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#geojson-contextmenu Original Leaflet documentation\n     */\n    contextmenuEvent: EventEmitter<LeafletMouseEvent>;\n    onEachFeatureEvent: EventEmitter<{\n        feature: GeoJSONFeature<GeometryObject, T>;\n        layer: Layer;\n    }>;\n    /**\n     * Property to prevent changes before directive is initialized\n     */\n    protected initialized: boolean;\n    /**\n     * Object that stores the middleware functions and the default style\n     */\n    protected middleware: IGeoJSONDirectiveMiddlewareDictionary<T>;\n    constructor(parentLayerGroupProvider: LayerGroupProvider, layerGroupProvider: LayerGroupProvider, layerProvider: LayerProvider);\n    /**\n     * Internal method that provides the initialization of the child popup or tooltip\n     */\n    ngAfterContentInit(): void;\n    /**\n     * Internal method to provide the removal of the layer in Leaflet, when removing it from the Angular template\n     */\n    ngOnDestroy(): void;\n    /**\n     * Derived method of the original addData.\n     * @link http://leafletjs.com/reference-1.2.0.html#geojson-adddata Original Leaflet documentation\n     */\n    addData(data: GeoJSONFeature<GeometryObject, T>): Layer;\n    /**\n     * Derived method of the original clearLayers.\n     * @link http://leafletjs.com/reference-1.2.0.html#geojson-clearlayers Original Leaflet documentation\n     */\n    clearLayers(): this;\n    /**\n     * Method to remove all existing data and add the new data in one step.\n     *\n     * *Note: this is a combination of `clearLayers` and `addData`*\n     */\n    setData(val: GeoJSONFeatureCollection<GeometryObject, T>): this;\n    /**\n     * Two-Way bound property for the data geoJSON data.\n     * Use it with `<yaga-geojson [(data)]=\"someValue\">` or `<yaga-geojson [data]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#geojson-l-geojson Original Leaflet documentation\n     */\n    data: GeoJSONFeatureCollection<GeometryObject, T>;\n    /**\n     * Input for the filter function.\n     * Use it with `<yaga-geojson [filter]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#geojson-filter Original Leaflet documentation\n     */\n    filter: IGeoJSONFilterFn<T> | undefined;\n    /**\n     * Input for the pointToLayer function.\n     * Use it with `<yaga-geojson [pointToLayer]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#geojson-pointtolayer Original Leaflet documentation\n     */\n    pointToLayer: IGeoJSONPointToLayerFn<T> | undefined;\n    /**\n     * Input for the styler function.\n     * Use it with `<yaga-geojson [styler]=\"someValue\">`\n     *\n     * *Note: The function can follow the `IGeoJSONStylerFn` interface. It enhances the leaflet ones with the default\n     * style as second parameter*\n     * @link http://leafletjs.com/reference-1.2.0.html#geojson-style Original Leaflet documentation\n     */\n    styler: IGeoJSONStylerFn<T> | undefined;\n    /**\n     * Input for the default style.\n     * Use it with `<yaga-geojson [defaultStyle]=\"someValue\">`\n     *\n     * *Note: Leaflet does not provide a default style, it just provides a style function!*\n     */\n    defaultStyle: PathOptions;\n    /**\n     * Method to apply changes to the geometries\n     */\n    protected redraw(): void;\n}\n"]}