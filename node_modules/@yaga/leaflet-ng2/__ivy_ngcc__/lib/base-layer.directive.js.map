{"version":3,"file":"base-layer.directive.js","sources":["base-layer.directive.js"],"names":[],"mappings":"AAAA;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAIO;AACP;AACA;;;;;;;;;;oBAA2B;AAC3B;AACA;AACA;AACA","sourcesContent":["\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar layer_provider_1 = require(\"./layer.provider\");\nvar layers_control_provider_1 = require(\"./layers-control.provider\");\n/**\n * Angular2 directive for adding layers to the layers-control of Leaflet as base-layer.\n *\n * *You can use this directive in an Angular2 template after importing `YagaModule`.*\n *\n * How to use in a template:\n * ```html\n * <yaga-map>\n *     <yaga-layers-control>\n *         <!-- This can be any other layer... -->\n *         <yaga-tile-layer yaga-base-layer [caption]=\"'OSM'\"></yaga-tile-layer>\n *     </yaga-attribution-control>\n * </yaga-map>\n * ```\n *\n * @link http://leafletjs.com/reference-1.2.0.html#control-layers-addbaselayer Original Leaflet documentation\n * @link https://leaflet-ng2.yagajs.org/latest/browser-test?grep=Base-Layer%20Directive Unit-Test\n * @link https://leaflet-ng2.yagajs.org/latest/coverage/lcov-report/lib/base-layer.directive.js.html\n * Test coverage\n * @link https://leaflet-ng2.yagajs.org/latest/typedoc/classes/baselayerdirective.html API documentation\n * @example https://leaflet-ng2.yagajs.org/latest/examples/layers-control-directive/\n */\nvar BaseLayerDirective = /** @class */ (function () {\n    function BaseLayerDirective(layer, layersControlProvider) {\n        this.layer = layer;\n        this.layersControlProvider = layersControlProvider;\n    }\n    Object.defineProperty(BaseLayerDirective.prototype, \"caption\", {\n        get: function () {\n            for (var _i = 0, _a = this.layersControlProvider.ref._layers; _i < _a.length; _i++) {\n                var layer = _a[_i];\n                if (layer.layer === this.layer.ref) {\n                    return layer.name;\n                }\n            }\n            return \"\";\n        },\n        set: function (value) {\n            this.layersControlProvider.ref.removeLayer(this.layer.ref);\n            this.layersControlProvider.ref.addBaseLayer(this.layer.ref, value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Internal method to provide the removal from the control in Leaflet, when removing it from the Angular template\n     */\n    BaseLayerDirective.prototype.ngOnDestroy = function () {\n        this.layersControlProvider.ref.removeLayer(this.layer.ref);\n    };\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String),\n        __metadata(\"design:paramtypes\", [String])\n    ], BaseLayerDirective.prototype, \"caption\", null);\n    BaseLayerDirective = __decorate([\n        core_1.Directive({\n            selector: \"[yaga-base-layer]\",\n        }),\n        __metadata(\"design:paramtypes\", [layer_provider_1.LayerProvider,\n            layers_control_provider_1.LayersControlProvider])\n    ], BaseLayerDirective);\n    return BaseLayerDirective;\n}());\nexports.BaseLayerDirective = BaseLayerDirective;\n"]}