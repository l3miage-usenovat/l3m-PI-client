{"version":3,"file":"div-icon.directive.js","sources":["div-icon.directive.js"],"names":[],"mappingsmCAIO;AACP;AACA;AACA;;;;;;;;;;;;;;;;;;;;oBAAyB;AACzB;AACA;AACA;AACA","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar leaflet_1 = require(\"leaflet\");\nvar marker_provider_1 = require(\"./marker.provider\");\n/**\n * Angular2 directive for Leaflet div-icons.\n *\n * *You can use this directive in an Angular2 template after importing `YagaModule`.*\n *\n * How to use in a template:\n * ```html\n * <yaga-map>\n *     <yaga-marker>\n *         <yaga-div-icon\n *             [iconAnchor]=\"...\"\n *             [iconSize]=\"...\"\n *             [popupAnchor]=\"...\">\n *             You can paste your HTML content for the icon here!\n *         </yaga-div-icon>\n *     </yaga-marker>\n * </yaga-map>\n * ```\n *\n * Notes:\n *\n * * All div-icon-directives have the css-class `yaga-div-icon`.\n * * The `contentHtml` property is not the child-node in the leaflet div-icon, it is the clone of it and gets cloned\n * again on every change.\n *\n * @link http://leafletjs.com/reference-1.2.0.html#divicon Original Leaflet documentation\n * @link https://leaflet-ng2.yagajs.org/latest/browser-test?grep=DivIcon%20Directive Unit-Test\n * @link https://leaflet-ng2.yagajs.org/latest/coverage/lcov-report/lib/div-icon.directive.js.html Test coverage\n * @link https://leaflet-ng2.yagajs.org/latest/typedoc/classes/divicondirective.html API documentation\n * @example https://leaflet-ng2.yagajs.org/latest/examples/div-icon-directive/\n */\nvar DivIconDirective = /** @class */ (function (_super) {\n    __extends(DivIconDirective, _super);\n    function DivIconDirective(elementRef, markerProvider) {\n        var _this = _super.call(this, {}) || this;\n        _this.markerProvider = markerProvider;\n        /**\n         * This is an EventEmitter used to notify on any change in this object. It is mainly created to provide reactions\n         * of the marker directive on changes.\n         */\n        _this.updateEvent = new core_1.EventEmitter();\n        _this.contentHtml = elementRef.nativeElement;\n        if (typeof MutationObserver === \"function\") {\n            var mutationObserver = new MutationObserver(function () {\n                _this.markerProvider.ref.setIcon(_this);\n                _this.updateEvent.emit({\n                    target: _this,\n                    type: \"update\",\n                });\n            });\n            mutationObserver.observe(_this.contentHtml, {\n                attributes: true,\n                characterData: true,\n                childList: true,\n                subtree: true,\n            });\n        }\n        else {\n            _this.contentHtml.addEventListener(\"DOMSubtreeModified\", function () {\n                _this.markerProvider.ref.setIcon(_this);\n                _this.updateEvent.emit({\n                    target: _this,\n                    type: \"update\",\n                });\n            });\n        }\n        markerProvider.ref.setIcon(_this);\n        return _this;\n    }\n    Object.defineProperty(DivIconDirective.prototype, \"iconSize\", {\n        get: function () {\n            return this.options.iconSize;\n        },\n        /**\n         * Input for the iconSize.\n         * Use it with `<yaga-div-icon [iconSize]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#divicon-iconsize Original Leaflet documentation\n         */\n        set: function (val) {\n            this.options.iconSize = val;\n            this.markerProvider.ref.setIcon(this);\n            this.updateEvent.emit({\n                target: this,\n                type: \"update\",\n            });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DivIconDirective.prototype, \"iconAnchor\", {\n        get: function () {\n            return this.options.iconAnchor;\n        },\n        /**\n         * Input for the iconAnchor.\n         * Use it with `<yaga-div-icon [iconAnchor]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#divicon-iconanchor Original Leaflet documentation\n         */\n        set: function (val) {\n            this.options.iconAnchor = val;\n            this.markerProvider.ref.setIcon(this);\n            this.updateEvent.emit({\n                target: this,\n                type: \"update\",\n            });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DivIconDirective.prototype, \"popupAnchor\", {\n        get: function () {\n            return this.options.popupAnchor;\n        },\n        /**\n         * Input for the popupAnchor.\n         * Use it with `<yaga-div-icon [popupAnchor]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#divicon-popupanchor Original Leaflet documentation\n         */\n        set: function (val) {\n            this.options.popupAnchor = val;\n            this.markerProvider.ref.setIcon(this);\n            this.updateEvent.emit({\n                target: this,\n                type: \"update\",\n            });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * This inherited function enhances the directive with an own css-class and clones the its html content into the\n     * leaflet div icon.\n     */\n    DivIconDirective.prototype.createIcon = function (oldDivIcon) {\n        oldDivIcon = _super.prototype.createIcon.call(this, oldDivIcon);\n        if (oldDivIcon.getAttribute(\"class\") &&\n            oldDivIcon.getAttribute(\"class\").split(\" \").indexOf(\"yaga-div-icon\") === -1) {\n            oldDivIcon.setAttribute(\"class\", oldDivIcon.getAttribute(\"class\") + \" yaga-div-icon\");\n        }\n        oldDivIcon.appendChild(this.contentHtml.cloneNode(true));\n        return oldDivIcon;\n    };\n    __decorate([\n        core_1.Output(\"update\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], DivIconDirective.prototype, \"updateEvent\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", leaflet_1.Point),\n        __metadata(\"design:paramtypes\", [leaflet_1.Point])\n    ], DivIconDirective.prototype, \"iconSize\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", leaflet_1.Point),\n        __metadata(\"design:paramtypes\", [leaflet_1.Point])\n    ], DivIconDirective.prototype, \"iconAnchor\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", leaflet_1.Point),\n        __metadata(\"design:paramtypes\", [leaflet_1.Point])\n    ], DivIconDirective.prototype, \"popupAnchor\", null);\n    DivIconDirective = __decorate([\n        core_1.Directive({\n            selector: \"yaga-div-icon\",\n        }),\n        __param(0, core_1.Inject(core_1.ElementRef)),\n        __metadata(\"design:paramtypes\", [core_1.ElementRef,\n            marker_provider_1.MarkerProvider])\n    ], DivIconDirective);\n    return DivIconDirective;\n}(leaflet_1.DivIcon));\nexports.DivIconDirective = DivIconDirective;\n"]}