{"version":3,"file":"rectangle.directive.d.ts","sources":["rectangle.directive.d.ts"],"names":[],"mappingssourcesContent":["import { AfterContentInit, EventEmitter, OnDestroy } from \"@angular/core\";\nimport { Feature as GeoJSONFeature, Polygon as GeoJSONPolygon } from \"geojson\";\nimport { FillRule, LatLng, LatLngBounds, LatLngBoundsLiteral, LatLngExpression, LatLngTuple, LeafletEvent, LeafletMouseEvent, LineCapShape, LineJoinShape, PathOptions, PolylineOptions, PopupEvent, Rectangle, TooltipEvent } from \"leaflet\";\nimport { LayerGroupProvider } from \"./layer-group.provider\";\nimport { LayerProvider } from \"./layer.provider\";\n/**\n * Angular2 directive for Leaflet rectangles.\n *\n * *You can use this directive in an Angular2 template after importing `YagaModule`.*\n *\n * How to use in a template:\n * ```html\n * <yaga-map>\n *     <yaga-rectangle\n *         [(display)]=\"...\"\n *         [(stroke)]=\"...\"\n *         [(color)]=\"...\"\n *         [(weight)]=\"...\"\n *         [(opacity)]=\"...\"\n *         [(lineCap)]=\"...\"\n *         [(lineJoin)]=\"...\"\n *         [(dashArray)]=\"...\"\n *         [(dashOffset)]=\"...\"\n *         [(fill)]=\"...\"\n *         [(fillColor)]=\"...\"\n *         [(fillOpacity)]=\"...\"\n *         [(fillRule)]=\"...\"\n *         [(renderer)]=\"...\"\n *         [(className)]=\"...\"\n *         [(style)]=\"...\"\n *         [(latLngs)]=\"...\"\n *         [(bounds)]=\"...\"\n *         [(north)]=\"...\"\n *         [(east)]=\"...\"\n *         [(south)]=\"...\"\n *         [(west)]=\"...\"\n *         [(geoJSON)]=\"...\"\n *\n *         (add)=\"...\"\n *         (remove)=\"...\"\n *         (popupopen)=\"...\"\n *         (popupclose)=\"...\"\n *         (tooltipopen)=\"...\"\n *         (tooltipclose)=\"...\"\n *         (click)=\"...\"\n *         (dblclick)=\"...\"\n *         (mousedown)=\"...\"\n *         (mouseover)=\"...\"\n *         (mouseout)=\"...\"\n *         (contextmenu)=\"...\"\n *\n *         [interactive]=\"...\"\n *         [smoothFactor]=\"...\"\n *         [noClip]=\"...\"\n *         [properties]=\"...\"\n *         >\n *     </yaga-rectangle>\n * </yaga-map>\n * ```\n *\n * @link http://leafletjs.com/reference-1.2.0.html#rectangle Original Leaflet documentation\n * @link https://leaflet-ng2.yagajs.org/latest/browser-test?grep=Rectangle%20Directive Unit-Test\n * @link https://leaflet-ng2.yagajs.org/latest/coverage/lcov-report/lib/rectangle.directive.js.html Test coverage\n * @link https://leaflet-ng2.yagajs.org/latest/typedoc/classes/rectangledirective.html API documentation\n * @example https://leaflet-ng2.yagajs.org/latest/examples/rectangle-directive\n */\nexport declare class RectangleDirective<T> extends Rectangle implements OnDestroy, AfterContentInit {\n    protected layerGroupProvider: LayerGroupProvider;\n    /**\n     * Two-Way bound property for the display status of the geometry.\n     * Use it with `<yaga-rectangle [(display)]=\"someValue\">`\n     * or `<yaga-rectangle (displayChange)=\"processEvent($event)\">`\n     */\n    displayChange: EventEmitter<boolean>;\n    /**\n     * Two-Way bound property for the stroke state of the geometry.\n     * Use it with `<yaga-rectangle [(stroke)]=\"someValue\">`\n     * or `<yaga-rectangle (strokeChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#rectangle-stroke Original Leaflet documentation\n     */\n    strokeChange: EventEmitter<boolean>;\n    /**\n     * Two-Way bound property for the line-color of the geometry.\n     * Use it with `<yaga-rectangle [(color)]=\"someValue\">`\n     * or `<yaga-rectangle (colorChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#rectangle-color Original Leaflet documentation\n     */\n    colorChange: EventEmitter<string>;\n    /**\n     * Two-Way bound property for the weight of the geometry.\n     * Use it with `<yaga-rectangle [(weight)]=\"someValue\">`\n     * or `<yaga-rectangle (weightChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#rectangle-weight Original Leaflet documentation\n     */\n    weightChange: EventEmitter<number>;\n    /**\n     * Two-Way bound property for the opacity of the geometry.\n     * Use it with `<yaga-rectangle [(opacity)]=\"someValue\">`\n     * or `<yaga-rectangle (opacityChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#rectangle-opacity Original Leaflet documentation\n     */\n    opacityChange: EventEmitter<number>;\n    /**\n     * Two-Way bound property for the lineCap of the geometry.\n     * Use it with `<yaga-rectangle [(lineCap)]=\"someValue\">`\n     * or `<yaga-rectangle (lineCapChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#rectangle-linecap Original Leaflet documentation\n     */\n    lineCapChange: EventEmitter<string>;\n    /**\n     * Two-Way bound property for the lineJoin of the geometry.\n     * Use it with `<yaga-rectangle [(lineJoin)]=\"someValue\">`\n     * or `<yaga-rectangle (lineJoinChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#rectangle-linejoin Original Leaflet documentation\n     */\n    lineJoinChange: EventEmitter<string>;\n    /**\n     * Two-Way bound property for the dashArray of the geometry.\n     * Use it with `<yaga-rectangle [(dashArray)]=\"someValue\">`\n     * or `<yaga-rectangle (dashArrayChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#rectangle-dasharray Original Leaflet documentation\n     */\n    dashArrayChange: EventEmitter<string>;\n    /**\n     * Two-Way bound property for the dashOffset of the geometry.\n     * Use it with `<yaga-rectangle [(dashOffset)]=\"someValue\">`\n     * or `<yaga-rectangle (dashOffsetChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#rectangle-dashoffset Original Leaflet documentation\n     */\n    dashOffsetChange: EventEmitter<string>;\n    /**\n     * Two-Way bound property for the fill state of the geometry.\n     * Use it with `<yaga-rectangle [(fill)]=\"someValue\">`\n     * or `<yaga-rectangle (fillChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#rectangle-fill Original Leaflet documentation\n     */\n    fillChange: EventEmitter<boolean>;\n    /**\n     * Two-Way bound property for the fill-color of the geometry.\n     * Use it with `<yaga-rectangle [(fillColor)]=\"someValue\">`\n     * or `<yaga-rectangle (fillColorChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#rectangle-fillcolor Original Leaflet documentation\n     */\n    fillColorChange: EventEmitter<string>;\n    /**\n     * Two-Way bound property for the fill-opacity of the geometry.\n     * Use it with `<yaga-rectangle [(fillOpacity)]=\"someValue\">`\n     * or `<yaga-rectangle (fillOpacityChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#rectangle-fillopacity Original Leaflet documentation\n     */\n    fillOpacityChange: EventEmitter<number>;\n    /**\n     * Two-Way bound property for the fill-rule of the geometry.\n     * Use it with `<yaga-rectangle [(fillRule)]=\"someValue\">`\n     * or `<yaga-rectangle (fillRuleChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#rectangle-fillrule Original Leaflet documentation\n     */\n    fillRuleChange: EventEmitter<string>;\n    /**\n     * Two-Way bound property for the className of the geometry.\n     * Use it with `<yaga-rectangle [(className)]=\"someValue\">`\n     * or `<yaga-rectangle (classNameChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#rectangle-classname Original Leaflet documentation\n     */\n    classNameChange: EventEmitter<string>;\n    /**\n     * Two-Way bound property for the css-style of the geometry.\n     * Use it with `<yaga-rectangle [(style)]=\"someValue\">`\n     * or `<yaga-rectangle (styleChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#rectangle-setstyle Original Leaflet documentation\n     */\n    styleChange: EventEmitter<PathOptions>;\n    /**\n     * Two-Way bound property for the array of LatLngs of the geometry.\n     * Use it with `<yaga-rectangle [(latLngs)]=\"someValue\">`\n     * or `<yaga-rectangle (latLngsChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.3.0.html#rectangle-setlatlngs Original Leaflet documentation\n     */\n    latLngsChange: EventEmitter<LatLng[]>;\n    /**\n     * Two-Way bound property for the bounds of the rectangle.\n     * Use it with `<yaga-rectangle [(bounds)]=\"someValue\">`\n     * or `<yaga-rectangle (boundsChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.3.0.html#rectangle-setbounds Original Leaflet documentation\n     */\n    boundsChange: EventEmitter<LatLngBounds>;\n    /**\n     * Two-Way bound property for the north of the bounds of the rectangle.\n     * Use it with `<yaga-rectangle [(north)]=\"someValue\">`\n     * or `<yaga-rectangle (northChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.3.0.html#rectangle-setbounds Original Leaflet documentation\n     */\n    northChange: EventEmitter<number>;\n    /**\n     * Two-Way bound property for the east of the bounds of the rectangle.\n     * Use it with `<yaga-rectangle [(east)]=\"someValue\">`\n     * or `<yaga-rectangle (eastChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.3.0.html#rectangle-setbounds Original Leaflet documentation\n     */\n    eastChange: EventEmitter<number>;\n    /**\n     * Two-Way bound property for the south of the bounds of the rectangle.\n     * Use it with `<yaga-rectangle [(south)]=\"someValue\">`\n     * or `<yaga-rectangle (southChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.3.0.html#rectangle-setbounds Original Leaflet documentation\n     */\n    southChange: EventEmitter<number>;\n    /**\n     * Two-Way bound property for the west of the bounds of the rectangle.\n     * Use it with `<yaga-rectangle [(west)]=\"someValue\">`\n     * or `<yaga-rectangle (westChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.3.0.html#rectangle-setbounds Original Leaflet documentation\n     */\n    westChange: EventEmitter<number>;\n    /**\n     * Two-Way bound property for the corresponding GeoJSON.\n     * Use it with `<yaga-rectangle [(geoJSON)]=\"someValue\">`\n     * or `<yaga-rectangle (geoJSONChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.3.0.html#rectangle-togeojson Original Leaflet documentation\n     */\n    geoJSONChange: EventEmitter<GeoJSONFeature<GeoJSON.Polygon | GeoJSON.MultiPolygon, T>>;\n    /**\n     * From leaflet fired add event.\n     * Use it with `<yaga-rectangle (add)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#rectangle-add Original Leaflet documentation\n     */\n    addEvent: EventEmitter<LeafletEvent>;\n    /**\n     * From leaflet fired remove event.\n     * Use it with `<yaga-rectangle (remove)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#rectangle-remove Original Leaflet documentation\n     */\n    removeEvent: EventEmitter<LeafletEvent>;\n    /**\n     * From leaflet fired popupopen event.\n     * Use it with `<yaga-rectangle (popupopen)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#rectangle-popupopen Original Leaflet documentation\n     */\n    popupopenEvent: EventEmitter<PopupEvent>;\n    /**\n     * From leaflet fired popupclose event.\n     * Use it with `<yaga-rectangle (popupclose)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#rectangle-popupclose Original Leaflet documentation\n     */\n    popupcloseEvent: EventEmitter<PopupEvent>;\n    /**\n     * From leaflet fired tooltipopen event.\n     * Use it with `<yaga-rectangle (tooltipopen)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#rectangle-tooltipopen Original Leaflet documentation\n     */\n    tooltipopenEvent: EventEmitter<TooltipEvent>;\n    /**\n     * From leaflet fired tooltipclose event.\n     * Use it with `<yaga-rectangle (tooltipclose)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#rectangle-tooltipclose Original Leaflet documentation\n     */\n    tooltipcloseEvent: EventEmitter<TooltipEvent>;\n    /**\n     * From leaflet fired click event.\n     * Use it with `<yaga-rectangle (click)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#rectangle-click Original Leaflet documentation\n     */\n    clickEvent: EventEmitter<LeafletMouseEvent>;\n    /**\n     * From leaflet fired dblclick event.\n     * Use it with `<yaga-rectangle (dblclick)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#rectangle-dblclick Original Leaflet documentation\n     */\n    dblclickEvent: EventEmitter<LeafletMouseEvent>;\n    /**\n     * From leaflet fired mousedown event.\n     * Use it with `<yaga-rectangle (mousedown)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#rectangle-mousedown Original Leaflet documentation\n     */\n    mousedownEvent: EventEmitter<LeafletMouseEvent>;\n    /**\n     * From leaflet fired mouseover event.\n     * Use it with `<yaga-rectangle (mouseover)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#rectangle-mouseover Original Leaflet documentation\n     */\n    mouseoverEvent: EventEmitter<LeafletMouseEvent>;\n    /**\n     * From leaflet fired mouseout event.\n     * Use it with `<yaga-rectangle (mouseout)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#rectangle-mouseout Original Leaflet documentation\n     */\n    mouseoutEvent: EventEmitter<LeafletMouseEvent>;\n    /**\n     * From leaflet fired contextmenu event.\n     * Use it with `<yaga-rectangle (contextmenu)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#rectangle-contextmenu Original Leaflet documentation\n     */\n    contextmenuEvent: EventEmitter<LeafletMouseEvent>;\n    feature: GeoJSONFeature<GeoJSONPolygon>;\n    private initialized;\n    constructor(layerGroupProvider: LayerGroupProvider, layerProvider: LayerProvider);\n    /**\n     * Internal method that provides the initialization of the child popup or tooltip\n     */\n    ngAfterContentInit(): void;\n    /**\n     * Internal method to provide the removal of the layer in Leaflet, when removing it from the Angular template\n     */\n    ngOnDestroy(): void;\n    /**\n     * Derived method of the original setBounds.\n     * @link http://leafletjs.com/reference-1.2.0.html#rectangle-setbounds Original Leaflet documentation\n     */\n    setBounds(val: LatLngBounds | LatLngBoundsLiteral): this;\n    /**\n     * Two-Way bound property for the bounds.\n     * Use it with `<yaga-rectangle [(bounds)]=\"someValue\">` or `<yaga-rectangle [bounds]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#rectangle-setbounds Original Leaflet documentation\n     */\n    bounds: LatLngBounds;\n    /**\n     * Two-Way bound property for the north of the bounds.\n     * Use it with `<yaga-rectangle [(north)]=\"someValue\">` or `<yaga-rectangle [north]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#rectangle-setbounds Original Leaflet documentation\n     */\n    north: number;\n    /**\n     * Two-Way bound property for the east of the bounds.\n     * Use it with `<yaga-rectangle [(east)]=\"someValue\">` or `<yaga-rectangle [east]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#rectangle-setbounds Original Leaflet documentation\n     */\n    east: number;\n    /**\n     * Two-Way bound property for the south of the bounds.\n     * Use it with `<yaga-rectangle [(south)]=\"someValue\">` or `<yaga-rectangle [south]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#rectangle-setbounds Original Leaflet documentation\n     */\n    south: number;\n    /**\n     * Two-Way bound property for the west of the bounds.\n     * Use it with `<yaga-rectangle [(west)]=\"someValue\">` or `<yaga-rectangle [west]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#rectangle-setbounds Original Leaflet documentation\n     */\n    west: number;\n    /**\n     * Derived method fof the original LatLngs.\n     * @link http://leafletjs.com/reference-1.2.0.html#rectangle-addlatlngs Original Leaflet documentation\n     */\n    setLatLngs(val: (Array<(LatLng | LatLngTuple | LatLngExpression)> | Array<Array<(LatLng | LatLngTuple | LatLngExpression)>> | Array<Array<Array<(LatLng | LatLngTuple | LatLngExpression)>>>)): this;\n    /**\n     * Derived method of the original addLatLng.\n     * @link http://leafletjs.com/reference-1.2.0.html#rectangle-addlatlngs Original Leaflet documentation\n     */\n    addLatLng(val: (LatLng | LatLngTuple | LatLngExpression) | Array<(LatLng | LatLngTuple | LatLngExpression)>): this;\n    /**\n     * Two-Way bound property for the array of LatLngs for the geometry.\n     * Use it with `<yaga-rectangle [(latLngs)]=\"someValue\">` or `<yaga-rectangle [latLngs]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#rectangle-setbounds Original Leaflet documentation\n     */\n    latLngs: LatLng[] | LatLng[][] | LatLng[][][];\n    /**\n     * Two-Way bound property for the corresponding GeoJSON.\n     * Use it with `<yaga-rectangle [(geoJSON)]=\"someValue\">` or `<yaga-rectangle [geoJSON]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#rectangle-togeojson Original Leaflet documentation\n     */\n    geoJSON: GeoJSONFeature<GeoJSON.Polygon | GeoJSON.MultiPolygon, T>;\n    /**\n     * Derived method of the original setStyle.\n     * @link http://leafletjs.com/reference-1.2.0.html#rectangle-setstyle Original Leaflet documentation\n     */\n    setStyle(style: PathOptions): this;\n    /**\n     * Two-Way bound property for the opacity.\n     * Use it with `<yaga-rectangle [(opacity)]=\"someValue\">` or `<yaga-rectangle [opacity]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#rectangle-opacity Original Leaflet documentation\n     */\n    opacity: number | undefined;\n    /**\n     * Two-Way bound property for the stroke.\n     * Use it with `<yaga-rectangle [(stroke)]=\"someValue\">` or `<yaga-rectangle [stroke]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#rectangle-stroke Original Leaflet documentation\n     */\n    stroke: boolean;\n    /**\n     * Two-Way bound property for the color.\n     * Use it with `<yaga-rectangle [(color)]=\"someValue\">` or `<yaga-rectangle [color]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#rectangle-color Original Leaflet documentation\n     */\n    color: string | undefined;\n    /**\n     * Two-Way bound property for the weight.\n     * Use it with `<yaga-rectangle [(weight)]=\"someValue\">` or `<yaga-rectangle [weight]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#rectangle-weight Original Leaflet documentation\n     */\n    weight: number | undefined;\n    /**\n     * Two-Way bound property for the lineCap.\n     * Use it with `<yaga-rectangle [(lineCap)]=\"someValue\">` or `<yaga-rectangle [lineCap]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#rectangle-linecap Original Leaflet documentation\n     */\n    lineCap: LineCapShape | undefined;\n    /**\n     * Two-Way bound property for the lineJoin.\n     * Use it with `<yaga-rectangle [(lineJoin)]=\"someValue\">` or `<yaga-rectangle [lineJoin]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#rectangle-linejoin Original Leaflet documentation\n     */\n    lineJoin: LineJoinShape | undefined;\n    /**\n     * Two-Way bound property for the dashArray.\n     * Use it with `<yaga-rectangle [(dashArray)]=\"someValue\">` or `<yaga-rectangle [dashArray]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#rectangle-dasharray Original Leaflet documentation\n     */\n    dashArray: string | undefined;\n    /**\n     * Two-Way bound property for the dashOffset.\n     * Use it with `<yaga-rectangle [(dashOffset)]=\"someValue\">` or `<yaga-rectangle [dashOffset]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#rectangle-dashoffset Original Leaflet documentation\n     */\n    dashOffset: string | undefined;\n    /**\n     * Two-Way bound property for the fill.\n     * Use it with `<yaga-rectangle [(fill)]=\"someValue\">` or `<yaga-rectangle [fill]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#rectangle-fill Original Leaflet documentation\n     */\n    fill: boolean;\n    /**\n     * Two-Way bound property for the fillColor.\n     * Use it with `<yaga-rectangle [(fillColor)]=\"someValue\">` or `<yaga-rectangle [fillColor]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#rectangle-fillcolor Original Leaflet documentation\n     */\n    fillColor: string | undefined;\n    /**\n     * Two-Way bound property for the fillOpacity.\n     * Use it with `<yaga-rectangle [(fillOpacity)]=\"someValue\">` or `<yaga-rectangle [fillOpacity]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#rectangle-fillopacity Original Leaflet documentation\n     */\n    fillOpacity: number | undefined;\n    /**\n     * Two-Way bound property for the fillRule.\n     * Use it with `<yaga-rectangle [(fillRule)]=\"someValue\">` or `<yaga-rectangle [fillRule]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#rectangle-fillrule Original Leaflet documentation\n     */\n    fillRule: FillRule | undefined;\n    /**\n     * Two-Way bound property for the className.\n     * Use it with `<yaga-rectangle [(className)]=\"someValue\">` or `<yaga-rectangle [className]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#rectangle-classname Original Leaflet documentation\n     */\n    className: string | undefined;\n    /**\n     * Two-Way bound property for the opacity.\n     * Use it with `<yaga-rectangle [(style)]=\"someValue\">` or `<yaga-rectangle [style]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#rectangle-style Original Leaflet documentation\n     */\n    style: PolylineOptions;\n    /**\n     * Two-Way bound property for the display state.\n     * Use it with `<yaga-rectangle [(display)]=\"someValue\">` or `<yaga-rectangle [display]=\"someValue\">`\n     */\n    display: boolean;\n    /**\n     * Input for the interactive state.\n     * Use it with `<yaga-rectangle [interactive]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#rectangle-interactive Original Leaflet documentation\n     */\n    interactive: boolean;\n    /**\n     * Input for the smoothFactor.\n     * Use it with `<yaga-rectangle [smoothFactor]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#rectangle-smoothfactor Original Leaflet documentation\n     */\n    smoothFactor: number | undefined;\n    /**\n     * Input for the noClip state.\n     * Use it with `<yaga-rectangle [noClip]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#rectangle-noclip Original Leaflet documentation\n     */\n    noClip: boolean;\n    /**\n     * Input for the GeoJSON properties.\n     * Use it with `<yaga-rectangle [properties]=\"someValue\">`\n     */\n    properties: T;\n}\n"]}