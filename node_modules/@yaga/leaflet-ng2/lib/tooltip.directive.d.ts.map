{"version":3,"file":"tooltip.directive.d.ts","sources":["tooltip.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, EventEmitter, OnDestroy } from \"@angular/core\";\nimport { Content, Direction, LatLng, LatLngExpression, LeafletEvent, Point, Tooltip } from \"leaflet\";\nimport { LayerProvider } from \"./layer.provider\";\n/**\n * Angular2 directive for Leaflet tooltips.\n *\n * *You can use this directive in an Angular2 template after importing `YagaModule`.*\n *\n * How to use in a template:\n * ```html\n * <yaga-map>\n *     <yaga-marker>\n *         <yaga-tooltip\n *             [(content)]=\"...\"\n *             [(opened)]=\"...\"\n *             [(lat)]=\"...\"\n *             [(lng)]=\"...\"\n *             [(position)]=\"...\"\n *             [(opacity)]=\"...\"\n *\n *             (open)=\"...\"\n *             (close)=\"...\"\n *\n *             [className]=\"...\"\n *             [pane]=\"...\"\n *             [interactive]=\"...\"\n *             [sticky]=\"...\"\n *             [direction]=\"...\"\n *             [permanent]=\"...\"\n *             [offset]=\"...\"\n *             >\n *             <p>You can pass your content right here!</p>\n *         </yaga-tooltip>\n *     </yaga-marker>\n * </yaga-map>\n * ```\n */\nexport declare class TooltipDirective extends Tooltip implements OnDestroy {\n    protected layerProvider: LayerProvider;\n    /**\n     * Two-Way bound property for the content of a tooltip.\n     * Use it with `<yaga-tooltip [(content)]=\"someValue\">` or `<yaga-tooltip (contentChange)=\"processEvent($event)\">`\n     *\n     * You can also pass the content directly within the web-component as view-content\n     * @link http://leafletjs.com/reference-1.2.0.html#tooltip-setcontent Original Leaflet documentation\n     */\n    contentChange: EventEmitter<Content>;\n    /**\n     * Two-Way bound property for the state of being opened.\n     * Use it with `<yaga-tooltip [(opened)]=\"someValue\">` or `<yaga-tooltip (openedChange)=\"processEvent($event)\">`\n     *\n     * You can also use the `tooltipOpened` property in the parent directives\n     * @link http://leafletjs.com/reference-1.2.0.html#tooltip-openon Original Leaflet documentation\n     */\n    openedChange: EventEmitter<boolean>;\n    /**\n     * Two-Way bound property for the latitude position of the tooltip.\n     * Use it with `<yaga-tooltip [(lat)]=\"someValue\">` or `<yaga-tooltip (latChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#tooltip-setlatlng Original Leaflet documentation\n     */\n    latChange: EventEmitter<number>;\n    /**\n     * Two-Way bound property for the longitude position of the tooltip.\n     * Use it with `<yaga-tooltip [(lng)]=\"someValue\">` or `<yaga-tooltip (lngChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#tooltip-setlatlng Original Leaflet documentation\n     */\n    lngChange: EventEmitter<number>;\n    /**\n     * Two-Way bound property for the position (LatLng) of the tooltip.\n     * Use it with `<yaga-tooltip [(position)]=\"someValue\">` or `<yaga-tooltip (positionChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#tooltip-setlatlng Original Leaflet documentation\n     */\n    positionChange: EventEmitter<LatLng>;\n    /**\n     * Two-Way bound property for the opacity of the tooltip.\n     * Use it with `<yaga-tooltip [(opacity)]=\"someValue\">` or `<yaga-tooltip (opacityChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#tooltip-setlatlng Original Leaflet documentation\n     */\n    opacityChange: EventEmitter<number>;\n    /**\n     * From leaflet fired open event.\n     * Use it with `<yaga-tooltip (open)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#tooltip-tooltipopen Original Leaflet documentation\n     */\n    openEvent: EventEmitter<LeafletEvent>;\n    /**\n     * From leaflet fired close event.\n     * Use it with `<yaga-tooltip (close)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#tooltip-tooltipclose Original Leaflet documentation\n     */\n    closeEvent: EventEmitter<LeafletEvent>;\n    constructor(layerProvider: LayerProvider, elementRef: ElementRef);\n    /**\n     * This function gets called from Angular on destroy of the html-component.\n     * @link https://angular.io/docs/ts/latest/api/core/index/OnDestroy-class.html\n     */\n    ngOnDestroy(): void;\n    /**\n     * Derived method of the original setContent method.\n     * @link http://leafletjs.com/reference-1.2.0.html#tooltip-setcontent Original Leaflet documentation\n     */\n    setContent(content: any): this;\n    /**\n     * Two-Way bound property for the content.\n     * Use it with `<yaga-tooltip [(content)]=\"someValue\">` or `<yaga-tooltip [content]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#tooltip-setcontent Original Leaflet documentation\n     */\n    content: Content;\n    /**\n     * Two-Way bound property for the opened state.\n     * Use it with `<yaga-tooltip [(opened)]=\"someValue\">` or `<yaga-tooltip [opened]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#tooltip-openon Original Leaflet documentation\n     */\n    opened: boolean;\n    /**\n     * Derived method of the original setLatLng method.\n     * @link http://leafletjs.com/reference-1.2.0.html#tooltip-setlatlng Original Leaflet documentation\n     */\n    setLatLng(latlng: LatLngExpression): this;\n    /**\n     * Two-Way bound property for the latitude position of the tooltip.\n     * Use it with `<yaga-tooltip [(lat)]=\"someValue\">` or `<yaga-tooltip [lat]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#tooltip-setlatlng Original Leaflet documentation\n     */\n    lat: number;\n    /**\n     * Two-Way bound property for the longitude position of the tooltip.\n     * Use it with `<yaga-tooltip [(lng)]=\"someValue\">` or `<yaga-tooltip [lng]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#tooltip-setlatlng Original Leaflet documentation\n     */\n    lng: number;\n    /**\n     * Two-Way bound property for the position of the tooltip.\n     * Use it with `<yaga-tooltip [(position)]=\"someValue\">` or `<yaga-tooltip [position]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#tooltip-setlatlng Original Leaflet documentation\n     */\n    position: LatLng;\n    /**\n     * Derived method of the original setContent method.\n     * @link http://leafletjs.com/reference-1.2.0.html#tooltip-setcontent Original Leaflet documentation\n     */\n    setOpacity(val: number): void;\n    /**\n     * Two-Way bound property for the opacity of the tooltip.\n     * Use it with `<yaga-tooltip [(opacity)]=\"someValue\">` or `<yaga-tooltip [opacity]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#tooltip-opacity Original Leaflet documentation\n     */\n    opacity: number | undefined;\n    /**\n     * Input for the CSS class name.\n     * Use it with `<yaga-tooltip [autoClose]=\"className\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#tooltip-classname Original Leaflet documentation\n     */\n    className: string | undefined;\n    /**\n     * Input for the pane.\n     * Use it with `<yaga-tooltip [pane]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#tooltip-pane Original Leaflet documentation\n     */\n    pane: string | undefined;\n    /**\n     * Input for the interactive state.\n     * Use it with `<yaga-tooltip [interactive]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#tooltip-interactive Original Leaflet documentation\n     */\n    interactive: boolean;\n    /**\n     * Input for the sticky.\n     * Use it with `<yaga-tooltip [sticky]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#tooltip-sticky Original Leaflet documentation\n     */\n    sticky: boolean;\n    /**\n     * Input for the direction.\n     * Use it with `<yaga-tooltip [direction]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#tooltip-direction Original Leaflet documentation\n     */\n    direction: Direction | undefined;\n    /**\n     * Input for the permanent state.\n     * Use it with `<yaga-tooltip [permanent]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#tooltip-permanent Original Leaflet documentation\n     */\n    permanent: boolean;\n    /**\n     * Input for the offset.\n     * Use it with `<yaga-tooltip [offset]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#tooltip-offset Original Leaflet documentation\n     */\n    offset: Point | undefined;\n    reopen(force?: boolean): void;\n}\n"]}