{"version":3,"file":"popup.directive.js","sources":["popup.directive.js"],"names":[],"mappingsiCAIO;AACP;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAAuB;AACvB;AACA;AACA;AACA","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar leaflet_1 = require(\"leaflet\");\nvar layer_provider_1 = require(\"./layer.provider\");\n/**\n * Angular2 directive for Leaflet popups.\n *\n * *You can use this directive in an Angular2 template after importing `YagaModule`.*\n *\n * How to use in a template:\n * ```html\n * <yaga-map>\n *     <yaga-marker>\n *         <yaga-popup\n *             [(content)]=\"...\"\n *             [(opened)]=\"...\"\n *             [(lat)]=\"...\"\n *             [(lng)]=\"...\"\n *             [(position)]=\"...\"\n *\n *             (open)=\"...\"\n *             (close)=\"...\"\n *\n *             [maxWidth]=\"...\"\n *             [minWidth]=\"...\"\n *             [maxHeight]=\"...\"\n *             [autoPan]=\"...\"\n *             [autoPanPaddingTopLeft]=\"...\"\n *             [autoPanPaddingBottomRight]=\"...\"\n *             [autoPanPadding]=\"...\"\n *             [keepInView]=\"...\"\n *             [closeButton]=\"...\"\n *             [autoClose]=\"...\"\n *             [className]=\"...\"\n *             [pane]=\"...\"\n *             >\n *             <p>You can pass your content right here!</p>\n *         </yaga-popup>\n *     </yaga-marker>\n * </yaga-map>\n * ```\n */\nvar PopupDirective = /** @class */ (function (_super) {\n    __extends(PopupDirective, _super);\n    function PopupDirective(elementRef, layerProvider) {\n        var _this = _super.call(this) || this;\n        _this.layerProvider = layerProvider;\n        /**\n         * Two-Way bound property for the content of a popup.\n         * Use it with `<yaga-popup [(content)]=\"someValue\">` or `<yaga-popup (contentChange)=\"processEvent($event)\">`\n         *\n         * You can also pass the content directly within the web-component as view-content\n         * @link http://leafletjs.com/reference-1.2.0.html#popup-setcontent Original Leaflet documentation\n         */\n        _this.contentChange = new core_1.EventEmitter();\n        /**\n         * Two-Way bound property for the state of being opened.\n         * Use it with `<yaga-popup [(opened)]=\"someValue\">` or `<yaga-popup (openedChange)=\"processEvent($event)\">`\n         *\n         * You can also use the `popupOpened` property in the parent directives\n         * @link http://leafletjs.com/reference-1.2.0.html#popup-openon Original Leaflet documentation\n         */\n        _this.openedChange = new core_1.EventEmitter();\n        /**\n         * Two-Way bound property for the latitude position of the popup.\n         * Use it with `<yaga-popup [(lat)]=\"someValue\">` or `<yaga-popup (latChange)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#popup-setlatlng Original Leaflet documentation\n         */\n        _this.latChange = new core_1.EventEmitter();\n        /**\n         * Two-Way bound property for the longitude position of the popup.\n         * Use it with `<yaga-popup [(lng)]=\"someValue\">` or `<yaga-popup (lngChange)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#popup-setlatlng Original Leaflet documentation\n         */\n        _this.lngChange = new core_1.EventEmitter();\n        /**\n         * Two-Way bound property for the position (LatLng) of the popup.\n         * Use it with `<yaga-popup [(position)]=\"someValue\">` or `<yaga-popup (positionChange)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#popup-setlatlng Original Leaflet documentation\n         */\n        _this.positionChange = new core_1.EventEmitter();\n        /**\n         * From leaflet fired open event.\n         * Use it with `<yaga-popup (open)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#popup-popupopen Original Leaflet documentation\n         */\n        _this.openEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired close event.\n         * Use it with `<yaga-popup (close)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#popup-popupclose Original Leaflet documentation\n         */\n        _this.closeEvent = new core_1.EventEmitter();\n        _this.setContent(elementRef.nativeElement);\n        _this.on(\"add\", function (event) {\n            _this.openEvent.emit(event);\n            _this.openedChange.emit(true);\n        });\n        _this.on(\"remove\", function (event) {\n            _this.closeEvent.emit(event);\n            _this.openedChange.emit(false);\n        });\n        _this.on(\"popupopen\", function (event) {\n            _this.openEvent.emit(event);\n        });\n        _this.on(\"popuclose\", function (event) {\n            _this.closeEvent.emit(event);\n        });\n        _this.layerProvider.ref.bindPopup(_this);\n        return _this;\n    }\n    PopupDirective.prototype.ngOnDestroy = function () {\n        this.layerProvider.ref.unbindPopup();\n    };\n    /**\n     * Derived method of the original setContent method.\n     * @link http://leafletjs.com/reference-1.2.0.html#popup-setcontent Original Leaflet documentation\n     */\n    PopupDirective.prototype.setContent = function (content) {\n        this.contentChange.emit((content));\n        return _super.prototype.setContent.call(this, content);\n    };\n    Object.defineProperty(PopupDirective.prototype, \"content\", {\n        get: function () {\n            return this.getContent();\n        },\n        /**\n         * Two-Way bound property for the content.\n         * Use it with `<yaga-popup [(content)]=\"someValue\">` or `<yaga-popup [content]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#popup-setcontent Original Leaflet documentation\n         */\n        set: function (val) {\n            this.setContent(val);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PopupDirective.prototype, \"opened\", {\n        get: function () {\n            return !!this._map;\n        },\n        /**\n         * Two-Way bound property for the opened state.\n         * Use it with `<yaga-popup [(opened)]=\"someValue\">` or `<yaga-popup [opened]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#popup-openon Original Leaflet documentation\n         */\n        set: function (val) {\n            if (val) {\n                this.layerProvider.ref.openPopup();\n                return;\n            }\n            this.layerProvider.ref.closePopup();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Derived method of the original setLatLng method.\n     * @link http://leafletjs.com/reference-1.2.0.html#popup-setlatlng Original Leaflet documentation\n     */\n    PopupDirective.prototype.setLatLng = function (latlng) {\n        _super.prototype.setLatLng.call(this, latlng);\n        this.latChange.emit(this.lat);\n        this.lngChange.emit(this.lng);\n        this.positionChange.emit(leaflet_1.latLng(this.lat, this.lng));\n        return this;\n    };\n    Object.defineProperty(PopupDirective.prototype, \"lat\", {\n        get: function () {\n            if (!this.getLatLng()) {\n                return NaN;\n            }\n            return this.getLatLng().lat;\n        },\n        /**\n         * Two-Way bound property for the latitude position of the popup.\n         * Use it with `<yaga-popup [(lat)]=\"someValue\">` or `<yaga-popup [lat]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#popup-setlatlng Original Leaflet documentation\n         */\n        set: function (val) {\n            this.setLatLng([val, this.lng]);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PopupDirective.prototype, \"lng\", {\n        get: function () {\n            if (!this.getLatLng()) {\n                return NaN;\n            }\n            return this.getLatLng().lng;\n        },\n        /**\n         * Two-Way bound property for the longitude position of the popup.\n         * Use it with `<yaga-popup [(lng)]=\"someValue\">` or `<yaga-popup [lng]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#popup-setlatlng Original Leaflet documentation\n         */\n        set: function (val) {\n            this.setLatLng([this.lat, val]);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PopupDirective.prototype, \"position\", {\n        get: function () {\n            if (!this.getLatLng()) {\n                return new leaflet_1.LatLng(NaN, NaN);\n            }\n            return this.getLatLng();\n        },\n        /**\n         * Two-Way bound property for the position of the popup.\n         * Use it with `<yaga-popup [(position)]=\"someValue\">` or `<yaga-popup [position]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#popup-setlatlng Original Leaflet documentation\n         */\n        set: function (val) {\n            this.setLatLng(val);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PopupDirective.prototype, \"maxWidth\", {\n        get: function () {\n            return this.options.maxWidth;\n        },\n        /**\n         * Input for the maxWidth.\n         * Use it with `<yaga-popup [maxWidth]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#popup-maxwidth Original Leaflet documentation\n         */\n        set: function (val) {\n            this.options.maxWidth = val;\n            this.reopen();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PopupDirective.prototype, \"minWidth\", {\n        get: function () {\n            return this.options.minWidth;\n        },\n        /**\n         * Input for the minWidth.\n         * Use it with `<yaga-popup [minWidth]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#popup-minwidth Original Leaflet documentation\n         */\n        set: function (val) {\n            this.options.minWidth = val;\n            this.reopen();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PopupDirective.prototype, \"maxHeight\", {\n        get: function () {\n            return this.options.maxHeight;\n        },\n        /**\n         * Input for the maxHeight.\n         * Use it with `<yaga-popup [maxHeight]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#popup-maxheight Original Leaflet documentation\n         */\n        set: function (val) {\n            this.options.maxHeight = val;\n            this.reopen();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PopupDirective.prototype, \"autoPan\", {\n        get: function () {\n            return !!this.options.autoPan;\n        },\n        /**\n         * Input for the autoPan.\n         * Use it with `<yaga-popup [autoPan]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#popup-autopan Original Leaflet documentation\n         */\n        set: function (val) {\n            this.options.autoPan = val;\n            this.reopen();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PopupDirective.prototype, \"autoPanPaddingTopLeft\", {\n        get: function () {\n            return this.options.autoPanPaddingTopLeft;\n        },\n        /**\n         * Input for the autoPanPaddingTopLeft.\n         * Use it with `<yaga-popup [autoPanPaddingTopLeft]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#popup-autopanpaddingtopleft Original Leaflet documentation\n         */\n        set: function (val) {\n            this.options.autoPanPaddingTopLeft = val;\n            this.reopen();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PopupDirective.prototype, \"autoPanPaddingBottomRight\", {\n        get: function () {\n            return this.options.autoPanPaddingBottomRight;\n        },\n        /**\n         * Input for the autoPanPaddingBottomRight.\n         * Use it with `<yaga-popup [autoPanPaddingBottomRight]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#popup-autopanpaddingbottomleft Original Leaflet documentation\n         */\n        set: function (val) {\n            this.options.autoPanPaddingBottomRight = val;\n            this.reopen();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PopupDirective.prototype, \"autoPanPadding\", {\n        get: function () {\n            return this.options.autoPanPadding;\n        },\n        /**\n         * Input for the autoPanPadding.\n         * Use it with `<yaga-popup [autoPanPadding]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#popup-autopanpadding Original Leaflet documentation\n         */\n        set: function (val) {\n            this.options.autoPanPadding = val;\n            this.reopen();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PopupDirective.prototype, \"keepInView\", {\n        get: function () {\n            return !!this.options.keepInView;\n        },\n        /**\n         * Input for the keyInView.\n         * Use it with `<yaga-popup [keyInView]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#popup-keyinview Original Leaflet documentation\n         */\n        set: function (val) {\n            this.options.keepInView = val;\n            this.reopen();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PopupDirective.prototype, \"closeButton\", {\n        get: function () {\n            return !!this.options.closeButton;\n        },\n        /**\n         * Input for the closeButton.\n         * Use it with `<yaga-popup [closeButton]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#popup-closebutton Original Leaflet documentation\n         */\n        set: function (val) {\n            this.options.closeButton = val;\n            this.reopen();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PopupDirective.prototype, \"autoClose\", {\n        get: function () {\n            return !!this.options.autoClose;\n        },\n        /**\n         * Input for the autoClose.\n         * Use it with `<yaga-popup [autoClose]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#popup-autoclose Original Leaflet documentation\n         */\n        set: function (val) {\n            this.options.autoClose = val;\n            this.reopen();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PopupDirective.prototype, \"className\", {\n        get: function () {\n            return this.options.className;\n        },\n        /**\n         * Input for the CSS class name.\n         * Use it with `<yaga-popup [autoClose]=\"className\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#popup-classname Original Leaflet documentation\n         */\n        set: function (val) {\n            if (!this._container) {\n                this.options.className = val;\n                return;\n            }\n            var oldClassName = this._container.getAttribute(\"class\") || \"\";\n            var newClassNameSplited = oldClassName.split(\" \" + this.options.className + \" \");\n            if (newClassNameSplited.length === 1) {\n                newClassNameSplited.push(\"\");\n            }\n            this._container.setAttribute(\"class\", newClassNameSplited.join(\" \" + val + \" \").trim());\n            this.options.className = val;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PopupDirective.prototype, \"pane\", {\n        get: function () {\n            return this.options.pane;\n        },\n        /**\n         * Input for the pane.\n         * Use it with `<yaga-popup [pane]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#popup-pane Original Leaflet documentation\n         */\n        set: function (val) {\n            this.options.pane = val;\n            this.reopen();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PopupDirective.prototype.reopen = function (force) {\n        if (force === void 0) { force = false; }\n        if (force || this.opened) {\n            this.layerProvider.ref.closePopup();\n            this.layerProvider.ref.openPopup();\n        }\n    };\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], PopupDirective.prototype, \"contentChange\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], PopupDirective.prototype, \"openedChange\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], PopupDirective.prototype, \"latChange\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], PopupDirective.prototype, \"lngChange\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], PopupDirective.prototype, \"positionChange\", void 0);\n    __decorate([\n        core_1.Output(\"open\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], PopupDirective.prototype, \"openEvent\", void 0);\n    __decorate([\n        core_1.Output(\"close\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], PopupDirective.prototype, \"closeEvent\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], PopupDirective.prototype, \"content\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean),\n        __metadata(\"design:paramtypes\", [Boolean])\n    ], PopupDirective.prototype, \"opened\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Number),\n        __metadata(\"design:paramtypes\", [Number])\n    ], PopupDirective.prototype, \"lat\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Number),\n        __metadata(\"design:paramtypes\", [Number])\n    ], PopupDirective.prototype, \"lng\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", leaflet_1.LatLng),\n        __metadata(\"design:paramtypes\", [leaflet_1.LatLng])\n    ], PopupDirective.prototype, \"position\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], PopupDirective.prototype, \"maxWidth\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], PopupDirective.prototype, \"minWidth\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], PopupDirective.prototype, \"maxHeight\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean),\n        __metadata(\"design:paramtypes\", [Boolean])\n    ], PopupDirective.prototype, \"autoPan\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", leaflet_1.Point),\n        __metadata(\"design:paramtypes\", [leaflet_1.Point])\n    ], PopupDirective.prototype, \"autoPanPaddingTopLeft\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", leaflet_1.Point),\n        __metadata(\"design:paramtypes\", [leaflet_1.Point])\n    ], PopupDirective.prototype, \"autoPanPaddingBottomRight\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", leaflet_1.Point),\n        __metadata(\"design:paramtypes\", [leaflet_1.Point])\n    ], PopupDirective.prototype, \"autoPanPadding\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean),\n        __metadata(\"design:paramtypes\", [Boolean])\n    ], PopupDirective.prototype, \"keepInView\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean),\n        __metadata(\"design:paramtypes\", [Boolean])\n    ], PopupDirective.prototype, \"closeButton\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean),\n        __metadata(\"design:paramtypes\", [Boolean])\n    ], PopupDirective.prototype, \"autoClose\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], PopupDirective.prototype, \"className\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], PopupDirective.prototype, \"pane\", null);\n    PopupDirective = __decorate([\n        core_1.Directive({\n            selector: \"yaga-popup\",\n        }),\n        __param(0, core_1.Inject(core_1.ElementRef)),\n        __metadata(\"design:paramtypes\", [core_1.ElementRef,\n            layer_provider_1.LayerProvider])\n    ], PopupDirective);\n    return PopupDirective;\n}(leaflet_1.Popup));\nexports.PopupDirective = PopupDirective;\n"]}