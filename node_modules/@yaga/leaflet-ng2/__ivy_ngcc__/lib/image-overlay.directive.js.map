{"version":3,"file":"image-overlay.directive.js","sources":["image-overlay.directive.js"],"names":[],"mappingswCAKO;AACP;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAA8B;AAC9B;AACA;AACA;AACA","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar leaflet_1 = require(\"leaflet\");\nvar consts_1 = require(\"./consts\");\nvar layer_group_provider_1 = require(\"./layer-group.provider\");\nvar layer_provider_1 = require(\"./layer.provider\");\n/**\n * Angular2 directive for Leaflet image overlays.\n *\n * *You can use this directive in an Angular2 template after importing `YagaModule`.*\n *\n * How to use in a template:\n * ```html\n * <yaga-map>\n *     <yaga-image-overlay\n *         [(url)]=\"...\"\n *         [(display)]=\"...\"\n *         [(opacity)]=\"...\"\n *         [(zIndex)]=\"...\"\n *         [(bounds)]=\"...\"\n *         [(north)]=\"...\"\n *         [(east)]=\"...\"\n *         [(south)]=\"...\"\n *         [(west)]=\"...\"\n *\n *         (add)=\"...\"\n *         (remove)=\"...\"\n *         (popupopen)=\"...\"\n *         (popupclose)=\"...\"\n *         (tooltipopen)=\"...\"\n *         (tooltipclose)=\"...\"\n *         (click)=\"...\"\n *         (dblclick)=\"...\"\n *         (mousedown)=\"...\"\n *         (mouseover)=\"...\"\n *         (mouseout)=\"...\"\n *         (contextmenu)=\"...\"\n *         (load)=\"...\"\n *         (error)=\"...\"\n *\n *         [crossOrigin]=\"...\"\n *         [alt]=\"...\"\n *         [interactive]=\"...\"\n *         [attribution]=\"...\"\n *         >\n *     </yaga-image-overlay>\n * </yaga-map>\n * ```\n *\n * @link http://leafletjs.com/reference-1.2.0.html#imageoverlay Original Leaflet documentation\n * @link https://leaflet-ng2.yagajs.org/latest/browser-test?grep=Image-Overlay%20Directive Unit-Test\n * @link https://leaflet-ng2.yagajs.org/latest/coverage/lcov-report/lib/image-overlay.directive.js.html Test coverage\n * @link https://leaflet-ng2.yagajs.org/latest/typedoc/classes/imageoverlaydirective.html API documentation\n * @example https://leaflet-ng2.yagajs.org/latest/examples/image-overlay-directive\n */\nvar ImageOverlayDirective = /** @class */ (function (_super) {\n    __extends(ImageOverlayDirective, _super);\n    function ImageOverlayDirective(layerGroupProvider, layerProvider) {\n        var _this = \n        // Transparent 1px image:\n        _super.call(this, consts_1.TRANSPARENT_PIXEL, [[0, 0], [1, 1]], {}) || this;\n        _this.layerGroupProvider = layerGroupProvider;\n        /**\n         * Two-Way bound property for the URL.\n         * Use it with `<yaga-image-overlay [(url)]=\"someValue\">` or\n         * `<yaga-image-overlay (urlChange)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#imageoverlay-seturl Original Leaflet documentation\n         */\n        _this.urlChange = new core_1.EventEmitter();\n        /**\n         * Two-Way bound property for the display status of the layer.\n         * Use it with `<yaga-image-overlay [(display)]=\"someValue\">`\n         * or `<yaga-image-overlay (displayChange)=\"processEvent($event)\">`\n         */\n        _this.displayChange = new core_1.EventEmitter();\n        /**\n         * Two-Way bound property for the opacity of the layer.\n         * Use it with `<yaga-image-overlay [(opacity)]=\"someValue\">`\n         * or `<yaga-image-overlay (opacityChange)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#imageoverlay-opacity Original Leaflet documentation\n         */\n        _this.opacityChange = new core_1.EventEmitter();\n        // maybe implement -> @Output() public zIndexChange: EventEmitter<number> = new EventEmitter();\n        /**\n         * Two-Way bound property for the bounds of the image.\n         * Use it with `<yaga-image-overlay [(bounds)]=\"someValue\">`\n         * or `<yaga-image-overlay (opacityChange)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#imageoverlay-setbounds Original Leaflet documentation\n         */\n        _this.boundsChange = new core_1.EventEmitter();\n        /**\n         * Two-Way bound property for the north bounds of the image.\n         * Use it with `<yaga-image-overlay [(north)]=\"someValue\">`\n         * or `<yaga-image-overlay (northChange)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#imageoverlay-setbounds Original Leaflet documentation\n         */\n        _this.northChange = new core_1.EventEmitter();\n        /**\n         * Two-Way bound property for the east bounds of the image.\n         * Use it with `<yaga-image-overlay [(east)]=\"someValue\">`\n         * or `<yaga-image-overlay (eastChange)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#imageoverlay-setbounds Original Leaflet documentation\n         */\n        _this.eastChange = new core_1.EventEmitter();\n        /**\n         * Two-Way bound property for the south bounds of the image.\n         * Use it with `<yaga-image-overlay [(south)]=\"someValue\">`\n         * or `<yaga-image-overlay (southChange)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#imageoverlay-setbounds Original Leaflet documentation\n         */\n        _this.southChange = new core_1.EventEmitter();\n        /**\n         * Two-Way bound property for the west bounds of the image.\n         * Use it with `<yaga-image-overlay [(west)]=\"someValue\">`\n         * or `<yaga-image-overlay (westChange)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#imageoverlay-setbounds Original Leaflet documentation\n         */\n        _this.westChange = new core_1.EventEmitter();\n        /**\n         * From leaflet fired add event.\n         * Use it with `<yaga-image-overlay (add)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#imageoverlay-add Original Leaflet documentation\n         */\n        _this.addEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired remove event.\n         * Use it with `<yaga-image-overlay (remove)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#imageoverlay-remove Original Leaflet documentation\n         */\n        _this.removeEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired popupopen event.\n         * Use it with `<yaga-image-overlay (popupopen)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#imageoverlay-popupopen Original Leaflet documentation\n         */\n        _this.popupopenEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired popupclose event.\n         * Use it with `<yaga-image-overlay (popupclose)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#imageoverlay-popupclose Original Leaflet documentation\n         */\n        _this.popupcloseEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired tooltipopen event.\n         * Use it with `<yaga-image-overlay (tooltipopen)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#imageoverlay-tooltipopen Original Leaflet documentation\n         */\n        _this.tooltipopenEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired tooltipclose event.\n         * Use it with `<yaga-image-overlay (tooltipclose)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#imageoverlay-tooltipclose Original Leaflet documentation\n         */\n        _this.tooltipcloseEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired click event.\n         * Use it with `<yaga-image-overlay (click)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#imageoverlay-click Original Leaflet documentation\n         */\n        _this.clickEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired dblclick event.\n         * Use it with `<yaga-image-overlay (dblclick)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#imageoverlay-dblclick Original Leaflet documentation\n         */\n        _this.dblclickEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired mousedown event.\n         * Use it with `<yaga-image-overlay (mousedown)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#imageoverlay-mousedown Original Leaflet documentation\n         */\n        _this.mousedownEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired mouseover event.\n         * Use it with `<yaga-image-overlay (mouseover)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#imageoverlay-mouseover Original Leaflet documentation\n         */\n        _this.mouseoverEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired mouseout event.\n         * Use it with `<yaga-image-overlay (mouseout)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#imageoverlay-mouseout Original Leaflet documentation\n         */\n        _this.mouseoutEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired contextmenu event.\n         * Use it with `<yaga-image-overlay (contextmenu)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#imageoverlay-contextmenu Original Leaflet documentation\n         */\n        _this.contextmenuEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired load event.\n         * Use it with `<yaga-image-overlay (load)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#imageoverlay-load Original Leaflet documentation\n         */\n        _this.loadEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired error event.\n         * Use it with `<yaga-image-overlay (error)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#imageoverlay-error Original Leaflet documentation\n         */\n        _this.errorEvent = new core_1.EventEmitter();\n        layerProvider.ref = _this;\n        _this.on(\"remove\", function () {\n            _this.displayChange.emit(false);\n        });\n        _this.on(\"add\", function () {\n            _this.displayChange.emit(true);\n        });\n        _this.layerGroupProvider.ref.addLayer(_this);\n        // Events\n        _this.on(\"add\", function (event) {\n            _this.addEvent.emit(event);\n        });\n        _this.on(\"remove\", function (event) {\n            _this.removeEvent.emit(event);\n        });\n        _this.on(\"popupopen\", function (event) {\n            _this.popupopenEvent.emit(event);\n        });\n        _this.on(\"popupclose\", function (event) {\n            _this.popupcloseEvent.emit(event);\n        });\n        _this.on(\"tooltipopen\", function (event) {\n            _this.tooltipopenEvent.emit(event);\n        });\n        _this.on(\"tooltipclose\", function (event) {\n            _this.tooltipcloseEvent.emit(event);\n        });\n        _this.on(\"click\", function (event) {\n            _this.clickEvent.emit(event);\n        });\n        _this.on(\"dblclick\", function (event) {\n            _this.dblclickEvent.emit(event);\n        });\n        _this.on(\"mousedown\", function (event) {\n            _this.mousedownEvent.emit(event);\n        });\n        _this.on(\"mouseover\", function (event) {\n            _this.mouseoverEvent.emit(event);\n        });\n        _this.on(\"mouseout\", function (event) {\n            _this.mouseoutEvent.emit(event);\n        });\n        _this.on(\"contextmenu\", function (event) {\n            _this.contextmenuEvent.emit(event);\n        });\n        _this.on(\"load\", function (event) {\n            _this.loadEvent.emit(event);\n        });\n        _this.on(\"error\", function (event) {\n            _this.errorEvent.emit(event);\n        });\n        return _this;\n    }\n    /**\n     * This function gets called from Angular on destroy of the html-component.\n     * @link https://angular.io/docs/ts/latest/api/core/index/OnDestroy-class.html\n     */\n    ImageOverlayDirective.prototype.ngOnDestroy = function () {\n        this.removeFrom(this.layerGroupProvider.ref);\n    };\n    /**\n     * Derived method of the original setUrl method.\n     * @link http://leafletjs.com/reference-1.2.0.html#imageoverlay-seturl Original Leaflet documentation\n     */\n    ImageOverlayDirective.prototype.setUrl = function (url) {\n        if (this.url === url) {\n            return this;\n        }\n        this.urlChange.emit(url);\n        return _super.prototype.setUrl.call(this, url);\n    };\n    Object.defineProperty(ImageOverlayDirective.prototype, \"url\", {\n        get: function () {\n            return this._url;\n        },\n        /**\n         * Two-Way bound property for the URL.\n         * Use it with `<yaga-image-overlay [(url)]=\"someValue\">` or `<yaga-image-overlay [url]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#imageoverlay-seturl Original Leaflet documentation\n         */\n        set: function (val) {\n            this.setUrl(val);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Derived method of the original setOpacity method.\n     * @link http://leafletjs.com/reference-1.2.0.html#imageoverlay-setopacity Original Leaflet documentation\n     */\n    ImageOverlayDirective.prototype.setOpacity = function (val) {\n        if (this.opacity === val) {\n            return this;\n        }\n        this.opacityChange.emit(val);\n        return _super.prototype.setOpacity.call(this, val);\n    };\n    Object.defineProperty(ImageOverlayDirective.prototype, \"opacity\", {\n        get: function () {\n            if (this.options.hasOwnProperty(\"opacity\") && this.options.opacity !== undefined) {\n                return this.options.opacity;\n            }\n            return 1;\n        },\n        /**\n         * Two-Way bound property for the opacity.\n         * Use it with `<yaga-image-overlay [(opacity)]=\"someValue\">` or `<yaga-image-overlay [opacity]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#imageoverlay-setopacity Original Leaflet documentation\n         */\n        set: function (val) {\n            this.setOpacity(val);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ImageOverlayDirective.prototype, \"display\", {\n        /**\n         * Two-Way bound property for the display status of the layer.\n         * Use it with `<yaga-image-overlay [(display)]=\"someValue\">` or `<yaga-image-overlay [display]=\"someValue\">`\n         */\n        get: function () {\n            var pane;\n            var container;\n            try {\n                pane = this.getPane();\n                container = this.getElement();\n            }\n            catch (err) {\n                /* istanbul ignore next */\n                return false;\n            }\n            /* tslint:disable:prefer-for-of */\n            for (var i = 0; i < pane.children.length; i += 1) {\n                /* tslint:enable */\n                /* istanbul ignore else */\n                if (pane.children[i] === container) {\n                    return true;\n                }\n            }\n            return false;\n        },\n        /**\n         * Two-Way bound property for the display status of the layer.\n         * Use it with `<yaga-image-overlay [(display)]=\"someValue\">` or `<yaga-image-overlay [display]=\"someValue\">`\n         */\n        set: function (val) {\n            var isDisplayed = this.display;\n            if (isDisplayed === val) {\n                return;\n            }\n            var pane;\n            var container;\n            var map;\n            var events; // Dictionary of functions\n            var eventKeys;\n            try {\n                pane = this.getPane();\n                container = this.getElement();\n                map = this._map;\n                events = this.getEvents();\n                eventKeys = Object.keys(events);\n            }\n            catch (err) {\n                /* istanbul ignore next */\n                return;\n            }\n            if (val) {\n                // show layer\n                pane.appendChild(container);\n                for (var _i = 0, eventKeys_1 = eventKeys; _i < eventKeys_1.length; _i++) {\n                    var eventKey = eventKeys_1[_i];\n                    map.on(eventKey, events[eventKey], this);\n                }\n            }\n            else {\n                // hide layer\n                pane.removeChild(container);\n                for (var _a = 0, eventKeys_2 = eventKeys; _a < eventKeys_2.length; _a++) {\n                    var eventKey = eventKeys_2[_a];\n                    map.off(eventKey, events[eventKey], this);\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Derived method of the original setBounds method.\n     * @link http://leafletjs.com/reference-1.2.0.html#imageoverlay-setbounds Original Leaflet documentation\n     */\n    ImageOverlayDirective.prototype.setBounds = function (val) {\n        _super.prototype.setBounds.call(this, leaflet_1.latLngBounds(val));\n        this.boundsChange.emit(this.bounds);\n        this.northChange.emit(this.north);\n        this.eastChange.emit(this.east);\n        this.southChange.emit(this.south);\n        this.westChange.emit(this.west);\n        return this;\n    };\n    Object.defineProperty(ImageOverlayDirective.prototype, \"bounds\", {\n        get: function () {\n            return this.getBounds();\n        },\n        /**\n         * Two-Way bound property for the bounds of the image.\n         * Use it with `<yaga-image-overlay [(bounds)]=\"someValue\">` or `<yaga-image-overlay [bounds]=\"someValue\">`\n         */\n        set: function (val) {\n            this.setBounds(val);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ImageOverlayDirective.prototype, \"north\", {\n        get: function () {\n            return this.getBounds().getNorth();\n        },\n        /**\n         * Two-Way bound property for the north bounds of the image.\n         * Use it with `<yaga-image-overlay [(north)]=\"someValue\">` or `<yaga-image-overlay [north]=\"someValue\">`\n         */\n        set: function (val) {\n            var oldBounds = this.getBounds();\n            // super because we call the change listeners ourselves\n            _super.prototype.setBounds.call(this, leaflet_1.latLngBounds([\n                [oldBounds.getSouth(), oldBounds.getWest()],\n                [val, oldBounds.getEast()],\n            ]));\n            this.boundsChange.emit(this.bounds);\n            this.northChange.emit(val);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ImageOverlayDirective.prototype, \"east\", {\n        get: function () {\n            return this.getBounds().getEast();\n        },\n        /**\n         * Two-Way bound property for the east bounds of the image.\n         * Use it with `<yaga-image-overlay [(east)]=\"someValue\">` or `<yaga-image-overlay [east]=\"someValue\">`\n         */\n        set: function (val) {\n            var oldBounds = this.getBounds();\n            _super.prototype.setBounds.call(this, leaflet_1.latLngBounds([\n                [oldBounds.getSouth(), oldBounds.getWest()],\n                [oldBounds.getNorth(), val],\n            ]));\n            this.boundsChange.emit(this.bounds);\n            this.eastChange.emit(val);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ImageOverlayDirective.prototype, \"south\", {\n        get: function () {\n            return this.getBounds().getSouth();\n        },\n        /**\n         * Two-Way bound property for the south bounds of the image.\n         * Use it with `<yaga-image-overlay [(south)]=\"someValue\">` or `<yaga-image-overlay [south]=\"someValue\">`\n         */\n        set: function (val) {\n            var oldBounds = this.getBounds();\n            _super.prototype.setBounds.call(this, leaflet_1.latLngBounds([\n                [val, oldBounds.getWest()],\n                [oldBounds.getNorth(), oldBounds.getEast()],\n            ]));\n            this.boundsChange.emit(this.bounds);\n            this.southChange.emit(val);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ImageOverlayDirective.prototype, \"west\", {\n        get: function () {\n            return this.getBounds().getWest();\n        },\n        /**\n         * Two-Way bound property for the west bounds of the image.\n         * Use it with `<yaga-image-overlay [(west)]=\"someValue\">` or `<yaga-image-overlay [west]=\"someValue\">`\n         */\n        set: function (val) {\n            var oldBounds = this.getBounds();\n            _super.prototype.setBounds.call(this, leaflet_1.latLngBounds([\n                [oldBounds.getSouth(), val],\n                [oldBounds.getNorth(), oldBounds.getEast()],\n            ]));\n            this.boundsChange.emit(this.bounds);\n            this.westChange.emit(val);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ImageOverlayDirective.prototype, \"crossOrigin\", {\n        get: function () {\n            return !!this.options.crossOrigin;\n        },\n        /**\n         * Input for the crossOrigin.\n         * Use it with `<yaga-image-overlay [crossOrigin]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#imageoverlay-crossorigin Original Leaflet documentation\n         */\n        set: function (val) {\n            this.options.crossOrigin = val;\n            this.getElement().crossOrigin = val ? \"\" : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ImageOverlayDirective.prototype, \"alt\", {\n        get: function () {\n            return this.getElement().alt;\n        },\n        /**\n         * Input for the alternative text.\n         * Use it with `<yaga-image-overlay [alt]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#imageoverlay-alt Original Leaflet documentation\n         */\n        set: function (val) {\n            this.options.alt = val;\n            this.getElement().alt = val;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ImageOverlayDirective.prototype, \"interactive\", {\n        get: function () {\n            return !!this.options.interactive;\n        },\n        /**\n         * Input for the state of interaction.\n         * Use it with `<yaga-image-overlay [interactive]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#imageoverlay-interactive Original Leaflet documentation\n         */\n        set: function (val) {\n            this.options.interactive = val;\n            this.onRemove(this._map);\n            this.onAdd(this._map);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ImageOverlayDirective.prototype, \"attribution\", {\n        get: function () {\n            return this.getAttribution() || \"\";\n        },\n        /**\n         * Input for the attribution.\n         * Use it with `<yaga-image-overlay [attribution]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#imageoverlay-attribution Original Leaflet documentation\n         */\n        set: function (val) {\n            if (this._map && this._map.attributionControl) {\n                var oldAttribution = this.getAttribution();\n                if (oldAttribution) {\n                    this._map.attributionControl.removeAttribution(oldAttribution);\n                }\n                this._map.attributionControl.addAttribution(val);\n            }\n            this.options.attribution = val;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], ImageOverlayDirective.prototype, \"urlChange\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], ImageOverlayDirective.prototype, \"displayChange\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], ImageOverlayDirective.prototype, \"opacityChange\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], ImageOverlayDirective.prototype, \"boundsChange\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], ImageOverlayDirective.prototype, \"northChange\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], ImageOverlayDirective.prototype, \"eastChange\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], ImageOverlayDirective.prototype, \"southChange\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], ImageOverlayDirective.prototype, \"westChange\", void 0);\n    __decorate([\n        core_1.Output(\"add\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], ImageOverlayDirective.prototype, \"addEvent\", void 0);\n    __decorate([\n        core_1.Output(\"remove\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], ImageOverlayDirective.prototype, \"removeEvent\", void 0);\n    __decorate([\n        core_1.Output(\"popupopen\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], ImageOverlayDirective.prototype, \"popupopenEvent\", void 0);\n    __decorate([\n        core_1.Output(\"popupclose\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], ImageOverlayDirective.prototype, \"popupcloseEvent\", void 0);\n    __decorate([\n        core_1.Output(\"tooltipopen\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], ImageOverlayDirective.prototype, \"tooltipopenEvent\", void 0);\n    __decorate([\n        core_1.Output(\"tooltipclose\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], ImageOverlayDirective.prototype, \"tooltipcloseEvent\", void 0);\n    __decorate([\n        core_1.Output(\"click\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], ImageOverlayDirective.prototype, \"clickEvent\", void 0);\n    __decorate([\n        core_1.Output(\"dblclick\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], ImageOverlayDirective.prototype, \"dblclickEvent\", void 0);\n    __decorate([\n        core_1.Output(\"mousedown\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], ImageOverlayDirective.prototype, \"mousedownEvent\", void 0);\n    __decorate([\n        core_1.Output(\"mouseover\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], ImageOverlayDirective.prototype, \"mouseoverEvent\", void 0);\n    __decorate([\n        core_1.Output(\"mouseout\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], ImageOverlayDirective.prototype, \"mouseoutEvent\", void 0);\n    __decorate([\n        core_1.Output(\"contextmenu\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], ImageOverlayDirective.prototype, \"contextmenuEvent\", void 0);\n    __decorate([\n        core_1.Output(\"load\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], ImageOverlayDirective.prototype, \"loadEvent\", void 0);\n    __decorate([\n        core_1.Output(\"error\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], ImageOverlayDirective.prototype, \"errorEvent\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String),\n        __metadata(\"design:paramtypes\", [String])\n    ], ImageOverlayDirective.prototype, \"url\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Number),\n        __metadata(\"design:paramtypes\", [Number])\n    ], ImageOverlayDirective.prototype, \"opacity\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean),\n        __metadata(\"design:paramtypes\", [Boolean])\n    ], ImageOverlayDirective.prototype, \"display\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", leaflet_1.LatLngBounds),\n        __metadata(\"design:paramtypes\", [leaflet_1.LatLngBounds])\n    ], ImageOverlayDirective.prototype, \"bounds\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Number),\n        __metadata(\"design:paramtypes\", [Number])\n    ], ImageOverlayDirective.prototype, \"north\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Number),\n        __metadata(\"design:paramtypes\", [Number])\n    ], ImageOverlayDirective.prototype, \"east\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Number),\n        __metadata(\"design:paramtypes\", [Number])\n    ], ImageOverlayDirective.prototype, \"south\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Number),\n        __metadata(\"design:paramtypes\", [Number])\n    ], ImageOverlayDirective.prototype, \"west\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean),\n        __metadata(\"design:paramtypes\", [Boolean])\n    ], ImageOverlayDirective.prototype, \"crossOrigin\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String),\n        __metadata(\"design:paramtypes\", [String])\n    ], ImageOverlayDirective.prototype, \"alt\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean),\n        __metadata(\"design:paramtypes\", [Boolean])\n    ], ImageOverlayDirective.prototype, \"interactive\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String),\n        __metadata(\"design:paramtypes\", [String])\n    ], ImageOverlayDirective.prototype, \"attribution\", null);\n    ImageOverlayDirective = __decorate([\n        core_1.Directive({\n            providers: [layer_provider_1.LayerProvider],\n            selector: \"yaga-image-overlay\",\n        }),\n        __metadata(\"design:paramtypes\", [layer_group_provider_1.LayerGroupProvider,\n            layer_provider_1.LayerProvider])\n    ], ImageOverlayDirective);\n    return ImageOverlayDirective;\n}(leaflet_1.ImageOverlay));\nexports.ImageOverlayDirective = ImageOverlayDirective;\n"]}