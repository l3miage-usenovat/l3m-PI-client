{"version":3,"file":"popup.directive.d.ts","sources":["popup.directive.d.ts"],"names":[],"mappingssourcesContent":["import { ElementRef, EventEmitter, OnDestroy } from \"@angular/core\";\nimport { Content, LatLng, LatLngExpression, LeafletEvent, Point, Popup } from \"leaflet\";\nimport { LayerProvider } from \"./layer.provider\";\n/**\n * Angular2 directive for Leaflet popups.\n *\n * *You can use this directive in an Angular2 template after importing `YagaModule`.*\n *\n * How to use in a template:\n * ```html\n * <yaga-map>\n *     <yaga-marker>\n *         <yaga-popup\n *             [(content)]=\"...\"\n *             [(opened)]=\"...\"\n *             [(lat)]=\"...\"\n *             [(lng)]=\"...\"\n *             [(position)]=\"...\"\n *\n *             (open)=\"...\"\n *             (close)=\"...\"\n *\n *             [maxWidth]=\"...\"\n *             [minWidth]=\"...\"\n *             [maxHeight]=\"...\"\n *             [autoPan]=\"...\"\n *             [autoPanPaddingTopLeft]=\"...\"\n *             [autoPanPaddingBottomRight]=\"...\"\n *             [autoPanPadding]=\"...\"\n *             [keepInView]=\"...\"\n *             [closeButton]=\"...\"\n *             [autoClose]=\"...\"\n *             [className]=\"...\"\n *             [pane]=\"...\"\n *             >\n *             <p>You can pass your content right here!</p>\n *         </yaga-popup>\n *     </yaga-marker>\n * </yaga-map>\n * ```\n */\nexport declare class PopupDirective extends Popup implements OnDestroy {\n    layerProvider: LayerProvider;\n    /**\n     * Two-Way bound property for the content of a popup.\n     * Use it with `<yaga-popup [(content)]=\"someValue\">` or `<yaga-popup (contentChange)=\"processEvent($event)\">`\n     *\n     * You can also pass the content directly within the web-component as view-content\n     * @link http://leafletjs.com/reference-1.2.0.html#popup-setcontent Original Leaflet documentation\n     */\n    contentChange: EventEmitter<Content>;\n    /**\n     * Two-Way bound property for the state of being opened.\n     * Use it with `<yaga-popup [(opened)]=\"someValue\">` or `<yaga-popup (openedChange)=\"processEvent($event)\">`\n     *\n     * You can also use the `popupOpened` property in the parent directives\n     * @link http://leafletjs.com/reference-1.2.0.html#popup-openon Original Leaflet documentation\n     */\n    openedChange: EventEmitter<boolean>;\n    /**\n     * Two-Way bound property for the latitude position of the popup.\n     * Use it with `<yaga-popup [(lat)]=\"someValue\">` or `<yaga-popup (latChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#popup-setlatlng Original Leaflet documentation\n     */\n    latChange: EventEmitter<number>;\n    /**\n     * Two-Way bound property for the longitude position of the popup.\n     * Use it with `<yaga-popup [(lng)]=\"someValue\">` or `<yaga-popup (lngChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#popup-setlatlng Original Leaflet documentation\n     */\n    lngChange: EventEmitter<number>;\n    /**\n     * Two-Way bound property for the position (LatLng) of the popup.\n     * Use it with `<yaga-popup [(position)]=\"someValue\">` or `<yaga-popup (positionChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#popup-setlatlng Original Leaflet documentation\n     */\n    positionChange: EventEmitter<LatLng>;\n    /**\n     * From leaflet fired open event.\n     * Use it with `<yaga-popup (open)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#popup-popupopen Original Leaflet documentation\n     */\n    openEvent: EventEmitter<LeafletEvent>;\n    /**\n     * From leaflet fired close event.\n     * Use it with `<yaga-popup (close)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#popup-popupclose Original Leaflet documentation\n     */\n    closeEvent: EventEmitter<LeafletEvent>;\n    constructor(elementRef: ElementRef, layerProvider: LayerProvider);\n    ngOnDestroy(): void;\n    /**\n     * Derived method of the original setContent method.\n     * @link http://leafletjs.com/reference-1.2.0.html#popup-setcontent Original Leaflet documentation\n     */\n    setContent(content: any): this;\n    /**\n     * Two-Way bound property for the content.\n     * Use it with `<yaga-popup [(content)]=\"someValue\">` or `<yaga-popup [content]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#popup-setcontent Original Leaflet documentation\n     */\n    content: Content;\n    /**\n     * Two-Way bound property for the opened state.\n     * Use it with `<yaga-popup [(opened)]=\"someValue\">` or `<yaga-popup [opened]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#popup-openon Original Leaflet documentation\n     */\n    opened: boolean;\n    /**\n     * Derived method of the original setLatLng method.\n     * @link http://leafletjs.com/reference-1.2.0.html#popup-setlatlng Original Leaflet documentation\n     */\n    setLatLng(latlng: LatLngExpression): this;\n    /**\n     * Two-Way bound property for the latitude position of the popup.\n     * Use it with `<yaga-popup [(lat)]=\"someValue\">` or `<yaga-popup [lat]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#popup-setlatlng Original Leaflet documentation\n     */\n    lat: number;\n    /**\n     * Two-Way bound property for the longitude position of the popup.\n     * Use it with `<yaga-popup [(lng)]=\"someValue\">` or `<yaga-popup [lng]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#popup-setlatlng Original Leaflet documentation\n     */\n    lng: number;\n    /**\n     * Two-Way bound property for the position of the popup.\n     * Use it with `<yaga-popup [(position)]=\"someValue\">` or `<yaga-popup [position]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#popup-setlatlng Original Leaflet documentation\n     */\n    position: LatLng;\n    /**\n     * Input for the maxWidth.\n     * Use it with `<yaga-popup [maxWidth]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#popup-maxwidth Original Leaflet documentation\n     */\n    maxWidth: number | undefined;\n    /**\n     * Input for the minWidth.\n     * Use it with `<yaga-popup [minWidth]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#popup-minwidth Original Leaflet documentation\n     */\n    minWidth: number | undefined;\n    /**\n     * Input for the maxHeight.\n     * Use it with `<yaga-popup [maxHeight]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#popup-maxheight Original Leaflet documentation\n     */\n    maxHeight: number | undefined;\n    /**\n     * Input for the autoPan.\n     * Use it with `<yaga-popup [autoPan]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#popup-autopan Original Leaflet documentation\n     */\n    autoPan: boolean;\n    /**\n     * Input for the autoPanPaddingTopLeft.\n     * Use it with `<yaga-popup [autoPanPaddingTopLeft]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#popup-autopanpaddingtopleft Original Leaflet documentation\n     */\n    autoPanPaddingTopLeft: Point;\n    /**\n     * Input for the autoPanPaddingBottomRight.\n     * Use it with `<yaga-popup [autoPanPaddingBottomRight]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#popup-autopanpaddingbottomleft Original Leaflet documentation\n     */\n    autoPanPaddingBottomRight: Point;\n    /**\n     * Input for the autoPanPadding.\n     * Use it with `<yaga-popup [autoPanPadding]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#popup-autopanpadding Original Leaflet documentation\n     */\n    autoPanPadding: Point;\n    /**\n     * Input for the keyInView.\n     * Use it with `<yaga-popup [keyInView]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#popup-keyinview Original Leaflet documentation\n     */\n    keepInView: boolean;\n    /**\n     * Input for the closeButton.\n     * Use it with `<yaga-popup [closeButton]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#popup-closebutton Original Leaflet documentation\n     */\n    closeButton: boolean;\n    /**\n     * Input for the autoClose.\n     * Use it with `<yaga-popup [autoClose]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#popup-autoclose Original Leaflet documentation\n     */\n    autoClose: boolean;\n    /**\n     * Input for the CSS class name.\n     * Use it with `<yaga-popup [autoClose]=\"className\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#popup-classname Original Leaflet documentation\n     */\n    className: string | undefined;\n    /**\n     * Input for the pane.\n     * Use it with `<yaga-popup [pane]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#popup-pane Original Leaflet documentation\n     */\n    pane: string | undefined;\n    reopen(force?: boolean): void;\n}\n"]}