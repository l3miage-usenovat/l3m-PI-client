{"version":3,"file":"polygon.directive.d.ts","sources":["polygon.directive.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter, OnDestroy } from \"@angular/core\";\nimport { Feature as GeoJSONFeature, Polygon as GeoJSONPolygon } from \"geojson\";\nimport { FillRule, LatLng, LatLngExpression, LatLngTuple, LeafletEvent, LeafletMouseEvent, LineCapShape, LineJoinShape, PathOptions, Polygon, PolylineOptions, PopupEvent, TooltipEvent } from \"leaflet\";\nimport { LayerGroupProvider } from \"./layer-group.provider\";\nimport { LayerProvider } from \"./layer.provider\";\n/**\n * Angular2 directive for Leaflet polygons.\n *\n * *You can use this directive in an Angular2 template after importing `YagaModule`.*\n *\n * How to use in a template:\n * ```html\n * <yaga-map>\n *     <yaga-polygon\n *         [(display)]=\"...\"\n *         [(stroke)]=\"...\"\n *         [(color)]=\"...\"\n *         [(weight)]=\"...\"\n *         [(opacity)]=\"...\"\n *         [(lineCap)]=\"...\"\n *         [(lineJoin)]=\"...\"\n *         [(dashArray)]=\"...\"\n *         [(dashOffset)]=\"...\"\n *         [(fill)]=\"...\"\n *         [(fillColor)]=\"...\"\n *         [(fillOpacity)]=\"...\"\n *         [(fillRule)]=\"...\"\n *         [(renderer)]=\"...\"\n *         [(className)]=\"...\"\n *         [(style)]=\"...\"\n *         [(latLngs)]=\"...\"\n *         [(geoJSON)]=\"...\"\n *\n *         (add)=\"...\"\n *         (remove)=\"...\"\n *         (popupopen)=\"...\"\n *         (popupclose)=\"...\"\n *         (tooltipopen)=\"...\"\n *         (tooltipclose)=\"...\"\n *         (click)=\"...\"\n *         (dblclick)=\"...\"\n *         (mousedown)=\"...\"\n *         (mouseover)=\"...\"\n *         (mouseout)=\"...\"\n *         (contextmenu)=\"...\"\n *\n *         [interactive]=\"...\"\n *         [smoothFactor]=\"...\"\n *         [noClip]=\"...\"\n *         [properties]=\"...\"\n *         >\n *     </yaga-polygon>\n * </yaga-map>\n * ```\n *\n * @link http://leafletjs.com/reference-1.2.0.html#polygon Original Leaflet documentation\n * @link https://leaflet-ng2.yagajs.org/latest/browser-test?grep=Rectangle%20Directive Unit-Test\n * @link https://leaflet-ng2.yagajs.org/latest/coverage/lcov-report/lib/polygon.directive.js.html Test coverage\n * @link https://leaflet-ng2.yagajs.org/latest/typedoc/classes/polygondirective.html API documentation\n * @example https://leaflet-ng2.yagajs.org/latest/examples/polygon-directive\n */\nexport declare class PolygonDirective<T> extends Polygon implements OnDestroy {\n    protected layerGroupProvider: LayerGroupProvider;\n    /**\n     * Two-Way bound property for the display status of the geometry.\n     * Use it with `<yaga-polygon [(display)]=\"someValue\">`\n     * or `<yaga-polygon (displayChange)=\"processEvent($event)\">`\n     */\n    displayChange: EventEmitter<boolean>;\n    /**\n     * Two-Way bound property for the stroke state of the geometry.\n     * Use it with `<yaga-polygon [(stroke)]=\"someValue\">`\n     * or `<yaga-polygon (strokeChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#polygon-stroke Original Leaflet documentation\n     */\n    strokeChange: EventEmitter<boolean>;\n    /**\n     * Two-Way bound property for the line-color of the geometry.\n     * Use it with `<yaga-polygon [(color)]=\"someValue\">`\n     * or `<yaga-polygon (colorChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#polygon-color Original Leaflet documentation\n     */\n    colorChange: EventEmitter<string>;\n    /**\n     * Two-Way bound property for the weight of the geometry.\n     * Use it with `<yaga-polygon [(weight)]=\"someValue\">`\n     * or `<yaga-polygon (weightChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#polygon-weight Original Leaflet documentation\n     */\n    weightChange: EventEmitter<number>;\n    /**\n     * Two-Way bound property for the opacity of the geometry.\n     * Use it with `<yaga-polygon [(opacity)]=\"someValue\">`\n     * or `<yaga-polygon (opacityChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#polygon-opacity Original Leaflet documentation\n     */\n    opacityChange: EventEmitter<number>;\n    /**\n     * Two-Way bound property for the lineCap of the geometry.\n     * Use it with `<yaga-polygon [(lineCap)]=\"someValue\">`\n     * or `<yaga-polygon (lineCapChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#polygon-linecap Original Leaflet documentation\n     */\n    lineCapChange: EventEmitter<string>;\n    /**\n     * Two-Way bound property for the lineJoin of the geometry.\n     * Use it with `<yaga-polygon [(lineJoin)]=\"someValue\">`\n     * or `<yaga-polygon (lineJoinChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#polygon-linejoin Original Leaflet documentation\n     */\n    lineJoinChange: EventEmitter<string>;\n    /**\n     * Two-Way bound property for the dashArray of the geometry.\n     * Use it with `<yaga-polygon [(dashArray)]=\"someValue\">`\n     * or `<yaga-polygon (dashArrayChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#polygon-dasharray Original Leaflet documentation\n     */\n    dashArrayChange: EventEmitter<string>;\n    /**\n     * Two-Way bound property for the dashOffset of the geometry.\n     * Use it with `<yaga-polygon [(dashOffset)]=\"someValue\">`\n     * or `<yaga-polygon (dashOffsetChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#polygon-dashoffset Original Leaflet documentation\n     */\n    dashOffsetChange: EventEmitter<string>;\n    /**\n     * Two-Way bound property for the fill state of the geometry.\n     * Use it with `<yaga-polygon [(fill)]=\"someValue\">`\n     * or `<yaga-polygon (fillChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#polygon-fill Original Leaflet documentation\n     */\n    fillChange: EventEmitter<boolean>;\n    /**\n     * Two-Way bound property for the fill-color of the geometry.\n     * Use it with `<yaga-polygon [(fillColor)]=\"someValue\">`\n     * or `<yaga-polygon (fillColorChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#polygon-fillcolor Original Leaflet documentation\n     */\n    fillColorChange: EventEmitter<string>;\n    /**\n     * Two-Way bound property for the fill-opacity of the geometry.\n     * Use it with `<yaga-polygon [(fillOpacity)]=\"someValue\">`\n     * or `<yaga-polygon (fillOpacityChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#polygon-fillopacity Original Leaflet documentation\n     */\n    fillOpacityChange: EventEmitter<number>;\n    /**\n     * Two-Way bound property for the fill-rule of the geometry.\n     * Use it with `<yaga-polygon [(fillRule)]=\"someValue\">`\n     * or `<yaga-polygon (fillRuleChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#polygon-fillrule Original Leaflet documentation\n     */\n    fillRuleChange: EventEmitter<string>;\n    /**\n     * Two-Way bound property for the className of the geometry.\n     * Use it with `<yaga-polygon [(className)]=\"someValue\">`\n     * or `<yaga-polygon (classNameChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#polygon-classname Original Leaflet documentation\n     */\n    classNameChange: EventEmitter<string>;\n    /**\n     * Two-Way bound property for the css-style of the geometry.\n     * Use it with `<yaga-polygon [(style)]=\"someValue\">`\n     * or `<yaga-polygon (styleChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#polygon-setstyle Original Leaflet documentation\n     */\n    styleChange: EventEmitter<PathOptions>;\n    /**\n     * Two-Way bound property for the array of LatLngs of the geometry.\n     * Use it with `<yaga-polygon [(latLngs)]=\"someValue\">`\n     * or `<yaga-polygon (latLngsChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.3.0.html#polygon-setlatlngs Original Leaflet documentation\n     */\n    latLngsChange: EventEmitter<LatLng[]>;\n    /**\n     * Two-Way bound property for the corresponding GeoJSON.\n     * Use it with `<yaga-polygon [(geoJSON)]=\"someValue\">`\n     * or `<yaga-polygon (geoJSONChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.3.0.html#polygon-togeojson Original Leaflet documentation\n     */\n    geoJSONChange: EventEmitter<GeoJSONFeature<GeoJSON.Polygon | GeoJSON.MultiPolygon, T>>;\n    /**\n     * From leaflet fired add event.\n     * Use it with `<yaga-polygon (add)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#polygon-add Original Leaflet documentation\n     */\n    addEvent: EventEmitter<LeafletEvent>;\n    /**\n     * From leaflet fired remove event.\n     * Use it with `<yaga-polygon (remove)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#polygon-remove Original Leaflet documentation\n     */\n    removeEvent: EventEmitter<LeafletEvent>;\n    /**\n     * From leaflet fired popupopen event.\n     * Use it with `<yaga-polygon (popupopen)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#polygon-popupopen Original Leaflet documentation\n     */\n    popupopenEvent: EventEmitter<PopupEvent>;\n    /**\n     * From leaflet fired popupclose event.\n     * Use it with `<yaga-polygon (popupclose)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#polygon-popupclose Original Leaflet documentation\n     */\n    popupcloseEvent: EventEmitter<PopupEvent>;\n    /**\n     * From leaflet fired tooltipopen event.\n     * Use it with `<yaga-polygon (tooltipopen)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#polygon-tooltipopen Original Leaflet documentation\n     */\n    tooltipopenEvent: EventEmitter<TooltipEvent>;\n    /**\n     * From leaflet fired tooltipclose event.\n     * Use it with `<yaga-polygon (tooltipclose)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#polygon-tooltipclose Original Leaflet documentation\n     */\n    tooltipcloseEvent: EventEmitter<TooltipEvent>;\n    /**\n     * From leaflet fired click event.\n     * Use it with `<yaga-polygon (click)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#polygon-click Original Leaflet documentation\n     */\n    clickEvent: EventEmitter<LeafletMouseEvent>;\n    /**\n     * From leaflet fired dblclick event.\n     * Use it with `<yaga-polygon (dblclick)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#polygon-dblclick Original Leaflet documentation\n     */\n    dblclickEvent: EventEmitter<LeafletMouseEvent>;\n    /**\n     * From leaflet fired mousedown event.\n     * Use it with `<yaga-polygon (mousedown)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#polygon-mousedown Original Leaflet documentation\n     */\n    mousedownEvent: EventEmitter<LeafletMouseEvent>;\n    /**\n     * From leaflet fired mouseover event.\n     * Use it with `<yaga-polygon (mouseover)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#polygon-mouseover Original Leaflet documentation\n     */\n    mouseoverEvent: EventEmitter<LeafletMouseEvent>;\n    /**\n     * From leaflet fired mouseout event.\n     * Use it with `<yaga-polygon (mouseout)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#polygon-mouseout Original Leaflet documentation\n     */\n    mouseoutEvent: EventEmitter<LeafletMouseEvent>;\n    /**\n     * From leaflet fired contextmenu event.\n     * Use it with `<yaga-polygon (contextmenu)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#polygon-contextmenu Original Leaflet documentation\n     */\n    contextmenuEvent: EventEmitter<LeafletMouseEvent>;\n    feature: GeoJSONFeature<GeoJSONPolygon>;\n    constructor(layerGroupProvider: LayerGroupProvider, layerProvider: LayerProvider);\n    /**\n     * Internal method to provide the removal of the layer in Leaflet, when removing it from the Angular template\n     */\n    ngOnDestroy(): void;\n    /**\n     * Derived method fof the original LatLngs.\n     * @link http://leafletjs.com/reference-1.2.0.html#polygon-addlatlngs Original Leaflet documentation\n     */\n    setLatLngs(val: (Array<(LatLng | LatLngTuple | LatLngExpression)> | Array<Array<(LatLng | LatLngTuple | LatLngExpression)>> | Array<Array<Array<(LatLng | LatLngTuple | LatLngExpression)>>>)): this;\n    /**\n     * Derived method of the original addLatLng.\n     * @link http://leafletjs.com/reference-1.2.0.html#polygon-addlatlngs Original Leaflet documentation\n     */\n    addLatLng(val: (LatLng | LatLngTuple | LatLngExpression) | Array<(LatLng | LatLngTuple | LatLngExpression)>): this;\n    /**\n     * Two-Way bound property for the array of LatLngs for the geometry.\n     * Use it with `<yaga-polygon [(latLngs)]=\"someValue\">` or `<yaga-polygon [latLngs]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#polygon-setbounds Original Leaflet documentation\n     */\n    latLngs: LatLng[] | LatLng[][] | LatLng[][][];\n    /**\n     * Two-Way bound property for the corresponding GeoJSON.\n     * Use it with `<yaga-polygon [(geoJSON)]=\"someValue\">` or `<yaga-polygon [geoJSON]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#polygon-togeojson Original Leaflet documentation\n     */\n    geoJSON: GeoJSONFeature<GeoJSON.Polygon | GeoJSON.MultiPolygon, T>;\n    /**\n     * Derived method of the original setStyle.\n     * @link http://leafletjs.com/reference-1.2.0.html#polygon-setstyle Original Leaflet documentation\n     */\n    setStyle(style: PathOptions): this;\n    /**\n     * Two-Way bound property for the opacity.\n     * Use it with `<yaga-polygon [(opacity)]=\"someValue\">` or `<yaga-polygon [opacity]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#polygon-opacity Original Leaflet documentation\n     */\n    opacity: number | undefined;\n    /**\n     * Two-Way bound property for the stroke.\n     * Use it with `<yaga-polygon [(stroke)]=\"someValue\">` or `<yaga-polygon [stroke]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#polygon-stroke Original Leaflet documentation\n     */\n    stroke: boolean;\n    /**\n     * Two-Way bound property for the color.\n     * Use it with `<yaga-polygon [(color)]=\"someValue\">` or `<yaga-polygon [color]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#polygon-color Original Leaflet documentation\n     */\n    color: string | undefined;\n    /**\n     * Two-Way bound property for the weight.\n     * Use it with `<yaga-polygon [(weight)]=\"someValue\">` or `<yaga-polygon [weight]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#polygon-weight Original Leaflet documentation\n     */\n    weight: number | undefined;\n    /**\n     * Two-Way bound property for the lineCap.\n     * Use it with `<yaga-polygon [(lineCap)]=\"someValue\">` or `<yaga-polygon [lineCap]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#polygon-linecap Original Leaflet documentation\n     */\n    lineCap: LineCapShape | undefined;\n    /**\n     * Two-Way bound property for the lineJoin.\n     * Use it with `<yaga-polygon [(lineJoin)]=\"someValue\">` or `<yaga-polygon [lineJoin]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#polygon-linejoin Original Leaflet documentation\n     */\n    lineJoin: LineJoinShape | undefined;\n    /**\n     * Two-Way bound property for the dashArray.\n     * Use it with `<yaga-polygon [(dashArray)]=\"someValue\">` or `<yaga-polygon [dashArray]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#polygon-dasharray Original Leaflet documentation\n     */\n    dashArray: string | undefined;\n    /**\n     * Two-Way bound property for the dashOffset.\n     * Use it with `<yaga-polygon [(dashOffset)]=\"someValue\">` or `<yaga-polygon [dashOffset]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#polygon-dashoffset Original Leaflet documentation\n     */\n    dashOffset: string | undefined;\n    /**\n     * Two-Way bound property for the fill.\n     * Use it with `<yaga-polygon [(fill)]=\"someValue\">` or `<yaga-polygon [fill]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#polygon-fill Original Leaflet documentation\n     */\n    fill: boolean;\n    /**\n     * Two-Way bound property for the fillColor.\n     * Use it with `<yaga-polygon [(fillColor)]=\"someValue\">` or `<yaga-polygon [fillColor]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#polygon-fillcolor Original Leaflet documentation\n     */\n    fillColor: string | undefined;\n    /**\n     * Two-Way bound property for the fillOpacity.\n     * Use it with `<yaga-polygon [(fillOpacity)]=\"someValue\">` or `<yaga-polygon [fillOpacity]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#polygon-fillopacity Original Leaflet documentation\n     */\n    fillOpacity: number | undefined;\n    /**\n     * Two-Way bound property for the fillRule.\n     * Use it with `<yaga-polygon [(fillRule)]=\"someValue\">` or `<yaga-polygon [fillRule]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#polygon-fillrule Original Leaflet documentation\n     */\n    fillRule: FillRule | undefined;\n    /**\n     * Two-Way bound property for the className.\n     * Use it with `<yaga-polygon [(className)]=\"someValue\">` or `<yaga-polygon [className]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#polygon-classname Original Leaflet documentation\n     */\n    className: string | undefined;\n    /**\n     * Two-Way bound property for the opacity.\n     * Use it with `<yaga-polygon [(style)]=\"someValue\">` or `<yaga-polygon [style]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#polygon-style Original Leaflet documentation\n     */\n    style: PolylineOptions;\n    /**\n     * Two-Way bound property for the display state.\n     * Use it with `<yaga-polygon [(display)]=\"someValue\">` or `<yaga-polygon [display]=\"someValue\">`\n     */\n    display: boolean;\n    /**\n     * Input for the interactive state.\n     * Use it with `<yaga-polygon [interactive]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#polygon-interactive Original Leaflet documentation\n     */\n    interactive: boolean;\n    /**\n     * Input for the smoothFactor.\n     * Use it with `<yaga-polygon [smoothFactor]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#polygon-smoothfactor Original Leaflet documentation\n     */\n    smoothFactor: number | undefined;\n    /**\n     * Input for the noClip state.\n     * Use it with `<yaga-polygon [noClip]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#polygon-noclip Original Leaflet documentation\n     */\n    noClip: boolean;\n    /**\n     * Input for the GeoJSON properties.\n     * Use it with `<yaga-polygon [properties]=\"someValue\">`\n     */\n    properties: T;\n}\n"]}