"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var leaflet_1 = require("leaflet");
var layer_provider_1 = require("./layer.provider");
/**
 * Angular2 directive for Leaflet tooltips.
 *
 * *You can use this directive in an Angular2 template after importing `YagaModule`.*
 *
 * How to use in a template:
 * ```html
 * <yaga-map>
 *     <yaga-marker>
 *         <yaga-tooltip
 *             [(content)]="..."
 *             [(opened)]="..."
 *             [(lat)]="..."
 *             [(lng)]="..."
 *             [(position)]="..."
 *             [(opacity)]="..."
 *
 *             (open)="..."
 *             (close)="..."
 *
 *             [className]="..."
 *             [pane]="..."
 *             [interactive]="..."
 *             [sticky]="..."
 *             [direction]="..."
 *             [permanent]="..."
 *             [offset]="..."
 *             >
 *             <p>You can pass your content right here!</p>
 *         </yaga-tooltip>
 *     </yaga-marker>
 * </yaga-map>
 * ```
 */
var TooltipDirective = /** @class */ (function (_super) {
    __extends(TooltipDirective, _super);
    function TooltipDirective(layerProvider, elementRef) {
        var _this = _super.call(this) || this;
        _this.layerProvider = layerProvider;
        /**
         * Two-Way bound property for the content of a tooltip.
         * Use it with `<yaga-tooltip [(content)]="someValue">` or `<yaga-tooltip (contentChange)="processEvent($event)">`
         *
         * You can also pass the content directly within the web-component as view-content
         * @link http://leafletjs.com/reference-1.2.0.html#tooltip-setcontent Original Leaflet documentation
         */
        _this.contentChange = new core_1.EventEmitter();
        /**
         * Two-Way bound property for the state of being opened.
         * Use it with `<yaga-tooltip [(opened)]="someValue">` or `<yaga-tooltip (openedChange)="processEvent($event)">`
         *
         * You can also use the `tooltipOpened` property in the parent directives
         * @link http://leafletjs.com/reference-1.2.0.html#tooltip-openon Original Leaflet documentation
         */
        _this.openedChange = new core_1.EventEmitter();
        /**
         * Two-Way bound property for the latitude position of the tooltip.
         * Use it with `<yaga-tooltip [(lat)]="someValue">` or `<yaga-tooltip (latChange)="processEvent($event)">`
         * @link http://leafletjs.com/reference-1.2.0.html#tooltip-setlatlng Original Leaflet documentation
         */
        _this.latChange = new core_1.EventEmitter();
        /**
         * Two-Way bound property for the longitude position of the tooltip.
         * Use it with `<yaga-tooltip [(lng)]="someValue">` or `<yaga-tooltip (lngChange)="processEvent($event)">`
         * @link http://leafletjs.com/reference-1.2.0.html#tooltip-setlatlng Original Leaflet documentation
         */
        _this.lngChange = new core_1.EventEmitter();
        /**
         * Two-Way bound property for the position (LatLng) of the tooltip.
         * Use it with `<yaga-tooltip [(position)]="someValue">` or `<yaga-tooltip (positionChange)="processEvent($event)">`
         * @link http://leafletjs.com/reference-1.2.0.html#tooltip-setlatlng Original Leaflet documentation
         */
        _this.positionChange = new core_1.EventEmitter();
        /**
         * Two-Way bound property for the opacity of the tooltip.
         * Use it with `<yaga-tooltip [(opacity)]="someValue">` or `<yaga-tooltip (opacityChange)="processEvent($event)">`
         * @link http://leafletjs.com/reference-1.2.0.html#tooltip-setlatlng Original Leaflet documentation
         */
        _this.opacityChange = new core_1.EventEmitter();
        /**
         * From leaflet fired open event.
         * Use it with `<yaga-tooltip (open)="processEvent($event)">`
         * @link http://leafletjs.com/reference-1.2.0.html#tooltip-tooltipopen Original Leaflet documentation
         */
        _this.openEvent = new core_1.EventEmitter();
        /**
         * From leaflet fired close event.
         * Use it with `<yaga-tooltip (close)="processEvent($event)">`
         * @link http://leafletjs.com/reference-1.2.0.html#tooltip-tooltipclose Original Leaflet documentation
         */
        _this.closeEvent = new core_1.EventEmitter();
        _this.setContent(elementRef.nativeElement);
        _this.on("add", function (event) {
            _this.openEvent.emit(event);
            _this.openedChange.emit(true);
        });
        _this.on("remove", function (event) {
            _this.closeEvent.emit(event);
            _this.openedChange.emit(false);
        });
        _this.layerProvider.ref.bindTooltip(_this);
        return _this;
    }
    /**
     * This function gets called from Angular on destroy of the html-component.
     * @link https://angular.io/docs/ts/latest/api/core/index/OnDestroy-class.html
     */
    TooltipDirective.prototype.ngOnDestroy = function () {
        this.layerProvider.ref.unbindTooltip();
    };
    /**
     * Derived method of the original setContent method.
     * @link http://leafletjs.com/reference-1.2.0.html#tooltip-setcontent Original Leaflet documentation
     */
    TooltipDirective.prototype.setContent = function (content) {
        this.contentChange.emit((content));
        return _super.prototype.setContent.call(this, content);
    };
    Object.defineProperty(TooltipDirective.prototype, "content", {
        get: function () {
            return this.getContent() || "";
        },
        /**
         * Two-Way bound property for the content.
         * Use it with `<yaga-tooltip [(content)]="someValue">` or `<yaga-tooltip [content]="someValue">`
         * @link http://leafletjs.com/reference-1.2.0.html#tooltip-setcontent Original Leaflet documentation
         */
        set: function (val) {
            this.setContent(val);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TooltipDirective.prototype, "opened", {
        get: function () {
            return !!this._map;
        },
        /**
         * Two-Way bound property for the opened state.
         * Use it with `<yaga-tooltip [(opened)]="someValue">` or `<yaga-tooltip [opened]="someValue">`
         * @link http://leafletjs.com/reference-1.2.0.html#tooltip-openon Original Leaflet documentation
         */
        set: function (val) {
            if (val) {
                this.layerProvider.ref.openTooltip();
                return;
            }
            this.layerProvider.ref.closeTooltip();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Derived method of the original setLatLng method.
     * @link http://leafletjs.com/reference-1.2.0.html#tooltip-setlatlng Original Leaflet documentation
     */
    TooltipDirective.prototype.setLatLng = function (latlng) {
        _super.prototype.setLatLng.call(this, latlng);
        this.latChange.emit(this.lat);
        this.lngChange.emit(this.lng);
        this.positionChange.emit(leaflet_1.latLng(this.lat, this.lng));
        return this;
    };
    Object.defineProperty(TooltipDirective.prototype, "lat", {
        get: function () {
            if (!this.getLatLng()) {
                return NaN;
            }
            return this.getLatLng().lat;
        },
        /**
         * Two-Way bound property for the latitude position of the tooltip.
         * Use it with `<yaga-tooltip [(lat)]="someValue">` or `<yaga-tooltip [lat]="someValue">`
         * @link http://leafletjs.com/reference-1.2.0.html#tooltip-setlatlng Original Leaflet documentation
         */
        set: function (val) {
            this.setLatLng([val, this.lng]);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TooltipDirective.prototype, "lng", {
        get: function () {
            if (!this.getLatLng()) {
                return NaN;
            }
            return this.getLatLng().lng;
        },
        /**
         * Two-Way bound property for the longitude position of the tooltip.
         * Use it with `<yaga-tooltip [(lng)]="someValue">` or `<yaga-tooltip [lng]="someValue">`
         * @link http://leafletjs.com/reference-1.2.0.html#tooltip-setlatlng Original Leaflet documentation
         */
        set: function (val) {
            this.setLatLng([this.lat, val]);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TooltipDirective.prototype, "position", {
        get: function () {
            if (!this.getLatLng()) {
                return new leaflet_1.LatLng(NaN, NaN);
            }
            return this.getLatLng();
        },
        /**
         * Two-Way bound property for the position of the tooltip.
         * Use it with `<yaga-tooltip [(position)]="someValue">` or `<yaga-tooltip [position]="someValue">`
         * @link http://leafletjs.com/reference-1.2.0.html#tooltip-setlatlng Original Leaflet documentation
         */
        set: function (val) {
            this.setLatLng(val);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Derived method of the original setContent method.
     * @link http://leafletjs.com/reference-1.2.0.html#tooltip-setcontent Original Leaflet documentation
     */
    TooltipDirective.prototype.setOpacity = function (val) {
        _super.prototype.setOpacity.call(this, val);
        this.opacityChange.emit(val);
    };
    Object.defineProperty(TooltipDirective.prototype, "opacity", {
        get: function () {
            return this.options.opacity;
        },
        /**
         * Two-Way bound property for the opacity of the tooltip.
         * Use it with `<yaga-tooltip [(opacity)]="someValue">` or `<yaga-tooltip [opacity]="someValue">`
         * @link http://leafletjs.com/reference-1.2.0.html#tooltip-opacity Original Leaflet documentation
         */
        set: function (val) {
            if (val === undefined) {
                val = 1;
            }
            this.setOpacity(val);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TooltipDirective.prototype, "className", {
        get: function () {
            return this.options.className;
        },
        /**
         * Input for the CSS class name.
         * Use it with `<yaga-tooltip [autoClose]="className">`
         * @link http://leafletjs.com/reference-1.2.0.html#tooltip-classname Original Leaflet documentation
         */
        set: function (val) {
            if (!this._container) {
                this.options.className = val;
                return;
            }
            var oldClassName = this._container.getAttribute("class") || "";
            var newClassNameSplited = oldClassName.split(" " + this.options.className + " ");
            if (newClassNameSplited.length === 1) {
                newClassNameSplited.push("");
            }
            this._container.setAttribute("class", newClassNameSplited.join(" " + val + " ").trim());
            this.options.className = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TooltipDirective.prototype, "pane", {
        get: function () {
            return this.options.pane;
        },
        /**
         * Input for the pane.
         * Use it with `<yaga-tooltip [pane]="someValue">`
         * @link http://leafletjs.com/reference-1.2.0.html#tooltip-pane Original Leaflet documentation
         */
        set: function (val) {
            this.options.pane = val;
            this._updateLayout();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TooltipDirective.prototype, "interactive", {
        get: function () {
            return !!this.options.interactive;
        },
        /**
         * Input for the interactive state.
         * Use it with `<yaga-tooltip [interactive]="someValue">`
         * @link http://leafletjs.com/reference-1.2.0.html#tooltip-interactive Original Leaflet documentation
         */
        set: function (val) {
            this.options.interactive = val;
            this._updateLayout();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TooltipDirective.prototype, "sticky", {
        get: function () {
            return !!this.options.sticky;
        },
        /**
         * Input for the sticky.
         * Use it with `<yaga-tooltip [sticky]="someValue">`
         * @link http://leafletjs.com/reference-1.2.0.html#tooltip-sticky Original Leaflet documentation
         */
        set: function (val) {
            this._initTooltipInteractions.call(this.layerProvider.ref, true);
            this.options.sticky = val;
            this._initTooltipInteractions.call(this.layerProvider.ref, false);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TooltipDirective.prototype, "direction", {
        get: function () {
            return this.options.direction;
        },
        /**
         * Input for the direction.
         * Use it with `<yaga-tooltip [direction]="someValue">`
         * @link http://leafletjs.com/reference-1.2.0.html#tooltip-direction Original Leaflet documentation
         */
        set: function (val) {
            this.options.direction = val;
            this.reopen();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TooltipDirective.prototype, "permanent", {
        get: function () {
            return !!this.options.permanent;
        },
        /**
         * Input for the permanent state.
         * Use it with `<yaga-tooltip [permanent]="someValue">`
         * @link http://leafletjs.com/reference-1.2.0.html#tooltip-permanent Original Leaflet documentation
         */
        set: function (val) {
            this._initTooltipInteractions.call(this.layerProvider.ref, true);
            this.options.permanent = val;
            this._initTooltipInteractions.call(this.layerProvider.ref, false);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TooltipDirective.prototype, "offset", {
        get: function () {
            return this.options.offset;
        },
        /**
         * Input for the offset.
         * Use it with `<yaga-tooltip [offset]="someValue">`
         * @link http://leafletjs.com/reference-1.2.0.html#tooltip-offset Original Leaflet documentation
         */
        set: function (val) {
            this.options.offset = val;
            this.reopen();
        },
        enumerable: true,
        configurable: true
    });
    TooltipDirective.prototype.reopen = function (force) {
        if (force === void 0) { force = false; }
        if (force || this.opened) {
            this.layerProvider.ref.closeTooltip();
            this.layerProvider.ref.openTooltip();
        }
    };
    __decorate([
        core_1.Output(),
        __metadata("design:type", core_1.EventEmitter)
    ], TooltipDirective.prototype, "contentChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", core_1.EventEmitter)
    ], TooltipDirective.prototype, "openedChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", core_1.EventEmitter)
    ], TooltipDirective.prototype, "latChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", core_1.EventEmitter)
    ], TooltipDirective.prototype, "lngChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", core_1.EventEmitter)
    ], TooltipDirective.prototype, "positionChange", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", core_1.EventEmitter)
    ], TooltipDirective.prototype, "opacityChange", void 0);
    __decorate([
        core_1.Output("open"),
        __metadata("design:type", core_1.EventEmitter)
    ], TooltipDirective.prototype, "openEvent", void 0);
    __decorate([
        core_1.Output("close"),
        __metadata("design:type", core_1.EventEmitter)
    ], TooltipDirective.prototype, "closeEvent", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], TooltipDirective.prototype, "content", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], TooltipDirective.prototype, "opened", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], TooltipDirective.prototype, "lat", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], TooltipDirective.prototype, "lng", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", leaflet_1.LatLng),
        __metadata("design:paramtypes", [leaflet_1.LatLng])
    ], TooltipDirective.prototype, "position", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], TooltipDirective.prototype, "opacity", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], TooltipDirective.prototype, "className", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], TooltipDirective.prototype, "pane", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], TooltipDirective.prototype, "interactive", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], TooltipDirective.prototype, "sticky", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], TooltipDirective.prototype, "direction", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], TooltipDirective.prototype, "permanent", null);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], TooltipDirective.prototype, "offset", null);
    TooltipDirective = __decorate([
        core_1.Directive({
            selector: "yaga-tooltip",
        }),
        __param(1, core_1.Inject(core_1.ElementRef)),
        __metadata("design:paramtypes", [layer_provider_1.LayerProvider,
            core_1.ElementRef])
    ], TooltipDirective);
    return TooltipDirective;
}(leaflet_1.Tooltip));
exports.TooltipDirective = TooltipDirective;
//# sourceMappingURL=tooltip.directive.js.map