{"version":3,"file":"zoom-control.directive.js","sources":["zoom-control.directive.js"],"names":[],"mappings":"AAAA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAIO;AACP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAA6B;AAC7B;AACA;AACA;AACA","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar leaflet_1 = require(\"leaflet\");\nvar map_provider_1 = require(\"./map.provider\");\nvar mouse_event_helper_1 = require(\"./mouse-event-helper\");\n/**\n * Angular2 directive for the attribution-control of Leaflet.\n *\n * *You can use this directive in an Angular2 template after importing `YagaModule`.*\n *\n * How to use in a template:\n * ```html\n * <yaga-map>\n *     <yaga-zoom-control\n *         [(display)]=\"...\"\n *         [(zIndex)]=\"...\"\n *         [(position)]=\"...\"\n *\n *         [zoomInText]=\"...\"\n *         [zoomInTitle]=\"...\"\n *         [zoomOutText]=\"...\"\n *         [zoomOutTitle]=\"...\"\n *\n *         (add)=\"...\"\n *         (remove)=\"...\"\n *         (click)=\"...\"\n *         (dblclick)=\"...\"\n *         (mousedown)=\"...\"\n *         (mouseover)=\"...\"\n *         (mouseout)=\"...\"\n *         >\n *     </yaga-zoom-control>\n * </yaga-map>\n * ```\n *\n * @link http://leafletjs.com/reference-1.2.0.html#control-zoom Original Leaflet documentation\n * @link https://leaflet-ng2.yagajs.org/latest/browser-test?grep=Zoom-Control%20Directive Unit-Test\n * @link https://leaflet-ng2.yagajs.org/latest/coverage/lcov-report/lib/zoom-control.directive.js.html\n * Test coverage\n * @link https://leaflet-ng2.yagajs.org/latest/typedoc/classes/zoomcontroldirective.html API documentation\n * @example https://leaflet-ng2.yagajs.org/latest/examples/zoom-control-directive/\n */\nvar ZoomControlDirective = /** @class */ (function (_super) {\n    __extends(ZoomControlDirective, _super);\n    function ZoomControlDirective(mapProvider) {\n        var _this = _super.call(this) || this;\n        _this.mapProvider = mapProvider;\n        /**\n         * Two-Way bound property for the display status of the control.\n         * Use it with `<yaga-zoom-control [(display)]=\"someValue\">`\n         * or `<yaga-zoom-control (displayChange)=\"processEvent($event)\">`\n         */\n        _this.displayChange = new core_1.EventEmitter();\n        /**\n         * Two-Way bound property for the zIndex of the control.\n         * Use it with `<yaga-zoom-control [(zIndex)]=\"someValue\">`\n         * or `<yaga-zoom-control (zIndexChange)=\"processEvent($event)\">`\n         */\n        _this.zIndexChange = new core_1.EventEmitter();\n        /**\n         * Two-Way bound property for the position of the control.\n         * Use it with `<yaga-zoom-control [(position)]=\"someValue\">`\n         * or `<yaga-zoom-control (positionChange)=\"processEvent($event)\">`\n         */\n        _this.positionChange = new core_1.EventEmitter();\n        /**\n         * From leaflet fired add event.\n         * Use it with `<yaga-zoom-control (add)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#control-zoom-add Original Leaflet documentation\n         */\n        _this.addEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired remove event.\n         * Use it with `<yaga-zoom-control (remove)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#control-zoom-remove Original Leaflet documentation\n         */\n        _this.removeEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired click event.\n         * Use it with `<yaga-zoom-control (click)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#control-zoom-click Original Leaflet documentation\n         */\n        _this.clickEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired dblclick event.\n         * Use it with `<yaga-zoom-control (dblclick)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#control-zoom-dblclick Original Leaflet documentation\n         */\n        _this.dblclickEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired mousedown event.\n         * Use it with `<yaga-zoom-control (mousedown)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#control-zoom-mousedown Original Leaflet documentation\n         */\n        _this.mousedownEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired mouseover event.\n         * Use it with `<yaga-zoom-control (mouseover)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#control-zoom-mouseover Original Leaflet documentation\n         */\n        _this.mouseoverEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired mouseout event.\n         * Use it with `<yaga-zoom-control (mouseout)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#control-zoom-mouseout Original Leaflet documentation\n         */\n        _this.mouseoutEvent = new core_1.EventEmitter();\n        _this.mapProvider.ref.addControl(_this);\n        // Events\n        _this.getContainer().addEventListener(\"click\", function (event) {\n            _this.clickEvent.emit(mouse_event_helper_1.enhanceMouseEvent(event, _this._map));\n        });\n        _this.getContainer().addEventListener(\"dblclick\", function (event) {\n            _this.dblclickEvent.emit(mouse_event_helper_1.enhanceMouseEvent(event, _this._map));\n        });\n        _this.getContainer().addEventListener(\"mousedown\", function (event) {\n            _this.mousedownEvent.emit(mouse_event_helper_1.enhanceMouseEvent(event, _this._map));\n        });\n        _this.getContainer().addEventListener(\"mouseover\", function (event) {\n            _this.mouseoverEvent.emit(mouse_event_helper_1.enhanceMouseEvent(event, _this._map));\n        });\n        _this.getContainer().addEventListener(\"mouseout\", function (event) {\n            _this.mouseoutEvent.emit(mouse_event_helper_1.enhanceMouseEvent(event, _this._map));\n        });\n        return _this;\n    }\n    /**\n     * Internal method to provide the removal of the control in Leaflet, when removing it from the Angular template\n     */\n    ZoomControlDirective.prototype.ngOnDestroy = function () {\n        this.mapProvider.ref.removeControl(this);\n    };\n    /**\n     * Derived remove function\n     */\n    ZoomControlDirective.prototype.remove = function () {\n        /* tslint:disable */\n        _super.prototype.remove.call(this);\n        this.displayChange.emit(false);\n        this.removeEvent.emit({ target: this, type: \"remove\" });\n        return this;\n    };\n    /**\n     * Derived addTo function\n     */\n    ZoomControlDirective.prototype.addTo = function (map) {\n        /* tslint:disable */\n        _super.prototype.addTo.call(this, map);\n        this.displayChange.emit(true);\n        this.addEvent.emit({ target: this, type: \"add\" });\n        return this;\n    };\n    /**\n     * Derived method of the original setPosition.\n     * @link http://leafletjs.com/reference-1.2.0.html#control-zoom-setposition Original Leaflet documentation\n     */\n    ZoomControlDirective.prototype.setPosition = function (val) {\n        _super.prototype.setPosition.call(this, val);\n        this.positionChange.emit(val);\n        return this;\n    };\n    Object.defineProperty(ZoomControlDirective.prototype, \"opacity\", {\n        get: function () {\n            var val = this.getContainer().style.opacity;\n            if (typeof val === \"string\") {\n                return parseFloat(val);\n            }\n        },\n        /**\n         * Two-Way bound property for the opacity.\n         * Use it with `<yaga-zoom-control [(opacity)]=\"someValue\">`\n         * or `<yaga-zoom-control [opacity]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#control-zoom-opacity Original Leaflet documentation\n         */\n        set: function (val) {\n            if (typeof val === \"number\") {\n                this.getContainer().style.opacity = val.toString();\n                return;\n            }\n            this.getContainer().style.opacity = null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ZoomControlDirective.prototype, \"display\", {\n        get: function () {\n            return !!this._map && this.getContainer().style.display !== \"none\";\n        },\n        /**\n         * Two-Way bound property for the display state.\n         * Use it with `<yaga-zoom-control [(display)]=\"someValue\">`\n         * or `<yaga-zoom-control [display]=\"someValue\">`\n         */\n        set: function (val) {\n            if (!this._map) {\n                // No map available...\n                return;\n            }\n            if (val) {\n                this.getContainer().style.display = \"\";\n                return;\n            }\n            this.getContainer().style.display = \"none\";\n            return;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ZoomControlDirective.prototype, \"position\", {\n        get: function () {\n            return this.getPosition();\n        },\n        /**\n         * Two-Way bound property for the position.\n         * Use it with `<yaga-zoom-control [(position)]=\"someValue\">`\n         * or `<yaga-zoom-control [position]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#control-zoom-position Original Leaflet documentation\n         */\n        set: function (val) {\n            this.setPosition(val);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ZoomControlDirective.prototype, \"zIndex\", {\n        get: function () {\n            var val = this.getContainer().style.zIndex;\n            if (typeof val === \"string\") {\n                return parseInt(val, 10);\n            }\n        },\n        /**\n         * Two-Way bound property for the zIndex of the control.\n         * Use it with `<yaga-zoom-control [(zIndex)]=\"someValue\">`\n         * or `<yaga-zoom-control (zIndexChange)=\"processEvent($event)\">`\n         */\n        set: function (zIndex) {\n            if (zIndex === undefined) {\n                zIndex = 0;\n            }\n            this.getContainer().style.zIndex = zIndex.toString();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ZoomControlDirective.prototype, \"zoomInText\", {\n        get: function () {\n            return this.options.zoomInText;\n        },\n        /**\n         * Input for the text shown on the zoom in button.\n         * Use it with `<yaga-zoom-control [(zoomInText)]=\"someValue\">`\n         * or `<yaga-zoom-control [zoomInText]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#control-zoom-zoomintext Original Leaflet documentation\n         */\n        set: function (val) {\n            this.options.zoomInText = val;\n            if (typeof val === \"string\") {\n                this._zoomInButton.textContent = val;\n                return;\n            }\n            this._zoomInButton.textContent = null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ZoomControlDirective.prototype, \"zoomInTitle\", {\n        get: function () {\n            return this.options.zoomInTitle;\n        },\n        /**\n         * Input for the title connected to the zoom in button.\n         * Use it with `<yaga-zoom-control [(zoomInTitle)]=\"someValue\">`\n         * or `<yaga-zoom-control [zoomInTitle]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#control-zoom-zoomintitle Original Leaflet documentation\n         */\n        set: function (val) {\n            this.options.zoomInTitle = val;\n            if (typeof val === \"string\") {\n                this._zoomInButton.setAttribute(\"title\", val);\n                return;\n            }\n            this._zoomInButton.removeAttribute(\"title\");\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ZoomControlDirective.prototype, \"zoomOutText\", {\n        get: function () {\n            return this.options.zoomOutText;\n        },\n        /**\n         * Input for the text shown on the zoom out button.\n         * Use it with `<yaga-zoom-control [(zoomOutText)]=\"someValue\">`\n         * or `<yaga-zoom-control [zoomOutText]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#control-zoom-zoomouttext Original Leaflet documentation\n         */\n        set: function (val) {\n            this.options.zoomOutText = val;\n            if (typeof val === \"string\") {\n                this._zoomOutButton.textContent = val;\n                return;\n            }\n            this._zoomOutButton.textContent = null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ZoomControlDirective.prototype, \"zoomOutTitle\", {\n        get: function () {\n            return this.options.zoomOutTitle;\n        },\n        /**\n         * Input for the title connected to the zoom out button.\n         * Use it with `<yaga-zoom-control [(zoomOutTitle)]=\"someValue\">`\n         * or `<yaga-zoom-control [zoomOutTitle]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#control-zoom-zoomouttitle Original Leaflet documentation\n         */\n        set: function (val) {\n            this.options.zoomOutTitle = val;\n            if (typeof val === \"string\") {\n                this._zoomOutButton.setAttribute(\"title\", val);\n                return;\n            }\n            this._zoomOutButton.removeAttribute(\"title\");\n        },\n        enumerable: true,\n        configurable: true\n    });\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], ZoomControlDirective.prototype, \"displayChange\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], ZoomControlDirective.prototype, \"zIndexChange\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], ZoomControlDirective.prototype, \"positionChange\", void 0);\n    __decorate([\n        core_1.Output(\"add\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], ZoomControlDirective.prototype, \"addEvent\", void 0);\n    __decorate([\n        core_1.Output(\"remove\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], ZoomControlDirective.prototype, \"removeEvent\", void 0);\n    __decorate([\n        core_1.Output(\"click\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], ZoomControlDirective.prototype, \"clickEvent\", void 0);\n    __decorate([\n        core_1.Output(\"dblclick\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], ZoomControlDirective.prototype, \"dblclickEvent\", void 0);\n    __decorate([\n        core_1.Output(\"mousedown\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], ZoomControlDirective.prototype, \"mousedownEvent\", void 0);\n    __decorate([\n        core_1.Output(\"mouseover\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], ZoomControlDirective.prototype, \"mouseoverEvent\", void 0);\n    __decorate([\n        core_1.Output(\"mouseout\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], ZoomControlDirective.prototype, \"mouseoutEvent\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], ZoomControlDirective.prototype, \"opacity\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean),\n        __metadata(\"design:paramtypes\", [Boolean])\n    ], ZoomControlDirective.prototype, \"display\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String),\n        __metadata(\"design:paramtypes\", [String])\n    ], ZoomControlDirective.prototype, \"position\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], ZoomControlDirective.prototype, \"zIndex\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], ZoomControlDirective.prototype, \"zoomInText\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], ZoomControlDirective.prototype, \"zoomInTitle\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], ZoomControlDirective.prototype, \"zoomOutText\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], ZoomControlDirective.prototype, \"zoomOutTitle\", null);\n    ZoomControlDirective = __decorate([\n        core_1.Directive({\n            selector: \"yaga-zoom-control\",\n        }),\n        __metadata(\"design:paramtypes\", [map_provider_1.MapProvider])\n    ], ZoomControlDirective);\n    return ZoomControlDirective;\n}(leaflet_1.Control.Zoom));\nexports.ZoomControlDirective = ZoomControlDirective;\n"]}