{"version":3,"file":"circle-marker.directive.d.ts","sources":["circle-marker.directive.d.ts"],"names":[],"mappingssourcesContent":["import { AfterContentInit, EventEmitter, OnDestroy } from \"@angular/core\";\nimport { Feature as GeoJSONFeature, Point as GeoJSONPoint } from \"geojson\";\nimport { CircleMarker, CircleMarkerOptions, FillRule, LatLng, LatLngLiteral, LatLngTuple, LeafletEvent, LeafletMouseEvent, LineCapShape, LineJoinShape, PathOptions, PopupEvent, TooltipEvent } from \"leaflet\";\nimport { LayerGroupProvider } from \"./layer-group.provider\";\nimport { LayerProvider } from \"./layer.provider\";\n/**\n * Angular2 directive for circle-markers of Leaflet.\n *\n * *You can use this directive in an Angular2 template after importing `YagaModule`.*\n *\n * How to use in a template:\n * ```html\n * <yaga-map>\n *     <yaga-circle-marker\n *         [(display)]=\"...\"\n *         [(stroke)]=\"...\"\n *         [(color)]=\"...\"\n *         [(weight)]=\"...\"\n *         [(opacity)]=\"...\"\n *         [(lineCap)]=\"...\"\n *         [(lineJoin)]=\"...\"\n *         [(dashArray)]=\"...\"\n *         [(dashOffset)]=\"...\"\n *         [(fill)]=\"...\"\n *         [(fillColor)]=\"...\"\n *         [(fillOpacity)]=\"...\"\n *         [(fillRule)]=\"...\"\n *         [(className)]=\"...\"\n *         [(lat)]=\"...\"\n *         [(lng)]=\"...\"\n *         [(radius)]=\"...\"\n *\n *         (click)=\"...\"\n *         (dblclick)=\"...\"\n *         (mousedown)=\"...\"\n *         (mouseup)=\"...\"\n *         (mouseover)=\"...\"\n *         (mouseout)=\"...\"\n *         (mousemove)=\"...\"\n *         (contextmenu)=\"...\"\n *         (keypress)=\"...\"\n *         (preclick)=\"...\"\n *\n *         [interactive]=\"...\"\n *         [properties]=\"...\"\n *         >\n *     </yaga-circle-marker>\n * </yaga-map>\n * ```\n *\n * @link http://leafletjs.com/reference-1.2.0.html#circlemarker Original Leaflet documentation\n * @link https://leaflet-ng2.yagajs.org/latest/browser-test?grep=Circle-Marker%20Directive Unit-Test\n * @link https://leaflet-ng2.yagajs.org/latest/coverage/lcov-report/lib/circle-marker.directive.js.html\n * Test coverage\n * @link https://leaflet-ng2.yagajs.org/latest/typedoc/classes/circle-marker.directive.js.html API documentation\n * @example https://leaflet-ng2.yagajs.org/latest/examples/circle-marker-directive/\n */\nexport declare class CircleMarkerDirective<T> extends CircleMarker implements OnDestroy, AfterContentInit {\n    protected layerGroupProvider: LayerGroupProvider;\n    /**\n     * Two-Way bound property for the display status of the geometry.\n     * Use it with `<yaga-circle-marker [(display)]=\"someValue\">`\n     * or `<yaga-circle-marker (displayChange)=\"processEvent($event)\">`\n     */\n    displayChange: EventEmitter<boolean>;\n    /**\n     * Two-Way bound property for the stroke state of the geometry.\n     * Use it with `<yaga-circle-marker [(stroke)]=\"someValue\">`\n     * or `<yaga-circle-marker (strokeChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#circlemarker-stroke Original Leaflet documentation\n     */\n    strokeChange: EventEmitter<boolean>;\n    /**\n     * Two-Way bound property for the line-color of the geometry.\n     * Use it with `<yaga-circle-marker [(color)]=\"someValue\">`\n     * or `<yaga-circle-marker (colorChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#circlemarker-color Original Leaflet documentation\n     */\n    colorChange: EventEmitter<string>;\n    /**\n     * Two-Way bound property for the weight of the geometry.\n     * Use it with `<yaga-circle-marker [(weight)]=\"someValue\">`\n     * or `<yaga-circle-marker (weightChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#circlemarker-weight Original Leaflet documentation\n     */\n    weightChange: EventEmitter<number>;\n    /**\n     * Two-Way bound property for the opacity of the geometry.\n     * Use it with `<yaga-circle-marker [(opacity)]=\"someValue\">`\n     * or `<yaga-circle-marker (opacityChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#circlemarker-opacity Original Leaflet documentation\n     */\n    opacityChange: EventEmitter<number>;\n    /**\n     * Two-Way bound property for the lineCap of the geometry.\n     * Use it with `<yaga-circle-marker [(lineCap)]=\"someValue\">`\n     * or `<yaga-circle-marker (lineCapChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#circlemarker-linecap Original Leaflet documentation\n     */\n    lineCapChange: EventEmitter<string>;\n    /**\n     * Two-Way bound property for the lineJoin of the geometry.\n     * Use it with `<yaga-circle-marker [(lineJoin)]=\"someValue\">`\n     * or `<yaga-circle-marker (lineJoinChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#circlemarker-linejoin Original Leaflet documentation\n     */\n    lineJoinChange: EventEmitter<string>;\n    /**\n     * Two-Way bound property for the dashArray of the geometry.\n     * Use it with `<yaga-circle-marker [(dashArray)]=\"someValue\">`\n     * or `<yaga-circle-marker (dashArrayChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#circlemarker-dasharray Original Leaflet documentation\n     */\n    dashArrayChange: EventEmitter<string>;\n    /**\n     * Two-Way bound property for the dashOffset of the geometry.\n     * Use it with `<yaga-circle-marker [(dashOffset)]=\"someValue\">`\n     * or `<yaga-circle-marker (dashOffsetChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#circlemarker-dashoffset Original Leaflet documentation\n     */\n    dashOffsetChange: EventEmitter<string>;\n    /**\n     * Two-Way bound property for the fill state of the geometry.\n     * Use it with `<yaga-circle-marker [(fill)]=\"someValue\">`\n     * or `<yaga-circle-marker (fillChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#circlemarker-fill Original Leaflet documentation\n     */\n    fillChange: EventEmitter<boolean>;\n    /**\n     * Two-Way bound property for the fill-color of the geometry.\n     * Use it with `<yaga-circle-marker [(fillColor)]=\"someValue\">`\n     * or `<yaga-circle-marker (fillColorChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#circlemarker-fillcolor Original Leaflet documentation\n     */\n    fillColorChange: EventEmitter<string>;\n    /**\n     * Two-Way bound property for the fill-opacity of the geometry.\n     * Use it with `<yaga-circle-marker [(fillOpacity)]=\"someValue\">`\n     * or `<yaga-circle-marker (fillOpacityChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#circlemarker-fillopacity Original Leaflet documentation\n     */\n    fillOpacityChange: EventEmitter<number>;\n    /**\n     * Two-Way bound property for the fill-rule of the geometry.\n     * Use it with `<yaga-circle-marker [(fillRule)]=\"someValue\">`\n     * or `<yaga-circle-marker (fillRuleChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#circlemarker-fillrule Original Leaflet documentation\n     */\n    fillRuleChange: EventEmitter<string>;\n    /**\n     * Two-Way bound property for the className of the geometry.\n     * Use it with `<yaga-circle-marker [(className)]=\"someValue\">`\n     * or `<yaga-circle-marker (classNameChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#circlemarker-classname Original Leaflet documentation\n     */\n    classNameChange: EventEmitter<string>;\n    /**\n     * Two-Way bound property for the css-style of the geometry.\n     * Use it with `<yaga-circle-marker [(style)]=\"someValue\">`\n     * or `<yaga-circle-marker (styleChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#circlemarker-setstyle Original Leaflet documentation\n     */\n    styleChange: EventEmitter<PathOptions>;\n    /**\n     * Two-Way bound property for the latlng-position of the geometry.\n     * Use it with `<yaga-circle-marker [(position)]=\"someValue\">`\n     * or `<yaga-circle-marker (positionChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#circlemarker-setlatlng Original Leaflet documentation\n     */\n    positionChange: EventEmitter<LatLng>;\n    /**\n     * Two-Way bound property for the latitude of the geometry.\n     * Use it with `<yaga-circle-marker [(lat)]=\"someValue\">`\n     * or `<yaga-circle-marker (latChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#circlemarker-setlatlng Original Leaflet documentation\n     */\n    latChange: EventEmitter<number>;\n    /**\n     * Two-Way bound property for the longitude of the geometry.\n     * Use it with `<yaga-circle-marker [(lng)]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#circlemarker-setlatlng Original Leaflet documentation\n     * or `<yaga-circle-marker (lngChange)=\"processEvent($event)\">`\n     */\n    lngChange: EventEmitter<number>;\n    /**\n     * Two-Way bound property for the radius of the geometry.\n     * Use it with `<yaga-circle-marker [(radius)]=\"someValue\">`\n     * or `<yaga-circle-marker (radiusChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#circlemarker-setradius Original Leaflet documentation\n     */\n    radiusChange: EventEmitter<number>;\n    /**\n     * Two-Way bound property for the geometry represented as GeoJSON.\n     * Use it with `<yaga-circle-marker [(geoJSON)]=\"someValue\">`\n     * or `<yaga-circle-marker (geoJSONChange)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#circlemarker-togeojson Original Leaflet documentation\n     */\n    geoJSONChange: EventEmitter<GeoJSONFeature<GeoJSON.Point, T>>;\n    /**\n     * From leaflet fired add event.\n     * Use it with `<yaga-circle-marker (add)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#circlemarker-add Original Leaflet documentation\n     */\n    addEvent: EventEmitter<LeafletEvent>;\n    /**\n     * From leaflet fired remove event.\n     * Use it with `<yaga-circle-marker (remove)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#circlemarker-remove Original Leaflet documentation\n     */\n    removeEvent: EventEmitter<LeafletEvent>;\n    /**\n     * From leaflet fired popupopen event.\n     * Use it with `<yaga-circle-marker (popupopen)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#circlemarker-popupopen Original Leaflet documentation\n     */\n    popupopenEvent: EventEmitter<PopupEvent>;\n    /**\n     * From leaflet fired popupclose event.\n     * Use it with `<yaga-circle-marker (popupclose)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#circlemarker-popupclose Original Leaflet documentation\n     */\n    popupcloseEvent: EventEmitter<PopupEvent>;\n    /**\n     * From leaflet fired tooltipopen event.\n     * Use it with `<yaga-circle-marker (tooltipopen)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#circlemarker-tooltipopen Original Leaflet documentation\n     */\n    tooltipopenEvent: EventEmitter<TooltipEvent>;\n    /**\n     * From leaflet fired tooltipclose event.\n     * Use it with `<yaga-circle-marker (tooltipclose)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#circlemarker-tooltipclose Original Leaflet documentation\n     */\n    tooltipcloseEvent: EventEmitter<TooltipEvent>;\n    /**\n     * From leaflet fired click event.\n     * Use it with `<yaga-circle-marker (click)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#circlemarker-click Original Leaflet documentation\n     */\n    clickEvent: EventEmitter<LeafletMouseEvent>;\n    /**\n     * From leaflet fired dblclick event.\n     * Use it with `<yaga-circle-marker (dblclick)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#circlemarker-dblclick Original Leaflet documentation\n     */\n    dblclickEvent: EventEmitter<LeafletMouseEvent>;\n    /**\n     * From leaflet fired mousedown event.\n     * Use it with `<yaga-circle-marker (mousedown)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#circlemarker-mousedown Original Leaflet documentation\n     */\n    mousedownEvent: EventEmitter<LeafletMouseEvent>;\n    /**\n     * From leaflet fired mouseover event.\n     * Use it with `<yaga-circle-marker (mouseover)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#circlemarker-mouseover Original Leaflet documentation\n     */\n    mouseoverEvent: EventEmitter<LeafletMouseEvent>;\n    /**\n     * From leaflet fired mouseout event.\n     * Use it with `<yaga-circle-marker (mouseout)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#circlemarker-mouseout Original Leaflet documentation\n     */\n    mouseoutEvent: EventEmitter<LeafletMouseEvent>;\n    /**\n     * From leaflet fired contextmenu event.\n     * Use it with `<yaga-circle-marker (contextmenu)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#circlemarker-contextmenu Original Leaflet documentation\n     */\n    contextmenuEvent: EventEmitter<LeafletMouseEvent>;\n    feature: GeoJSONFeature<GeoJSONPoint>;\n    private initialized;\n    constructor(layerGroupProvider: LayerGroupProvider, layerProvider: LayerProvider);\n    /**\n     * Internal method that provides the initialization of the child popup or tooltip\n     */\n    ngAfterContentInit(): void;\n    /**\n     * Internal method to provide the removal of the layer in Leaflet, when removing it from the Angular template\n     */\n    ngOnDestroy(): void;\n    /**\n     * Derived method of the original setLatLng.\n     * @link http://leafletjs.com/reference-1.2.0.html#circlemarker-setlatlng Original Leaflet documentation\n     */\n    setLatLng(val: LatLng | LatLngTuple | LatLngLiteral): this;\n    /**\n     * Two-Way bound property for the position of the circle.\n     * Use it with `<yaga-circle-marker [(position)]=\"someValue\">` or `<yaga-circle-marker [position]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#circlemarker-l-circlemarker Original Leaflet documentation\n     */\n    position: LatLng | LatLngTuple | LatLngLiteral;\n    /**\n     * Two-Way bound property for the latitude (position) of the circle.\n     * Use it with `<yaga-circle-marker [(lat)]=\"someValue\">` or `<yaga-circle-marker [lat]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#circlemarker-l-circlemarker Original Leaflet documentation\n     */\n    lat: number;\n    /**\n     * Two-Way bound property for the longitude (position) of the circle.\n     * Use it with `<yaga-circle-marker [(lng)]=\"someValue\">` or `<yaga-circle-marker [lng]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#circlemarker-l-circlemarker Original Leaflet documentation\n     */\n    lng: number;\n    /**\n     * Derived method of the original setRadius.\n     * @link http://leafletjs.com/reference-1.2.0.html#circlemarker-setradius Original Leaflet documentation\n     */\n    setRadius(val: number): this;\n    /**\n     * Two-Way bound property for the radius of the circle.\n     * Use it with `<yaga-circle-marker [(radius)]=\"someValue\">` or `<yaga-circle-marker [radius]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#circlemarker-radius Original Leaflet documentation\n     */\n    radius: number;\n    /**\n     * Two-Way bound property for the geoJSON data.\n     * Use it with `<yaga-circle-marker [(geoJSON)]=\"someValue\">` or `<yaga-circle-marker [geoJSONChange]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#circlemarker-togeojson Original Leaflet documentation\n     */\n    geoJSON: GeoJSONFeature<GeoJSON.Point, T>;\n    /**\n     * Derived method of the original setStyle.\n     * @link http://leafletjs.com/reference-1.2.0.html#circlemarker-setstyle Original Leaflet documentation\n     */\n    setStyle(style: PathOptions): this;\n    /**\n     * Two-Way bound property for the opacity.\n     * Use it with `<yaga-circle-marker [(opacity)]=\"someValue\">` or `<yaga-circle-marker [opacityChange]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#circlemarker-opacity Original Leaflet documentation\n     */\n    opacity: number | undefined;\n    /**\n     * Two-Way bound property for the stroke.\n     * Use it with `<yaga-circle-marker [(stroke)]=\"someValue\">` or `<yaga-circle-marker [strokeChange]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#circlemarker-stroke Original Leaflet documentation\n     */\n    stroke: boolean;\n    /**\n     * Two-Way bound property for the color.\n     * Use it with `<yaga-circle-marker [(color)]=\"someValue\">` or `<yaga-circle-marker [colorChange]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#circlemarker-color Original Leaflet documentation\n     */\n    color: string | undefined;\n    /**\n     * Two-Way bound property for the weight.\n     * Use it with `<yaga-circle-marker [(weight)]=\"someValue\">` or `<yaga-circle-marker [weightChange]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#circlemarker-weight Original Leaflet documentation\n     */\n    weight: number | undefined;\n    /**\n     * Two-Way bound property for the lineCap.\n     * Use it with `<yaga-circle-marker [(lineCap)]=\"someValue\">` or `<yaga-circle-marker [lineCapChange]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#circlemarker-linecap Original Leaflet documentation\n     */\n    lineCap: LineCapShape | undefined;\n    /**\n     * Two-Way bound property for the lineJoin.\n     * Use it with `<yaga-circle-marker [(lineJoin)]=\"someValue\">`\n     * or `<yaga-circle-marker [lineJoinChange]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#circlemarker-linejoin Original Leaflet documentation\n     */\n    lineJoin: LineJoinShape | undefined;\n    /**\n     * Two-Way bound property for the dashArray.\n     * Use it with `<yaga-circle-marker [(dashArray)]=\"someValue\">`\n     * or `<yaga-circle-marker [dashArrayChange]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#circlemarker-dasharray Original Leaflet documentation\n     */\n    dashArray: string | undefined;\n    /**\n     * Two-Way bound property for the dashOffset.\n     * Use it with `<yaga-circle-marker [(dashOffset)]=\"someValue\">`\n     * or `<yaga-circle-marker [dashOffsetChange]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#circlemarker-dashoffset Original Leaflet documentation\n     */\n    dashOffset: string | undefined;\n    /**\n     * Two-Way bound property for the fill.\n     * Use it with `<yaga-circle-marker [(fill)]=\"someValue\">` or `<yaga-circle-marker [fillChange]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#circlemarker-fill Original Leaflet documentation\n     */\n    fill: boolean;\n    /**\n     * Two-Way bound property for the fillColor.\n     * Use it with `<yaga-circle-marker [(fillColor)]=\"someValue\">`\n     * or `<yaga-circle-marker [fillColorChange]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#circlemarker-fillcolor Original Leaflet documentation\n     */\n    fillColor: string | undefined;\n    /**\n     * Two-Way bound property for the fillOpacity.\n     * Use it with `<yaga-circle-marker [(fillOpacity)]=\"someValue\">`\n     * or `<yaga-circle-marker [fillOpacityChange]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#circlemarker-fillopacity Original Leaflet documentation\n     */\n    fillOpacity: number | undefined;\n    /**\n     * Two-Way bound property for the fillRule.\n     * Use it with `<yaga-circle-marker [(fillRule)]=\"someValue\">`\n     * or `<yaga-circle-marker [fillRuleChange]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#circlemarker-fillrule Original Leaflet documentation\n     */\n    fillRule: FillRule | undefined;\n    /**\n     * Two-Way bound property for the className.\n     * Use it with `<yaga-circle-marker [(className)]=\"someValue\">`\n     * or `<yaga-circle-marker [classNameChange]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#circlemarker-classname Original Leaflet documentation\n     */\n    className: string | undefined;\n    /**\n     * Two-Way bound property for the opacity.\n     * Use it with `<yaga-circle-marker [(style)]=\"someValue\">` or `<yaga-circle-marker [styleChange]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#circlemarker-style Original Leaflet documentation\n     */\n    style: CircleMarkerOptions;\n    /**\n     * Two-Way bound property for the display state.\n     * Use it with `<yaga-circle-marker [(display)]=\"someValue\">` or `<yaga-circle-marker [displayChange]=\"someValue\">`\n     */\n    display: boolean;\n    /**\n     * Input for the GeoJSON properties.\n     * Use it with `<yaga-circle-marker [interactive]=\"someValue\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#tilelayer-interactive Original Leaflet documentation\n     */\n    interactive: boolean;\n    properties: T;\n}\n"]}