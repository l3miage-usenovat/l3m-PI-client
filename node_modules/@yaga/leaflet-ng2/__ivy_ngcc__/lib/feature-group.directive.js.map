{"version":3,"file":"feature-group.directive.js","sources":["feature-group.directive.js"],"names":[],"mappingswCAKO;AACP;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAA8B;AAC9B;AACA;AACA;AACA","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar leaflet_1 = require(\"leaflet\");\nvar layer_group_provider_1 = require(\"./layer-group.provider\");\nvar layer_provider_1 = require(\"./layer.provider\");\n/**\n * Angular2 directive for Leaflet layer-groups.\n *\n * *You can use this directive in an Angular2 template after importing `YagaModule`.*\n *\n * How to use in a template:\n * ```html\n * <yaga-map>\n *     <yaga-feature-group\n *         [(display)]=\"...\"\n *\n *         (add)=\"...\"\n *         (remove)=\"...\"\n *         (popupopen)=\"...\"\n *         (popupclose)=\"...\"\n *         (tooltipopen)=\"...\"\n *         (tooltipclose)=\"...\"\n *\n *         [attribution]=\"...\">\n *         <!-- place other layers here... -->\n *     </yaga-feature-group>\n * </yaga-map>\n * ```\n *\n * @link http://leafletjs.com/reference-1.2.0.html#featuregroup Original Leaflet documentation\n * @link https://leaflet-ng2.yagajs.org/latest/browser-test?grep=Feature-Group%20Directive Unit-Test\n * @link https://leaflet-ng2.yagajs.org/latest/coverage/lcov-report/lib/feature-group.directive.js.html Test coverage\n * @link https://leaflet-ng2.yagajs.org/latest/typedoc/classes/featuregroupdirective.html API documentation\n * @example https://leaflet-ng2.yagajs.org/latest/examples/feature-group-directive\n */\nvar FeatureGroupDirective = /** @class */ (function (_super) {\n    __extends(FeatureGroupDirective, _super);\n    /**\n     * From leaflet fired click event.\n     * Use it with `<yaga-feature-group (click)=\"processEvent($event)\">`\n     * @link http://leafletjs.com/reference-1.2.0.html#featuregroup-click Original Leaflet documentation\n     */\n    function FeatureGroupDirective(parentLayerGroupProvider, layerGroupProvider, layerProvider) {\n        var _this = _super.call(this) || this;\n        _this.parentLayerGroupProvider = parentLayerGroupProvider;\n        /**\n         * Two-Way bound property for the display status of the layer.\n         * Use it with `<yaga-feature-group [(display)]=\"someValue\">`\n         * or `<yaga-feature-group (displayChange)=\"processEvent($event)\">`\n         */\n        _this.displayChange = new core_1.EventEmitter();\n        /**\n         * From leaflet fired add event.\n         * Use it with `<yaga-feature-group (layeradd)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#featuregroup-add Original Leaflet documentation\n         */\n        _this.layeraddEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired remove event.\n         * Use it with `<yaga-feature-group (layerremove)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#featuregroup-remove Original Leaflet documentation\n         */\n        _this.layerremoveEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired add event.\n         * Use it with `<yaga-feature-group (add)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#featuregroup-add Original Leaflet documentation\n         */\n        _this.addEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired remove event.\n         * Use it with `<yaga-feature-group (remove)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#featuregroup-remove Original Leaflet documentation\n         */\n        _this.removeEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired popupopen event.\n         * Use it with `<yaga-feature-group (popupopen)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#featuregroup-popupopen Original Leaflet documentation\n         */\n        _this.popupopenEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired popupclose event.\n         * Use it with `<yaga-feature-group (popupclose)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#featuregroup-popupclose Original Leaflet documentation\n         */\n        _this.popupcloseEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired tooltipopen event.\n         * Use it with `<yaga-feature-group (tooltipopen)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#featuregroup-tooltipopen Original Leaflet documentation\n         */\n        _this.tooltipopenEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired tooltipclose event.\n         * Use it with `<yaga-feature-group (tooltipclose)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#featuregroup-tooltipclose Original Leaflet documentation\n         */\n        _this.tooltipcloseEvent = new core_1.EventEmitter();\n        layerProvider.ref = _this;\n        layerGroupProvider.ref = _this;\n        _this.on(\"remove\", function () {\n            _this._map = null; // This seems to fix a bug in Leaflet\n            _this.displayChange.emit(false);\n        });\n        _this.on(\"add\", function () {\n            _this.displayChange.emit(true);\n        });\n        _this.addTo(_this.parentLayerGroupProvider.ref);\n        // Events\n        _this.on(\"layeradd\", function (event) {\n            _this.layeraddEvent.emit(event);\n        });\n        _this.on(\"layerremove\", function (event) {\n            _this.layerremoveEvent.emit(event);\n        });\n        _this.on(\"add\", function (event) {\n            _this.addEvent.emit(event);\n        });\n        _this.on(\"remove\", function (event) {\n            _this.removeEvent.emit(event);\n        });\n        _this.on(\"popupopen\", function (event) {\n            _this.popupopenEvent.emit(event);\n        });\n        _this.on(\"popupclose\", function (event) {\n            _this.popupcloseEvent.emit(event);\n        });\n        _this.on(\"tooltipopen\", function (event) {\n            _this.tooltipopenEvent.emit(event);\n        });\n        _this.on(\"tooltipclose\", function (event) {\n            _this.tooltipcloseEvent.emit(event);\n        });\n        return _this;\n    }\n    /**\n     * This function gets called from Angular on destroy of the html-component.\n     * @link https://angular.io/docs/ts/latest/api/core/index/OnDestroy-class.html\n     */\n    FeatureGroupDirective.prototype.ngOnDestroy = function () {\n        this.removeFrom(this.parentLayerGroupProvider.ref);\n    };\n    Object.defineProperty(FeatureGroupDirective.prototype, \"display\", {\n        /**\n         * Two-Way bound property for the display status of the layer.\n         * Use it with `<yaga-feature-group [(display)]=\"someValue\">` or `<yaga-feature-group [display]=\"someValue\">`\n         */\n        get: function () {\n            return !!(this._map);\n        },\n        /**\n         * Two-Way bound property for the display status of the layer.\n         * Use it with `<yaga-feature-group [(display)]=\"someValue\">` or `<yaga-feature-group [display]=\"someValue\">`\n         */\n        set: function (val) {\n            if (val) {\n                this.addTo(this.parentLayerGroupProvider.ref);\n                return;\n            }\n            // TODO: proof and maybe enhance typedefinition\n            this.parentLayerGroupProvider.ref.removeLayer(this);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FeatureGroupDirective.prototype, \"attribution\", {\n        get: function () {\n            return this.getAttribution() || \"\";\n        },\n        /**\n         * Input for the attribution.\n         * Use it with `<yaga-feature-group [attribution]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#featuregroup-attribution Original Leaflet documentation\n         */\n        set: function (val) {\n            if (this._map && this._map.attributionControl) {\n                if (this.getAttribution()) {\n                    this._map.attributionControl\n                        .removeAttribution(this.getAttribution());\n                }\n                this._map.attributionControl.addAttribution(val);\n            }\n            // TODO: add options to the official type definition\n            this.options.attribution = val;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    FeatureGroupDirective.prototype.removeFrom = function (map) {\n        this.displayChange.emit(false);\n        return _super.prototype.removeFrom.call(this, map);\n    };\n    Object.defineProperty(FeatureGroupDirective.prototype, \"style\", {\n        get: function () {\n            return {};\n        },\n        /**\n         * Input for the style.\n         * Use it with `<yaga-feature-group [style]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#featuregroup-setstyle Original Leaflet documentation\n         */\n        set: function (val) {\n            this.setStyle(val);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], FeatureGroupDirective.prototype, \"displayChange\", void 0);\n    __decorate([\n        core_1.Output(\"layeradd\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], FeatureGroupDirective.prototype, \"layeraddEvent\", void 0);\n    __decorate([\n        core_1.Output(\"layerremove\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], FeatureGroupDirective.prototype, \"layerremoveEvent\", void 0);\n    __decorate([\n        core_1.Output(\"add\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], FeatureGroupDirective.prototype, \"addEvent\", void 0);\n    __decorate([\n        core_1.Output(\"remove\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], FeatureGroupDirective.prototype, \"removeEvent\", void 0);\n    __decorate([\n        core_1.Output(\"popupopen\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], FeatureGroupDirective.prototype, \"popupopenEvent\", void 0);\n    __decorate([\n        core_1.Output(\"popupclose\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], FeatureGroupDirective.prototype, \"popupcloseEvent\", void 0);\n    __decorate([\n        core_1.Output(\"tooltipopen\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], FeatureGroupDirective.prototype, \"tooltipopenEvent\", void 0);\n    __decorate([\n        core_1.Output(\"tooltipclose\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], FeatureGroupDirective.prototype, \"tooltipcloseEvent\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean),\n        __metadata(\"design:paramtypes\", [Boolean])\n    ], FeatureGroupDirective.prototype, \"display\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String),\n        __metadata(\"design:paramtypes\", [String])\n    ], FeatureGroupDirective.prototype, \"attribution\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], FeatureGroupDirective.prototype, \"style\", null);\n    FeatureGroupDirective = __decorate([\n        core_1.Directive({\n            providers: [layer_group_provider_1.LayerGroupProvider, layer_provider_1.LayerProvider],\n            selector: \"yaga-feature-group\",\n        }),\n        __param(0, core_1.SkipSelf()),\n        __metadata(\"design:paramtypes\", [layer_group_provider_1.LayerGroupProvider,\n            layer_group_provider_1.LayerGroupProvider,\n            layer_provider_1.LayerProvider])\n    ], FeatureGroupDirective);\n    return FeatureGroupDirective;\n}(leaflet_1.FeatureGroup));\nexports.FeatureGroupDirective = FeatureGroupDirective;\n"]}