{"version":3,"file":"tooltip.directive.js","sources":["tooltip.directive.js"],"names":[],"mappingsmCAIO;AACP;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAAyB;AACzB;AACA;AACA;AACA","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar leaflet_1 = require(\"leaflet\");\nvar layer_provider_1 = require(\"./layer.provider\");\n/**\n * Angular2 directive for Leaflet tooltips.\n *\n * *You can use this directive in an Angular2 template after importing `YagaModule`.*\n *\n * How to use in a template:\n * ```html\n * <yaga-map>\n *     <yaga-marker>\n *         <yaga-tooltip\n *             [(content)]=\"...\"\n *             [(opened)]=\"...\"\n *             [(lat)]=\"...\"\n *             [(lng)]=\"...\"\n *             [(position)]=\"...\"\n *             [(opacity)]=\"...\"\n *\n *             (open)=\"...\"\n *             (close)=\"...\"\n *\n *             [className]=\"...\"\n *             [pane]=\"...\"\n *             [interactive]=\"...\"\n *             [sticky]=\"...\"\n *             [direction]=\"...\"\n *             [permanent]=\"...\"\n *             [offset]=\"...\"\n *             >\n *             <p>You can pass your content right here!</p>\n *         </yaga-tooltip>\n *     </yaga-marker>\n * </yaga-map>\n * ```\n */\nvar TooltipDirective = /** @class */ (function (_super) {\n    __extends(TooltipDirective, _super);\n    function TooltipDirective(layerProvider, elementRef) {\n        var _this = _super.call(this) || this;\n        _this.layerProvider = layerProvider;\n        /**\n         * Two-Way bound property for the content of a tooltip.\n         * Use it with `<yaga-tooltip [(content)]=\"someValue\">` or `<yaga-tooltip (contentChange)=\"processEvent($event)\">`\n         *\n         * You can also pass the content directly within the web-component as view-content\n         * @link http://leafletjs.com/reference-1.2.0.html#tooltip-setcontent Original Leaflet documentation\n         */\n        _this.contentChange = new core_1.EventEmitter();\n        /**\n         * Two-Way bound property for the state of being opened.\n         * Use it with `<yaga-tooltip [(opened)]=\"someValue\">` or `<yaga-tooltip (openedChange)=\"processEvent($event)\">`\n         *\n         * You can also use the `tooltipOpened` property in the parent directives\n         * @link http://leafletjs.com/reference-1.2.0.html#tooltip-openon Original Leaflet documentation\n         */\n        _this.openedChange = new core_1.EventEmitter();\n        /**\n         * Two-Way bound property for the latitude position of the tooltip.\n         * Use it with `<yaga-tooltip [(lat)]=\"someValue\">` or `<yaga-tooltip (latChange)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tooltip-setlatlng Original Leaflet documentation\n         */\n        _this.latChange = new core_1.EventEmitter();\n        /**\n         * Two-Way bound property for the longitude position of the tooltip.\n         * Use it with `<yaga-tooltip [(lng)]=\"someValue\">` or `<yaga-tooltip (lngChange)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tooltip-setlatlng Original Leaflet documentation\n         */\n        _this.lngChange = new core_1.EventEmitter();\n        /**\n         * Two-Way bound property for the position (LatLng) of the tooltip.\n         * Use it with `<yaga-tooltip [(position)]=\"someValue\">` or `<yaga-tooltip (positionChange)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tooltip-setlatlng Original Leaflet documentation\n         */\n        _this.positionChange = new core_1.EventEmitter();\n        /**\n         * Two-Way bound property for the opacity of the tooltip.\n         * Use it with `<yaga-tooltip [(opacity)]=\"someValue\">` or `<yaga-tooltip (opacityChange)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tooltip-setlatlng Original Leaflet documentation\n         */\n        _this.opacityChange = new core_1.EventEmitter();\n        /**\n         * From leaflet fired open event.\n         * Use it with `<yaga-tooltip (open)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tooltip-tooltipopen Original Leaflet documentation\n         */\n        _this.openEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired close event.\n         * Use it with `<yaga-tooltip (close)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tooltip-tooltipclose Original Leaflet documentation\n         */\n        _this.closeEvent = new core_1.EventEmitter();\n        _this.setContent(elementRef.nativeElement);\n        _this.on(\"add\", function (event) {\n            _this.openEvent.emit(event);\n            _this.openedChange.emit(true);\n        });\n        _this.on(\"remove\", function (event) {\n            _this.closeEvent.emit(event);\n            _this.openedChange.emit(false);\n        });\n        _this.layerProvider.ref.bindTooltip(_this);\n        return _this;\n    }\n    /**\n     * This function gets called from Angular on destroy of the html-component.\n     * @link https://angular.io/docs/ts/latest/api/core/index/OnDestroy-class.html\n     */\n    TooltipDirective.prototype.ngOnDestroy = function () {\n        this.layerProvider.ref.unbindTooltip();\n    };\n    /**\n     * Derived method of the original setContent method.\n     * @link http://leafletjs.com/reference-1.2.0.html#tooltip-setcontent Original Leaflet documentation\n     */\n    TooltipDirective.prototype.setContent = function (content) {\n        this.contentChange.emit((content));\n        return _super.prototype.setContent.call(this, content);\n    };\n    Object.defineProperty(TooltipDirective.prototype, \"content\", {\n        get: function () {\n            return this.getContent() || \"\";\n        },\n        /**\n         * Two-Way bound property for the content.\n         * Use it with `<yaga-tooltip [(content)]=\"someValue\">` or `<yaga-tooltip [content]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tooltip-setcontent Original Leaflet documentation\n         */\n        set: function (val) {\n            this.setContent(val);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TooltipDirective.prototype, \"opened\", {\n        get: function () {\n            return !!this._map;\n        },\n        /**\n         * Two-Way bound property for the opened state.\n         * Use it with `<yaga-tooltip [(opened)]=\"someValue\">` or `<yaga-tooltip [opened]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tooltip-openon Original Leaflet documentation\n         */\n        set: function (val) {\n            if (val) {\n                this.layerProvider.ref.openTooltip();\n                return;\n            }\n            this.layerProvider.ref.closeTooltip();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Derived method of the original setLatLng method.\n     * @link http://leafletjs.com/reference-1.2.0.html#tooltip-setlatlng Original Leaflet documentation\n     */\n    TooltipDirective.prototype.setLatLng = function (latlng) {\n        _super.prototype.setLatLng.call(this, latlng);\n        this.latChange.emit(this.lat);\n        this.lngChange.emit(this.lng);\n        this.positionChange.emit(leaflet_1.latLng(this.lat, this.lng));\n        return this;\n    };\n    Object.defineProperty(TooltipDirective.prototype, \"lat\", {\n        get: function () {\n            if (!this.getLatLng()) {\n                return NaN;\n            }\n            return this.getLatLng().lat;\n        },\n        /**\n         * Two-Way bound property for the latitude position of the tooltip.\n         * Use it with `<yaga-tooltip [(lat)]=\"someValue\">` or `<yaga-tooltip [lat]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tooltip-setlatlng Original Leaflet documentation\n         */\n        set: function (val) {\n            this.setLatLng([val, this.lng]);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TooltipDirective.prototype, \"lng\", {\n        get: function () {\n            if (!this.getLatLng()) {\n                return NaN;\n            }\n            return this.getLatLng().lng;\n        },\n        /**\n         * Two-Way bound property for the longitude position of the tooltip.\n         * Use it with `<yaga-tooltip [(lng)]=\"someValue\">` or `<yaga-tooltip [lng]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tooltip-setlatlng Original Leaflet documentation\n         */\n        set: function (val) {\n            this.setLatLng([this.lat, val]);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TooltipDirective.prototype, \"position\", {\n        get: function () {\n            if (!this.getLatLng()) {\n                return new leaflet_1.LatLng(NaN, NaN);\n            }\n            return this.getLatLng();\n        },\n        /**\n         * Two-Way bound property for the position of the tooltip.\n         * Use it with `<yaga-tooltip [(position)]=\"someValue\">` or `<yaga-tooltip [position]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tooltip-setlatlng Original Leaflet documentation\n         */\n        set: function (val) {\n            this.setLatLng(val);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Derived method of the original setContent method.\n     * @link http://leafletjs.com/reference-1.2.0.html#tooltip-setcontent Original Leaflet documentation\n     */\n    TooltipDirective.prototype.setOpacity = function (val) {\n        _super.prototype.setOpacity.call(this, val);\n        this.opacityChange.emit(val);\n    };\n    Object.defineProperty(TooltipDirective.prototype, \"opacity\", {\n        get: function () {\n            return this.options.opacity;\n        },\n        /**\n         * Two-Way bound property for the opacity of the tooltip.\n         * Use it with `<yaga-tooltip [(opacity)]=\"someValue\">` or `<yaga-tooltip [opacity]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tooltip-opacity Original Leaflet documentation\n         */\n        set: function (val) {\n            if (val === undefined) {\n                val = 1;\n            }\n            this.setOpacity(val);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TooltipDirective.prototype, \"className\", {\n        get: function () {\n            return this.options.className;\n        },\n        /**\n         * Input for the CSS class name.\n         * Use it with `<yaga-tooltip [autoClose]=\"className\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tooltip-classname Original Leaflet documentation\n         */\n        set: function (val) {\n            if (!this._container) {\n                this.options.className = val;\n                return;\n            }\n            var oldClassName = this._container.getAttribute(\"class\") || \"\";\n            var newClassNameSplited = oldClassName.split(\" \" + this.options.className + \" \");\n            if (newClassNameSplited.length === 1) {\n                newClassNameSplited.push(\"\");\n            }\n            this._container.setAttribute(\"class\", newClassNameSplited.join(\" \" + val + \" \").trim());\n            this.options.className = val;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TooltipDirective.prototype, \"pane\", {\n        get: function () {\n            return this.options.pane;\n        },\n        /**\n         * Input for the pane.\n         * Use it with `<yaga-tooltip [pane]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tooltip-pane Original Leaflet documentation\n         */\n        set: function (val) {\n            this.options.pane = val;\n            this._updateLayout();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TooltipDirective.prototype, \"interactive\", {\n        get: function () {\n            return !!this.options.interactive;\n        },\n        /**\n         * Input for the interactive state.\n         * Use it with `<yaga-tooltip [interactive]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tooltip-interactive Original Leaflet documentation\n         */\n        set: function (val) {\n            this.options.interactive = val;\n            this._updateLayout();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TooltipDirective.prototype, \"sticky\", {\n        get: function () {\n            return !!this.options.sticky;\n        },\n        /**\n         * Input for the sticky.\n         * Use it with `<yaga-tooltip [sticky]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tooltip-sticky Original Leaflet documentation\n         */\n        set: function (val) {\n            this._initTooltipInteractions.call(this.layerProvider.ref, true);\n            this.options.sticky = val;\n            this._initTooltipInteractions.call(this.layerProvider.ref, false);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TooltipDirective.prototype, \"direction\", {\n        get: function () {\n            return this.options.direction;\n        },\n        /**\n         * Input for the direction.\n         * Use it with `<yaga-tooltip [direction]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tooltip-direction Original Leaflet documentation\n         */\n        set: function (val) {\n            this.options.direction = val;\n            this.reopen();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TooltipDirective.prototype, \"permanent\", {\n        get: function () {\n            return !!this.options.permanent;\n        },\n        /**\n         * Input for the permanent state.\n         * Use it with `<yaga-tooltip [permanent]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tooltip-permanent Original Leaflet documentation\n         */\n        set: function (val) {\n            this._initTooltipInteractions.call(this.layerProvider.ref, true);\n            this.options.permanent = val;\n            this._initTooltipInteractions.call(this.layerProvider.ref, false);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TooltipDirective.prototype, \"offset\", {\n        get: function () {\n            return this.options.offset;\n        },\n        /**\n         * Input for the offset.\n         * Use it with `<yaga-tooltip [offset]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tooltip-offset Original Leaflet documentation\n         */\n        set: function (val) {\n            this.options.offset = val;\n            this.reopen();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TooltipDirective.prototype.reopen = function (force) {\n        if (force === void 0) { force = false; }\n        if (force || this.opened) {\n            this.layerProvider.ref.closeTooltip();\n            this.layerProvider.ref.openTooltip();\n        }\n    };\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], TooltipDirective.prototype, \"contentChange\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], TooltipDirective.prototype, \"openedChange\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], TooltipDirective.prototype, \"latChange\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], TooltipDirective.prototype, \"lngChange\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], TooltipDirective.prototype, \"positionChange\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], TooltipDirective.prototype, \"opacityChange\", void 0);\n    __decorate([\n        core_1.Output(\"open\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], TooltipDirective.prototype, \"openEvent\", void 0);\n    __decorate([\n        core_1.Output(\"close\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], TooltipDirective.prototype, \"closeEvent\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], TooltipDirective.prototype, \"content\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean),\n        __metadata(\"design:paramtypes\", [Boolean])\n    ], TooltipDirective.prototype, \"opened\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Number),\n        __metadata(\"design:paramtypes\", [Number])\n    ], TooltipDirective.prototype, \"lat\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Number),\n        __metadata(\"design:paramtypes\", [Number])\n    ], TooltipDirective.prototype, \"lng\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", leaflet_1.LatLng),\n        __metadata(\"design:paramtypes\", [leaflet_1.LatLng])\n    ], TooltipDirective.prototype, \"position\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], TooltipDirective.prototype, \"opacity\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], TooltipDirective.prototype, \"className\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], TooltipDirective.prototype, \"pane\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean),\n        __metadata(\"design:paramtypes\", [Boolean])\n    ], TooltipDirective.prototype, \"interactive\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean),\n        __metadata(\"design:paramtypes\", [Boolean])\n    ], TooltipDirective.prototype, \"sticky\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], TooltipDirective.prototype, \"direction\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean),\n        __metadata(\"design:paramtypes\", [Boolean])\n    ], TooltipDirective.prototype, \"permanent\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], TooltipDirective.prototype, \"offset\", null);\n    TooltipDirective = __decorate([\n        core_1.Directive({\n            selector: \"yaga-tooltip\",\n        }),\n        __param(1, core_1.Inject(core_1.ElementRef)),\n        __metadata(\"design:paramtypes\", [layer_provider_1.LayerProvider,\n            core_1.ElementRef])\n    ], TooltipDirective);\n    return TooltipDirective;\n}(leaflet_1.Tooltip));\nexports.TooltipDirective = TooltipDirective;\n"]}