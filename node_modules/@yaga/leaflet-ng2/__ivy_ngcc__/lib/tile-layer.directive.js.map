{"version":3,"file":"tile-layer.directive.js","sources":["tile-layer.directive.js"],"names":[],"mappingsqCAKO;AACP;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAA2B;AAC3B;AACA;AACA;AACA","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar leaflet_1 = require(\"leaflet\");\nvar consts_1 = require(\"./consts\");\nvar layer_group_provider_1 = require(\"./layer-group.provider\");\nvar layer_provider_1 = require(\"./layer.provider\");\n/**\n * Angular2 directive for Leaflet tile-layers.\n *\n * *You can use this directive in an Angular2 template after importing `YagaModule`.*\n *\n * How to use in a template:\n * ```html\n * <yaga-map>\n *     <yaga-tile-layer\n *         [(url)]=\"...\"\n *         [(display)]=\"...\"\n *         [(opacity)]=\"...\"\n *         [(zIndex)]=\"...\"\n *\n *         (add)=\"...\"\n *         (remove)=\"...\"\n *         (popupopen)=\"...\"\n *         (popupclose)=\"...\"\n *         (tooltipopen)=\"...\"\n *         (tooltipclose)=\"...\"\n *         (click)=\"...\"\n *         (dblclick)=\"...\"\n *         (mousedown)=\"...\"\n *         (mouseover)=\"...\"\n *         (mouseout)=\"...\"\n *         (contextmenu)=\"...\"\n *         (loading)=\"...\"\n *         (tileunload)=\"...\"\n *         (tileloadstart)=\"...\"\n *         (tileerror)=\"...\"\n *         (tileload)=\"...\"\n *         (load)=\"...\"\n *\n *         [tileSize]=\"...\"\n *         [updateWhenIdle]=\"...\"\n *         [updateWhenZooming]=\"...\"\n *         [updateInterval]=\"...\"\n *         [bounds]=\"...\"\n *         [noWrap]=\"...\"\n *         [className]=\"...\"\n *         [keepBuffer]=\"...\"\n *         [maxZoom]=\"...\"\n *         [minZoom]=\"...\"\n *         [maxNativeZoom]=\"...\"\n *         [minNativeZoom]=\"...\"\n *         [subdomains]=\"...\"\n *         [errorTileUrl]=\"...\"\n *         [zoomOffset]=\"...\"\n *         [tms]=\"...\"\n *         [zoomReverse]=\"...\"\n *         [detectRetina]=\"...\"\n *         [crossOrigin]=\"...\"\n *         [attribution]=\"...\">\n *     </yaga-tile-layer>\n * </yaga-map>\n * ```\n *\n * @link http://leafletjs.com/reference-1.2.0.html#tilelayer Original Leaflet documentation\n * @link https://leaflet-ng2.yagajs.org/latest/browser-test?grep=Tile-Layer%20Directive Unit-Test\n * @link https://leaflet-ng2.yagajs.org/latest/coverage/lcov-report/lib/tile-layer.directive.js.html Test coverage\n * @link https://leaflet-ng2.yagajs.org/latest/typedoc/classes/tilelayerdirective.html API documentation\n * @example https://leaflet-ng2.yagajs.org/latest/examples/tile-layer-directive\n */\nvar TileLayerDirective = /** @class */ (function (_super) {\n    __extends(TileLayerDirective, _super);\n    function TileLayerDirective(layerGroupProvider, layerProvider) {\n        var _this = \n        // Transparent 1px image:\n        _super.call(this, consts_1.TRANSPARENT_PIXEL, { errorTileUrl: consts_1.TRANSPARENT_PIXEL }) || this;\n        _this.layerGroupProvider = layerGroupProvider;\n        /**\n         * Two-Way bound property for the URL.\n         * Use it with `<yaga-tile-layer [(url)]=\"someValue\">` or `<yaga-tile-layer (urlChange)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tilelayer-seturl Original Leaflet documentation\n         */\n        _this.urlChange = new core_1.EventEmitter();\n        /**\n         * Two-Way bound property for the display status of the layer.\n         * Use it with `<yaga-tile-layer [(display)]=\"someValue\">`\n         * or `<yaga-tile-layer (displayChange)=\"processEvent($event)\">`\n         */\n        _this.displayChange = new core_1.EventEmitter();\n        /**\n         * Two-Way bound property for the opacity of the layer.\n         * Use it with `<yaga-tile-layer [(opacity)]=\"someValue\">`\n         * or `<yaga-tile-layer (opacityChange)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tilelayer-opacity Original Leaflet documentation\n         */\n        _this.opacityChange = new core_1.EventEmitter();\n        /**\n         * Two-Way bound property for the zIndex of the layer.\n         * Use it with `<yaga-tile-layer [(zIndex)]=\"someValue\">`\n         * or `<yaga-tile-layer (zIndexChange)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tilelayer-setzindex Original Leaflet documentation\n         */\n        _this.zIndexChange = new core_1.EventEmitter();\n        /**\n         * From leaflet fired add event.\n         * Use it with `<yaga-tile-layer (add)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tilelayer-add Original Leaflet documentation\n         */\n        _this.addEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired remove event.\n         * Use it with `<yaga-tile-layer (remove)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tilelayer-remove Original Leaflet documentation\n         */\n        _this.removeEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired popupopen event.\n         * Use it with `<yaga-tile-layer (popupopen)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tilelayer-popupopen Original Leaflet documentation\n         */\n        _this.popupopenEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired popupclose event.\n         * Use it with `<yaga-tile-layer (popupclose)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tilelayer-popupclose Original Leaflet documentation\n         */\n        _this.popupcloseEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired tooltipopen event.\n         * Use it with `<yaga-tile-layer (tooltipopen)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tilelayer-tooltipopen Original Leaflet documentation\n         */\n        _this.tooltipopenEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired tooltipclose event.\n         * Use it with `<yaga-tile-layer (tooltipclose)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tilelayer-tooltipclose Original Leaflet documentation\n         */\n        _this.tooltipcloseEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired click event.\n         * Use it with `<yaga-tile-layer (click)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tilelayer-click Original Leaflet documentation\n         */\n        _this.clickEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired dblclick event.\n         * Use it with `<yaga-tile-layer (dblclick)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tilelayer-dblclick Original Leaflet documentation\n         */\n        _this.dblclickEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired mousedown event.\n         * Use it with `<yaga-tile-layer (mousedown)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tilelayer-mousedown Original Leaflet documentation\n         */\n        _this.mousedownEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired mouseover event.\n         * Use it with `<yaga-tile-layer (mouseover)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tilelayer-mouseover Original Leaflet documentation\n         */\n        _this.mouseoverEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired mouseout event.\n         * Use it with `<yaga-tile-layer (mouseout)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tilelayer-mouseout Original Leaflet documentation\n         */\n        _this.mouseoutEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired contextmenu event.\n         * Use it with `<yaga-tile-layer (contextmenu)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tilelayer-contextmenu Original Leaflet documentation\n         */\n        _this.contextmenuEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired loading event.\n         * Use it with `<yaga-tile-layer (loading)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tilelayer-loading Original Leaflet documentation\n         */\n        _this.loadingEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired tileunload event.\n         * Use it with `<yaga-tile-layer (tileunload)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tilelayer-tileunload Original Leaflet documentation\n         */\n        _this.tileunloadEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired tileloadstart event.\n         * Use it with `<yaga-tile-layer (tileloadstart)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tilelayer-tileloadstart Original Leaflet documentation\n         */\n        _this.tileloadstartEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired tileerror event.\n         * Use it with `<yaga-tile-layer (tileerror)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tilelayer-tileerror Original Leaflet documentation\n         */\n        _this.tileerrorEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired tileload event.\n         * Use it with `<yaga-tile-layer (tileload)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tilelayer-tileload Original Leaflet documentation\n         */\n        _this.tileloadEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired load event.\n         * Use it with `<yaga-tile-layer (load)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tilelayer-load Original Leaflet documentation\n         */\n        _this.loadEvent = new core_1.EventEmitter();\n        layerProvider.ref = _this;\n        _this.on(\"remove\", function () {\n            _this.displayChange.emit(false);\n        });\n        _this.on(\"add\", function () {\n            _this.displayChange.emit(true);\n        });\n        _this.addTo(_this.layerGroupProvider.ref);\n        // Events\n        _this.on(\"add\", function (event) {\n            _this.addEvent.emit(event);\n        });\n        _this.on(\"remove\", function (event) {\n            _this.removeEvent.emit(event);\n        });\n        _this.on(\"popupopen\", function (event) {\n            _this.popupopenEvent.emit(event);\n        });\n        _this.on(\"popupclose\", function (event) {\n            _this.popupcloseEvent.emit(event);\n        });\n        _this.on(\"tooltipopen\", function (event) {\n            _this.tooltipopenEvent.emit(event);\n        });\n        _this.on(\"tooltipclose\", function (event) {\n            _this.tooltipcloseEvent.emit(event);\n        });\n        _this.on(\"click\", function (event) {\n            _this.clickEvent.emit(event);\n        });\n        _this.on(\"dblclick\", function (event) {\n            _this.dblclickEvent.emit(event);\n        });\n        _this.on(\"mousedown\", function (event) {\n            _this.mousedownEvent.emit(event);\n        });\n        _this.on(\"mouseover\", function (event) {\n            _this.mouseoverEvent.emit(event);\n        });\n        _this.on(\"mouseout\", function (event) {\n            _this.mouseoutEvent.emit(event);\n        });\n        _this.on(\"contextmenu\", function (event) {\n            _this.contextmenuEvent.emit(event);\n        });\n        _this.on(\"loading\", function (event) {\n            _this.loadingEvent.emit(event);\n        });\n        _this.on(\"tileunload\", function (event) {\n            _this.tileunloadEvent.emit(event);\n        });\n        _this.on(\"tileloadstart\", function (event) {\n            _this.tileloadstartEvent.emit(event);\n        });\n        _this.on(\"tileerror\", function (event) {\n            _this.tileerrorEvent.emit(event);\n        });\n        _this.on(\"tileload\", function (event) {\n            _this.tileloadEvent.emit(event);\n        });\n        _this.on(\"load\", function (event) {\n            _this.loadEvent.emit(event);\n        });\n        return _this;\n    }\n    /**\n     * This function gets called from Angular on destroy of the html-component.\n     * @link https://angular.io/docs/ts/latest/api/core/index/OnDestroy-class.html\n     */\n    TileLayerDirective.prototype.ngOnDestroy = function () {\n        this.removeFrom(this.layerGroupProvider.ref);\n    };\n    /**\n     * Derived method of the original setUrl method.\n     * @link http://leafletjs.com/reference-1.2.0.html#tilelayer-seturl Original Leaflet documentation\n     */\n    TileLayerDirective.prototype.setUrl = function (url, noRedraw) {\n        if (this.url === url) {\n            return this;\n        }\n        this.urlChange.emit(url);\n        return _super.prototype.setUrl.call(this, url, noRedraw);\n    };\n    Object.defineProperty(TileLayerDirective.prototype, \"url\", {\n        get: function () {\n            return this._url;\n        },\n        /**\n         * Two-Way bound property for the URL.\n         * Use it with `<yaga-tile-layer [(url)]=\"someValue\">` or `<yaga-tile-layer [url]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tilelayer-seturl Original Leaflet documentation\n         */\n        set: function (val) {\n            this.setUrl(val);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Derived method of the original setOpacity method.\n     * @link http://leafletjs.com/reference-1.2.0.html#tilelayer-setopacity Original Leaflet documentation\n     */\n    TileLayerDirective.prototype.setOpacity = function (val) {\n        if (this.opacity === val) {\n            return this;\n        }\n        this.opacityChange.emit(val);\n        return _super.prototype.setOpacity.call(this, val);\n    };\n    Object.defineProperty(TileLayerDirective.prototype, \"opacity\", {\n        get: function () {\n            return this.options.opacity;\n        },\n        /**\n         * Two-Way bound property for the opacity.\n         * Use it with `<yaga-tile-layer [(opacity)]=\"someValue\">` or `<yaga-tile-layer [opacity]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tilelayer-setopacity Original Leaflet documentation\n         */\n        set: function (val) {\n            if (val === undefined) {\n                val = 1;\n            }\n            this.setOpacity(val);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TileLayerDirective.prototype, \"display\", {\n        /**\n         * Two-Way bound property for the display status of the layer.\n         * Use it with `<yaga-tile-layer [(display)]=\"someValue\">` or `<yaga-tile-layer [display]=\"someValue\">`\n         */\n        get: function () {\n            var pane;\n            var container;\n            try {\n                pane = this.getPane();\n                container = this.getContainer();\n            }\n            catch (err) {\n                /* istanbul ignore next */\n                return false;\n            }\n            /* tslint:disable:prefer-for-of */\n            for (var i = 0; i < pane.children.length; i += 1) {\n                /* tslint:enable */\n                /* istanbul ignore else */\n                if (pane.children[i] === container) {\n                    return true;\n                }\n            }\n            return false;\n        },\n        /**\n         * Two-Way bound property for the display status of the layer.\n         * Use it with `<yaga-tile-layer [(display)]=\"someValue\">` or `<yaga-tile-layer [display]=\"someValue\">`\n         */\n        set: function (val) {\n            var isDisplayed = this.display;\n            if (isDisplayed === val) {\n                return;\n            }\n            var pane;\n            var container;\n            var map;\n            var events; // Dictionary of functions\n            var eventKeys;\n            try {\n                pane = this.getPane();\n                container = this.getContainer();\n                map = this._map;\n                events = this.getEvents();\n                eventKeys = Object.keys(events);\n            }\n            catch (err) {\n                /* istanbul ignore next */\n                return;\n            }\n            if (val) {\n                // show layer\n                pane.appendChild(container);\n                for (var _i = 0, eventKeys_1 = eventKeys; _i < eventKeys_1.length; _i++) {\n                    var eventKey = eventKeys_1[_i];\n                    map.on(eventKey, events[eventKey], this);\n                }\n                this.redraw();\n            }\n            else {\n                // hide layer\n                pane.removeChild(container);\n                for (var _a = 0, eventKeys_2 = eventKeys; _a < eventKeys_2.length; _a++) {\n                    var eventKey = eventKeys_2[_a];\n                    map.off(eventKey, events[eventKey], this);\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Derived method of the original setZIndexmethod.\n     * @link http://leafletjs.com/reference-1.2.0.html#tilelayer-setzindex Original Leaflet documentation\n     */\n    TileLayerDirective.prototype.setZIndex = function (val) {\n        _super.prototype.setZIndex.call(this, val);\n        this.zIndexChange.emit(val);\n        return this;\n    };\n    Object.defineProperty(TileLayerDirective.prototype, \"zIndex\", {\n        get: function () {\n            return this.options.zIndex;\n        },\n        /**\n         * Two-Way bound property for the zIndex.\n         * Use it with `<yaga-tile-layer [(zIndex)]=\"someValue\">` or `<yaga-tile-layer [zIndex]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tilelayer-setzindex Original Leaflet documentation\n         */\n        set: function (val) {\n            if (val === undefined) {\n                val = 1;\n            }\n            this.setZIndex(val);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TileLayerDirective.prototype, \"tileSize\", {\n        get: function () {\n            return this.options.tileSize;\n        },\n        /**\n         * Input for the tileSize.\n         * Use it with `<yaga-tile-layer [tileSize]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tilelayer-tileSize Original Leaflet documentation\n         */\n        set: function (val) {\n            this.options.tileSize = val;\n            this.redraw();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TileLayerDirective.prototype, \"updateWhenIdle\", {\n        get: function () {\n            return !!this.options.updateWhenIdle;\n        },\n        /**\n         * Input for the updateWhenIdle.\n         * Use it with `<yaga-tile-layer [updateWhenIdle]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tilelayer-updatewhenidle Original Leaflet documentation\n         */\n        set: function (val) {\n            this.options.updateWhenIdle = val;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TileLayerDirective.prototype, \"updateWhenZooming\", {\n        get: function () {\n            return !!this.options.updateWhenZooming;\n        },\n        /**\n         * Input for the updateWhenZooming.\n         * Use it with `<yaga-tile-layer [updateWhenZooming]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tilelayer-updatewhenzooming Original Leaflet documentation\n         */\n        set: function (val) {\n            this.options.updateWhenZooming = val;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TileLayerDirective.prototype, \"updateInterval\", {\n        get: function () {\n            return this.options.updateInterval;\n        },\n        /**\n         * Input for the updateInterval.\n         * Use it with `<yaga-tile-layer [updateInterval]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tilelayer-updateinterval Original Leaflet documentation\n         */\n        set: function (val) {\n            this.options.updateInterval = val;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TileLayerDirective.prototype, \"bounds\", {\n        get: function () {\n            return this.options.bounds;\n        },\n        /**\n         * Input for the bounds.\n         * Use it with `<yaga-tile-layer [bounds]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tilelayer-bounds Original Leaflet documentation\n         */\n        set: function (val) {\n            this.options.bounds = val;\n            this.redraw();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TileLayerDirective.prototype, \"noWrap\", {\n        get: function () {\n            return !!this.options.noWrap;\n        },\n        /**\n         * Input for the noWrap.\n         * Use it with `<yaga-tile-layer [noWrap]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tilelayer-nowrap Original Leaflet documentation\n         */\n        set: function (val) {\n            this.options.noWrap = val;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TileLayerDirective.prototype, \"className\", {\n        get: function () {\n            return this.options.className;\n        },\n        /**\n         * Input for the className.\n         * Use it with `<yaga-tile-layer [className]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tilelayer-classname Original Leaflet documentation\n         */\n        set: function (val) {\n            this.options.className = val;\n            this.redraw();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TileLayerDirective.prototype, \"keepBuffer\", {\n        get: function () {\n            return this.options.keepBuffer;\n        },\n        /**\n         * Input for the keepBuffer.\n         * Use it with `<yaga-tile-layer [keepBuffer]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tilelayer-keepbuffer Original Leaflet documentation\n         */\n        set: function (val) {\n            this.options.keepBuffer = val;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TileLayerDirective.prototype, \"maxZoom\", {\n        get: function () {\n            return this.options.maxZoom;\n        },\n        /**\n         * Input for the maxZoom.\n         * Use it with `<yaga-tile-layer [maxZoom]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tilelayer-maxzoom Original Leaflet documentation\n         */\n        set: function (val) {\n            this.options.maxZoom = val;\n            if (this._map) {\n                this._map._updateZoomLevels();\n            }\n            this.redraw();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TileLayerDirective.prototype, \"minZoom\", {\n        get: function () {\n            return this.options.minZoom;\n        },\n        /**\n         * Input for the minZoom.\n         * Use it with `<yaga-tile-layer [minZoom]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tilelayer-minzoom Original Leaflet documentation\n         */\n        set: function (val) {\n            this.options.minZoom = val;\n            if (this._map) {\n                this._map._updateZoomLevels();\n            }\n            this.redraw();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TileLayerDirective.prototype, \"maxNativeZoom\", {\n        get: function () {\n            return this.options.maxNativeZoom;\n        },\n        /**\n         * Input for the maxNativeZoom.\n         * Use it with `<yaga-tile-layer [maxNativeZoom]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tilelayer-maxnativezoom Original Leaflet documentation\n         */\n        set: function (val) {\n            this.options.maxNativeZoom = val;\n            this.redraw();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TileLayerDirective.prototype, \"minNativeZoom\", {\n        get: function () {\n            return this.options.minNativeZoom;\n        },\n        /**\n         * Input for the minNativeZoom.\n         * Use it with `<yaga-tile-layer [minNativeZoom]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tilelayer-minnativezoom Original Leaflet documentation\n         */\n        set: function (val) {\n            this.options.minNativeZoom = val;\n            this.redraw();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TileLayerDirective.prototype, \"subdomains\", {\n        get: function () {\n            if (typeof this.options.subdomains === \"string\") {\n                this.options.subdomains = this.options.subdomains.split(\"\");\n            }\n            return this.options.subdomains;\n        },\n        /**\n         * Input for the subdomains.\n         * Use it with `<yaga-tile-layer [subdomains]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tilelayer-subdomains Original Leaflet documentation\n         */\n        set: function (val) {\n            this.options.subdomains = val;\n            this.redraw();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TileLayerDirective.prototype, \"errorTileUrl\", {\n        get: function () {\n            return this.options.errorTileUrl;\n        },\n        /**\n         * Input for the errorTileUrl.\n         * Use it with `<yaga-tile-layer [errorTileUrl]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tilelayer-errortileurl Original Leaflet documentation\n         */\n        set: function (val) {\n            this.options.errorTileUrl = val;\n            this.redraw();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TileLayerDirective.prototype, \"zoomOffset\", {\n        get: function () {\n            return this.options.zoomOffset;\n        },\n        /**\n         * Input for the zoomOffset.\n         * Use it with `<yaga-tile-layer [zoomOffset]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tilelayer-zoomoffset Original Leaflet documentation\n         */\n        set: function (val) {\n            this.options.zoomOffset = val;\n            this.redraw();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TileLayerDirective.prototype, \"tms\", {\n        get: function () {\n            return !!this.options.tms;\n        },\n        /**\n         * Input for the tms.\n         * Use it with `<yaga-tile-layer [tms]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tilelayer-tms Original Leaflet documentation\n         */\n        set: function (val) {\n            this.options.tms = val;\n            this.redraw();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TileLayerDirective.prototype, \"zoomReverse\", {\n        get: function () {\n            return !!this.options.zoomReverse;\n        },\n        /**\n         * Input for the zoomReverse.\n         * Use it with `<yaga-tile-layer [zoomReverse]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tilelayer-zoomreverse Original Leaflet documentation\n         */\n        set: function (val) {\n            this.options.zoomReverse = val;\n            this.redraw();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TileLayerDirective.prototype, \"detectRetina\", {\n        get: function () {\n            return !!this.options.detectRetina;\n        },\n        /**\n         * Input for the detectRetina.\n         * Use it with `<yaga-tile-layer [detectRetina]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tilelayer-detectretina Original Leaflet documentation\n         */\n        set: function (val) {\n            this.options.detectRetina = val;\n            this.redraw();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TileLayerDirective.prototype, \"crossOrigin\", {\n        get: function () {\n            return !!this.options.crossOrigin;\n        },\n        /**\n         * Input for the crossOrigin.\n         * Use it with `<yaga-tile-layer [crossOrigin]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tilelayer-crossorigin Original Leaflet documentation\n         */\n        set: function (val) {\n            this.options.crossOrigin = val;\n            this.redraw();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TileLayerDirective.prototype, \"attribution\", {\n        get: function () {\n            return this.getAttribution() || \"\";\n        },\n        /**\n         * Input for the attribution.\n         * Use it with `<yaga-tile-layer [attribution]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#tilelayer-attribution Original Leaflet documentation\n         */\n        set: function (val) {\n            if (this._map && this._map.attributionControl) {\n                var oldAttribution = this.getAttribution();\n                if (oldAttribution) {\n                    this._map.attributionControl.removeAttribution(oldAttribution);\n                }\n                this._map.attributionControl.addAttribution(val);\n            }\n            this.options.attribution = val;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], TileLayerDirective.prototype, \"urlChange\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], TileLayerDirective.prototype, \"displayChange\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], TileLayerDirective.prototype, \"opacityChange\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], TileLayerDirective.prototype, \"zIndexChange\", void 0);\n    __decorate([\n        core_1.Output(\"add\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], TileLayerDirective.prototype, \"addEvent\", void 0);\n    __decorate([\n        core_1.Output(\"remove\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], TileLayerDirective.prototype, \"removeEvent\", void 0);\n    __decorate([\n        core_1.Output(\"popupopen\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], TileLayerDirective.prototype, \"popupopenEvent\", void 0);\n    __decorate([\n        core_1.Output(\"popupclose\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], TileLayerDirective.prototype, \"popupcloseEvent\", void 0);\n    __decorate([\n        core_1.Output(\"tooltipopen\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], TileLayerDirective.prototype, \"tooltipopenEvent\", void 0);\n    __decorate([\n        core_1.Output(\"tooltipclose\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], TileLayerDirective.prototype, \"tooltipcloseEvent\", void 0);\n    __decorate([\n        core_1.Output(\"click\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], TileLayerDirective.prototype, \"clickEvent\", void 0);\n    __decorate([\n        core_1.Output(\"dblclick\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], TileLayerDirective.prototype, \"dblclickEvent\", void 0);\n    __decorate([\n        core_1.Output(\"mousedown\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], TileLayerDirective.prototype, \"mousedownEvent\", void 0);\n    __decorate([\n        core_1.Output(\"mouseover\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], TileLayerDirective.prototype, \"mouseoverEvent\", void 0);\n    __decorate([\n        core_1.Output(\"mouseout\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], TileLayerDirective.prototype, \"mouseoutEvent\", void 0);\n    __decorate([\n        core_1.Output(\"contextmenu\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], TileLayerDirective.prototype, \"contextmenuEvent\", void 0);\n    __decorate([\n        core_1.Output(\"loading\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], TileLayerDirective.prototype, \"loadingEvent\", void 0);\n    __decorate([\n        core_1.Output(\"tileunload\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], TileLayerDirective.prototype, \"tileunloadEvent\", void 0);\n    __decorate([\n        core_1.Output(\"tileloadstart\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], TileLayerDirective.prototype, \"tileloadstartEvent\", void 0);\n    __decorate([\n        core_1.Output(\"tileerror\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], TileLayerDirective.prototype, \"tileerrorEvent\", void 0);\n    __decorate([\n        core_1.Output(\"tileload\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], TileLayerDirective.prototype, \"tileloadEvent\", void 0);\n    __decorate([\n        core_1.Output(\"load\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], TileLayerDirective.prototype, \"loadEvent\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String),\n        __metadata(\"design:paramtypes\", [String])\n    ], TileLayerDirective.prototype, \"url\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], TileLayerDirective.prototype, \"opacity\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean),\n        __metadata(\"design:paramtypes\", [Boolean])\n    ], TileLayerDirective.prototype, \"display\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], TileLayerDirective.prototype, \"zIndex\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", leaflet_1.Point),\n        __metadata(\"design:paramtypes\", [leaflet_1.Point])\n    ], TileLayerDirective.prototype, \"tileSize\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean),\n        __metadata(\"design:paramtypes\", [Boolean])\n    ], TileLayerDirective.prototype, \"updateWhenIdle\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean),\n        __metadata(\"design:paramtypes\", [Boolean])\n    ], TileLayerDirective.prototype, \"updateWhenZooming\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], TileLayerDirective.prototype, \"updateInterval\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], TileLayerDirective.prototype, \"bounds\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean),\n        __metadata(\"design:paramtypes\", [Boolean])\n    ], TileLayerDirective.prototype, \"noWrap\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], TileLayerDirective.prototype, \"className\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], TileLayerDirective.prototype, \"keepBuffer\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], TileLayerDirective.prototype, \"maxZoom\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], TileLayerDirective.prototype, \"minZoom\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], TileLayerDirective.prototype, \"maxNativeZoom\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], TileLayerDirective.prototype, \"minNativeZoom\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Array),\n        __metadata(\"design:paramtypes\", [Array])\n    ], TileLayerDirective.prototype, \"subdomains\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], TileLayerDirective.prototype, \"errorTileUrl\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], TileLayerDirective.prototype, \"zoomOffset\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean),\n        __metadata(\"design:paramtypes\", [Boolean])\n    ], TileLayerDirective.prototype, \"tms\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean),\n        __metadata(\"design:paramtypes\", [Boolean])\n    ], TileLayerDirective.prototype, \"zoomReverse\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean),\n        __metadata(\"design:paramtypes\", [Boolean])\n    ], TileLayerDirective.prototype, \"detectRetina\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean),\n        __metadata(\"design:paramtypes\", [Boolean])\n    ], TileLayerDirective.prototype, \"crossOrigin\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String),\n        __metadata(\"design:paramtypes\", [String])\n    ], TileLayerDirective.prototype, \"attribution\", null);\n    TileLayerDirective = __decorate([\n        core_1.Directive({\n            providers: [layer_provider_1.LayerProvider],\n            selector: \"yaga-tile-layer\",\n        }),\n        __metadata(\"design:paramtypes\", [layer_group_provider_1.LayerGroupProvider,\n            layer_provider_1.LayerProvider])\n    ], TileLayerDirective);\n    return TileLayerDirective;\n}(leaflet_1.TileLayer));\nexports.TileLayerDirective = TileLayerDirective;\n"]}