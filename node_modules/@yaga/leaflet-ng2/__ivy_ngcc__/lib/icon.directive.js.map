{"version":3,"file":"icon.directive.js","sources":["icon.directive.js"],"names":[],"mappingsgCAIO;AACP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAAsB;AACtB;AACA;AACA;AACA","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar leaflet_1 = require(\"leaflet\");\nvar consts_1 = require(\"./consts\");\nvar marker_provider_1 = require(\"./marker.provider\");\n/**\n * Angular2 directive for Leaflet icons.\n *\n * *You can use this directive in an Angular2 template after importing `YagaModule`.*\n *\n * How to use in a template:\n * ```html\n * <yaga-map>\n *     <yaga-marker>\n *         <yaga-icon\n *             [iconAnchor]=\"...\"\n *             [iconSize]=\"...\"\n *             [popupAnchor]=\"...\"\n *             [className]=\"...\"\n *             [iconUrl]=\"...\"\n *             [iconRetinaUrl]=\"...\"\n *             [iconSize]=\"...\"\n *             [iconAnchor]=\"...\"\n *             [popupAnchor]=\"...\"\n *             [tooltipAnchor]=\"...\"\n *             [shadowUrl]=\"...\"\n *             [shadowRetinaUrl]=\"...\"\n *             [shadowSize]=\"...\"\n *             [shadowAnchor]=\"...\">\n *         </yaga-icon>\n *     </yaga-marker>\n * </yaga-map>\n * ```\n *\n * @link http://leafletjs.com/reference-1.2.0.html#icon Original Leaflet documentation\n * @link https://leaflet-ng2.yagajs.org/latest/browser-test?grep=Icon%20Directive Unit-Test\n * @link https://leaflet-ng2.yagajs.org/latest/coverage/lcov-report/lib/icon.directive.js.html Test coverage\n * @link https://leaflet-ng2.yagajs.org/latest/typedoc/classes/icondirective.html API documentation\n * @example https://leaflet-ng2.yagajs.org/latest/examples/icon-directive/\n */\nvar IconDirective = /** @class */ (function (_super) {\n    __extends(IconDirective, _super);\n    function IconDirective(markerProvider) {\n        var _this = _super.call(this, {\n            iconUrl: consts_1.TRANSPARENT_PIXEL,\n        }) || this;\n        _this.markerProvider = markerProvider;\n        /**\n         * This is an EventEmitter used to notify on any change in this object. It is mainly created to provide reactions\n         * of the marker directive on changes.\n         */\n        _this.updateEvent = new core_1.EventEmitter();\n        _this.markerProvider.ref.setIcon(_this);\n        return _this;\n    }\n    Object.defineProperty(IconDirective.prototype, \"className\", {\n        get: function () {\n            return this.options.className;\n        },\n        /**\n         * Input for the DOM class name.\n         * Use it with `<yaga-icon [className]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#icon-classname Original Leaflet documentation\n         */\n        set: function (val) {\n            this.options.className = val;\n            this.markerProvider.ref.setIcon(this);\n            this.updateEvent.emit({\n                target: this,\n                type: \"update\",\n            });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IconDirective.prototype, \"iconUrl\", {\n        get: function () {\n            return this.options.iconUrl;\n        },\n        /**\n         * Input for the icon-url.\n         * Use it with `<yaga-icon [iconUrl]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#icon-iconurl Original Leaflet documentation\n         */\n        set: function (val) {\n            this.options.iconUrl = val;\n            this.markerProvider.ref.setIcon(this);\n            this.updateEvent.emit({\n                target: this,\n                type: \"update\",\n            });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IconDirective.prototype, \"iconRetinaUrl\", {\n        get: function () {\n            return this.options.iconRetinaUrl;\n        },\n        /**\n         * Input for the icon-retina-url.\n         * Use it with `<yaga-icon [iconRetinaUrl]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#icon-iconretinaurl Original Leaflet documentation\n         */\n        set: function (val) {\n            this.options.iconRetinaUrl = val;\n            this.markerProvider.ref.setIcon(this);\n            this.updateEvent.emit({\n                target: this,\n                type: \"update\",\n            });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IconDirective.prototype, \"iconSize\", {\n        get: function () {\n            return this.options.iconSize;\n        },\n        /**\n         * Input for the icon-size.\n         * Use it with `<yaga-icon [iconSize]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#icon-iconsize Original Leaflet documentation\n         */\n        set: function (val) {\n            this.options.iconSize = val;\n            this.markerProvider.ref.setIcon(this);\n            this.updateEvent.emit({\n                target: this,\n                type: \"update\",\n            });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IconDirective.prototype, \"iconAnchor\", {\n        get: function () {\n            return this.options.iconAnchor;\n        },\n        /**\n         * Input for the icon-anchor.\n         * Use it with `<yaga-icon [iconAnchor]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#icon-iconanchor Original Leaflet documentation\n         */\n        set: function (val) {\n            this.options.iconAnchor = val;\n            this.markerProvider.ref.setIcon(this);\n            this.updateEvent.emit({\n                target: this,\n                type: \"update\",\n            });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IconDirective.prototype, \"popupAnchor\", {\n        get: function () {\n            return this.options.popupAnchor;\n        },\n        /**\n         * Input for the popup-anchor.\n         * Use it with `<yaga-icon [popupAnchor]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#icon-popupanchor Original Leaflet documentation\n         */\n        set: function (val) {\n            this.options.popupAnchor = val;\n            this.markerProvider.ref.setIcon(this);\n            this.updateEvent.emit({\n                target: this,\n                type: \"update\",\n            });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IconDirective.prototype, \"tooltipAnchor\", {\n        get: function () {\n            return this.options.tooltipAnchor;\n        },\n        /**\n         * Input for the tooltip-anchor.\n         * Use it with `<yaga-icon [tooltipAnchor]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#icon-tooltipanchor Original Leaflet documentation\n         */\n        set: function (val) {\n            this.options.tooltipAnchor = val;\n            this.markerProvider.ref.setIcon(this);\n            this.updateEvent.emit({\n                target: this,\n                type: \"update\",\n            });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IconDirective.prototype, \"shadowUrl\", {\n        get: function () {\n            return this.options.shadowUrl;\n        },\n        /**\n         * Input for the shadow-url.\n         * Use it with `<yaga-icon [shadowUrl]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#icon-shadowurl Original Leaflet documentation\n         */\n        set: function (val) {\n            this.options.shadowUrl = val;\n            this.markerProvider.ref.setIcon(this);\n            this.updateEvent.emit({\n                target: this,\n                type: \"update\",\n            });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IconDirective.prototype, \"shadowRetinaUrl\", {\n        get: function () {\n            return this.options.shadowRetinaUrl;\n        },\n        /**\n         * Input for the shadow-url for retina displays.\n         * Use it with `<yaga-icon [shadowUrl]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#icon-shadowretinaurl Original Leaflet documentation\n         */\n        set: function (val) {\n            this.options.shadowRetinaUrl = val;\n            this.markerProvider.ref.setIcon(this);\n            this.updateEvent.emit({\n                target: this,\n                type: \"update\",\n            });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IconDirective.prototype, \"shadowSize\", {\n        get: function () {\n            return this.options.shadowSize;\n        },\n        /**\n         * Input for the shadow-size.\n         * Use it with `<yaga-icon [shadowSize]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#icon-shadowsize Original Leaflet documentation\n         */\n        set: function (val) {\n            this.options.shadowSize = val;\n            this.markerProvider.ref.setIcon(this);\n            this.updateEvent.emit({\n                target: this,\n                type: \"update\",\n            });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IconDirective.prototype, \"shadowAnchor\", {\n        get: function () {\n            return this.options.shadowAnchor;\n        },\n        /**\n         * Input for the shadow-anchor.\n         * Use it with `<yaga-icon [shadowAnchor]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#icon-shadowanchor Original Leaflet documentation\n         */\n        set: function (val) {\n            this.options.shadowAnchor = val;\n            this.markerProvider.ref.setIcon(this);\n            this.updateEvent.emit({\n                target: this,\n                type: \"update\",\n            });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    __decorate([\n        core_1.Output(\"update\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], IconDirective.prototype, \"updateEvent\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], IconDirective.prototype, \"className\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String),\n        __metadata(\"design:paramtypes\", [String])\n    ], IconDirective.prototype, \"iconUrl\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], IconDirective.prototype, \"iconRetinaUrl\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", leaflet_1.Point),\n        __metadata(\"design:paramtypes\", [leaflet_1.Point])\n    ], IconDirective.prototype, \"iconSize\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", leaflet_1.Point),\n        __metadata(\"design:paramtypes\", [leaflet_1.Point])\n    ], IconDirective.prototype, \"iconAnchor\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", leaflet_1.Point),\n        __metadata(\"design:paramtypes\", [leaflet_1.Point])\n    ], IconDirective.prototype, \"popupAnchor\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", leaflet_1.Point),\n        __metadata(\"design:paramtypes\", [leaflet_1.Point])\n    ], IconDirective.prototype, \"tooltipAnchor\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], IconDirective.prototype, \"shadowUrl\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], IconDirective.prototype, \"shadowRetinaUrl\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", leaflet_1.Point),\n        __metadata(\"design:paramtypes\", [leaflet_1.Point])\n    ], IconDirective.prototype, \"shadowSize\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", leaflet_1.Point),\n        __metadata(\"design:paramtypes\", [leaflet_1.Point])\n    ], IconDirective.prototype, \"shadowAnchor\", null);\n    IconDirective = __decorate([\n        core_1.Directive({\n            selector: \"yaga-icon\",\n        }),\n        __metadata(\"design:paramtypes\", [marker_provider_1.MarkerProvider])\n    ], IconDirective);\n    return IconDirective;\n}(leaflet_1.Icon));\nexports.IconDirective = IconDirective;\n"]}