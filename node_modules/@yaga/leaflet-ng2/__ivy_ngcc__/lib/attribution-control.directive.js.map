{"version":3,"file":"attribution-control.directive.js","sources":["attribution-control.directive.js"],"names":[],"mappingsoBAAoC;AACpC;AACA;AACA;AACA","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar leaflet_1 = require(\"leaflet\");\nvar consts_1 = require(\"./consts\");\nvar map_provider_1 = require(\"./map.provider\");\nvar mouse_event_helper_1 = require(\"./mouse-event-helper\");\n/**\n * Angular2 directive for the attribution-control of Leaflet.\n *\n * *You can use this directive in an Angular2 template after importing `YagaModule`.*\n *\n * How to use in a template:\n * ```html\n * <yaga-map>\n *     <yaga-attribution-control\n *         [(display)]=\"...\"\n *         [(zIndex)]=\"...\"\n *         [(position)]=\"...\"\n *         [(prefix)]=\"...\"\n *         [(attributions)]=\"...\"\n *\n *         (add)=\"...\"\n *         (remove)=\"...\"\n *         (click)=\"...\"\n *         (dblclick)=\"...\"\n *         (mousedown)=\"...\"\n *         (mouseover)=\"...\"\n *         (mouseout)=\"...\"\n *         >\n *     </yaga-attribution-control>\n * </yaga-map>\n * ```\n *\n * @link http://leafletjs.com/reference-1.2.0.html#control-attribution Original Leaflet documentation\n * @link https://leaflet-ng2.yagajs.org/latest/browser-test?grep=Attribution-Control%20Directive Unit-Test\n * @link https://leaflet-ng2.yagajs.org/latest/coverage/lcov-report/lib/attribution-control.directive.js.html\n * Test coverage\n * @link https://leaflet-ng2.yagajs.org/latest/typedoc/classes/attributioncontroldirective.html API documentation\n * @example https://leaflet-ng2.yagajs.org/latest/examples/attribution-control-directive/\n */\nvar AttributionControlDirective = /** @class */ (function (_super) {\n    __extends(AttributionControlDirective, _super);\n    function AttributionControlDirective(mapProvider) {\n        var _this = _super.call(this, { prefix: consts_1.ATTRIBUTION_PREFIX }) || this;\n        _this.mapProvider = mapProvider;\n        /**\n         * Two-Way bound property for the display status of the control.\n         * Use it with `<yaga-attribution-control [(display)]=\"someValue\">`\n         * or `<yaga-attribution-control (displayChange)=\"processEvent($event)\">`\n         */\n        _this.displayChange = new core_1.EventEmitter();\n        /**\n         * Two-Way bound property for the position of the control.\n         * Use it with `<yaga-attribution-control [(position)]=\"someValue\">`\n         * or `<yaga-attribution-control (positionChange)=\"processEvent($event)\">`\n         */\n        _this.positionChange = new core_1.EventEmitter();\n        /**\n         * Two-Way bound property for the prefix of the control.\n         * Use it with `<yaga-attribution-control [(prefix)]=\"someValue\">`\n         * or `<yaga-attribution-control (prefixChange)=\"processEvent($event)\">`\n         */\n        _this.prefixChange = new core_1.EventEmitter();\n        /**\n         * Two-Way bound property for the list of attributions of the control.\n         * Use it with `<yaga-attribution-control [(attributions)]=\"someValue\">`\n         * or `<yaga-attribution-control (attributionsChange)=\"processEvent($event)\">`\n         */\n        _this.attributionsChange = new core_1.EventEmitter();\n        /**\n         * From leaflet fired add event.\n         * Use it with `<yaga-attribution-control (add)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#control-attribution-add Original Leaflet documentation\n         */\n        _this.addEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired remove event.\n         * Use it with `<yaga-attribution-control (remove)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#control-attribution-remove Original Leaflet documentation\n         */\n        _this.removeEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired click event.\n         * Use it with `<yaga-attribution-control (click)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#control-attribution-click Original Leaflet documentation\n         */\n        _this.clickEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired dblclick event.\n         * Use it with `<yaga-attribution-control (dblclick)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#control-attribution-dblclick Original Leaflet documentation\n         */\n        _this.dblclickEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired mousedown event.\n         * Use it with `<yaga-attribution-control (mousedown)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#control-attribution-mousedown Original Leaflet documentation\n         */\n        _this.mousedownEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired mouseover event.\n         * Use it with `<yaga-attribution-control (mouseover)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#control-attribution-mouseover Original Leaflet documentation\n         */\n        _this.mouseoverEvent = new core_1.EventEmitter();\n        /**\n         * From leaflet fired mouseout event.\n         * Use it with `<yaga-attribution-control (mouseout)=\"processEvent($event)\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#control-attribution-mouseout Original Leaflet documentation\n         */\n        _this.mouseoutEvent = new core_1.EventEmitter();\n        mapProvider.ref.addControl(_this);\n        // Events\n        _this.getContainer().addEventListener(\"click\", function (event) {\n            _this.clickEvent.emit(mouse_event_helper_1.enhanceMouseEvent(event, _this._map));\n        });\n        _this.getContainer().addEventListener(\"dblclick\", function (event) {\n            _this.dblclickEvent.emit(mouse_event_helper_1.enhanceMouseEvent(event, _this._map));\n        });\n        _this.getContainer().addEventListener(\"mousedown\", function (event) {\n            _this.mousedownEvent.emit(mouse_event_helper_1.enhanceMouseEvent(event, _this._map));\n        });\n        _this.getContainer().addEventListener(\"mouseover\", function (event) {\n            _this.mouseoverEvent.emit(mouse_event_helper_1.enhanceMouseEvent(event, _this._map));\n        });\n        _this.getContainer().addEventListener(\"mouseout\", function (event) {\n            _this.mouseoutEvent.emit(mouse_event_helper_1.enhanceMouseEvent(event, _this._map));\n        });\n        return _this;\n    }\n    /**\n     * Internal method to provide the removal of the control in Leaflet, when removing it from the Angular template\n     */\n    AttributionControlDirective.prototype.ngOnDestroy = function () {\n        this.mapProvider.ref.removeControl(this);\n    };\n    /**\n     * Derived remove function\n     */\n    AttributionControlDirective.prototype.remove = function () {\n        /* tslint:disable */\n        _super.prototype.remove.call(this);\n        this.displayChange.emit(false);\n        this.removeEvent.emit({ target: this, type: \"remove\" });\n        return this;\n    };\n    /**\n     * Derived addTo function\n     */\n    AttributionControlDirective.prototype.addTo = function (map) {\n        /* tslint:disable */\n        _super.prototype.addTo.call(this, map);\n        this.displayChange.emit(true);\n        this.addEvent.emit({ target: this, type: \"add\" });\n        return this;\n    };\n    /**\n     * Derived method of the original setPosition.\n     * @link http://leafletjs.com/reference-1.2.0.html#control-attribution-setposition Original Leaflet documentation\n     */\n    AttributionControlDirective.prototype.setPosition = function (val) {\n        _super.prototype.setPosition.call(this, val);\n        this.positionChange.emit(val);\n        return this;\n    };\n    Object.defineProperty(AttributionControlDirective.prototype, \"opacity\", {\n        get: function () {\n            if (this.getContainer().style.opacity !== undefined && this.getContainer().style.opacity !== null) {\n                return parseFloat(this.getContainer().style.opacity);\n            }\n            return;\n        },\n        /**\n         * Two-Way bound property for the opacity.\n         * Use it with `<yaga-attribution-control [(opacity)]=\"someValue\">`\n         * or `<yaga-attribution-control [opacity]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#control-attribution-opacity Original Leaflet documentation\n         */\n        set: function (val) {\n            if (typeof val === \"number\") {\n                this.getContainer().style.opacity = val.toString();\n                return;\n            }\n            this.getContainer().style.opacity = null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AttributionControlDirective.prototype, \"display\", {\n        get: function () {\n            return !!this._map && this.getContainer().style.display !== \"none\";\n        },\n        /**\n         * Two-Way bound property for the display state.\n         * Use it with `<yaga-attribution-control [(display)]=\"someValue\">`\n         * or `<yaga-attribution-control [display]=\"someValue\">`\n         */\n        set: function (val) {\n            if (!this._map) {\n                // No map available...\n                return;\n            }\n            if (val) {\n                this.getContainer().style.display = \"\";\n                return;\n            }\n            this.getContainer().style.display = \"none\";\n            return;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AttributionControlDirective.prototype, \"position\", {\n        get: function () {\n            return this.getPosition();\n        },\n        /**\n         * Two-Way bound property for the position.\n         * Use it with `<yaga-attribution-control [(position)]=\"someValue\">`\n         * or `<yaga-attribution-control [position]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#control-attribution-position Original Leaflet documentation\n         */\n        set: function (val) {\n            this.setPosition(val);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AttributionControlDirective.prototype, \"zIndex\", {\n        get: function () {\n            if (this.getContainer().style.zIndex !== undefined && this.getContainer().style.zIndex !== null) {\n                return parseInt(this.getContainer().style.zIndex, 10);\n            }\n        },\n        /**\n         * Input for the zIndex of the control.\n         * Use it with `<yaga-attribution-control [zIndex]=\"someValue\">`\n         */\n        set: function (zIndex) {\n            if (typeof zIndex === \"number\") {\n                this.getContainer().style.zIndex = zIndex.toString();\n                return;\n            }\n            this.getContainer().style.zIndex = null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Derived method of the original setPrefix.\n     * @link http://leafletjs.com/reference-1.2.0.html#control-attribution-setprefix Original Leaflet documentation\n     */\n    AttributionControlDirective.prototype.setPrefix = function (prefix) {\n        _super.prototype.setPrefix.call(this, prefix);\n        this.prefixChange.emit(prefix);\n        return this;\n    };\n    Object.defineProperty(AttributionControlDirective.prototype, \"prefix\", {\n        get: function () {\n            return this.options.prefix;\n        },\n        /**\n         * Two-Way bound property for the prefix.\n         * Use it with `<yaga-attribution-control [(prefix)]=\"someValue\">`\n         * or `<yaga-attribution-control [prefix]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#control-attribution-prefix Original Leaflet documentation\n         */\n        set: function (val) {\n            this.setPrefix(val);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Derived method of the original addAttribution.\n     * @link http://leafletjs.com/reference-1.2.0.html#control-attribution-addattribution Original Leaflet documentation\n     */\n    AttributionControlDirective.prototype.addAttribution = function (val) {\n        _super.prototype.addAttribution.call(this, val);\n        this.attributionsChange.emit(this.attributions);\n        return this;\n    };\n    /**\n     * Derived method of the original removeAttribution.\n     * @link http://leafletjs.com/reference-1.2.0.html#control-attribution-removeattribution\n     * Original Leaflet documentation\n     */\n    AttributionControlDirective.prototype.removeAttribution = function (val) {\n        _super.prototype.removeAttribution.call(this, val);\n        this.attributionsChange.emit(this.attributions);\n        return this;\n    };\n    Object.defineProperty(AttributionControlDirective.prototype, \"attributions\", {\n        get: function () {\n            var keys = Object.keys(this._attributions);\n            var arr = [];\n            for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n                var key = keys_1[_i];\n                if (this._attributions[key] === 1) {\n                    arr.push(key);\n                }\n            }\n            return arr;\n        },\n        /**\n         * Two-Way bound property for the attributions.\n         * Use it with `<yaga-attribution-control [(attributions)]=\"someValue\">`\n         * or `<yaga-attribution-control [attributions]=\"someValue\">`\n         * @link http://leafletjs.com/reference-1.2.0.html#control-attribution-attributions Original Leaflet documentation\n         */\n        set: function (val) {\n            this.removeAllAttributions(true);\n            for (var _i = 0, val_1 = val; _i < val_1.length; _i++) {\n                var attr = val_1[_i];\n                _super.prototype.addAttribution.call(this, attr);\n            }\n            this.attributionsChange.emit(this.attributions);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Self written method to provide the removal of all attributions in a single step\n     */\n    AttributionControlDirective.prototype.removeAllAttributions = function (silent) {\n        var keys = Object.keys(this._attributions);\n        for (var _i = 0, keys_2 = keys; _i < keys_2.length; _i++) {\n            var key = keys_2[_i];\n            _super.prototype.removeAttribution.call(this, key);\n        }\n        if (silent) {\n            return this;\n        }\n        this.attributionsChange.emit([]);\n        return this;\n    };\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], AttributionControlDirective.prototype, \"displayChange\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], AttributionControlDirective.prototype, \"positionChange\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], AttributionControlDirective.prototype, \"prefixChange\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], AttributionControlDirective.prototype, \"attributionsChange\", void 0);\n    __decorate([\n        core_1.Output(\"add\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], AttributionControlDirective.prototype, \"addEvent\", void 0);\n    __decorate([\n        core_1.Output(\"remove\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], AttributionControlDirective.prototype, \"removeEvent\", void 0);\n    __decorate([\n        core_1.Output(\"click\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], AttributionControlDirective.prototype, \"clickEvent\", void 0);\n    __decorate([\n        core_1.Output(\"dblclick\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], AttributionControlDirective.prototype, \"dblclickEvent\", void 0);\n    __decorate([\n        core_1.Output(\"mousedown\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], AttributionControlDirective.prototype, \"mousedownEvent\", void 0);\n    __decorate([\n        core_1.Output(\"mouseover\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], AttributionControlDirective.prototype, \"mouseoverEvent\", void 0);\n    __decorate([\n        core_1.Output(\"mouseout\"),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], AttributionControlDirective.prototype, \"mouseoutEvent\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], AttributionControlDirective.prototype, \"opacity\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean),\n        __metadata(\"design:paramtypes\", [Boolean])\n    ], AttributionControlDirective.prototype, \"display\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String),\n        __metadata(\"design:paramtypes\", [String])\n    ], AttributionControlDirective.prototype, \"position\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], AttributionControlDirective.prototype, \"zIndex\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String),\n        __metadata(\"design:paramtypes\", [String])\n    ], AttributionControlDirective.prototype, \"prefix\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Array),\n        __metadata(\"design:paramtypes\", [Array])\n    ], AttributionControlDirective.prototype, \"attributions\", null);\n    AttributionControlDirective = __decorate([\n        core_1.Directive({\n            selector: \"yaga-attribution-control\",\n        }),\n        __metadata(\"design:paramtypes\", [map_provider_1.MapProvider])\n    ], AttributionControlDirective);\n    return AttributionControlDirective;\n}(leaflet_1.Control.Attribution));\nexports.AttributionControlDirective = AttributionControlDirective;\n"]}